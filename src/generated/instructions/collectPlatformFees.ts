/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PAYAI_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_PLATFORM_FEES_DISCRIMINATOR = new Uint8Array([
  191, 153, 219, 164, 5, 65, 153, 48,
]);

export function getCollectPlatformFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_PLATFORM_FEES_DISCRIMINATOR
  );
}

export type CollectPlatformFeesInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountGlobalState extends string | IAccountMeta<string> = string,
  TAccountPlatformFeeVault extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountGlobalState extends string
        ? WritableAccount<TAccountGlobalState>
        : TAccountGlobalState,
      TAccountPlatformFeeVault extends string
        ? WritableAccount<TAccountPlatformFeeVault>
        : TAccountPlatformFeeVault,
      TAccountAdmin extends string
        ? WritableAccount<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectPlatformFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CollectPlatformFeesInstructionDataArgs = {};

export function getCollectPlatformFeesInstructionDataEncoder(): Encoder<CollectPlatformFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: COLLECT_PLATFORM_FEES_DISCRIMINATOR,
    })
  );
}

export function getCollectPlatformFeesInstructionDataDecoder(): Decoder<CollectPlatformFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCollectPlatformFeesInstructionDataCodec(): Codec<
  CollectPlatformFeesInstructionDataArgs,
  CollectPlatformFeesInstructionData
> {
  return combineCodec(
    getCollectPlatformFeesInstructionDataEncoder(),
    getCollectPlatformFeesInstructionDataDecoder()
  );
}

export type CollectPlatformFeesAsyncInput<
  TAccountSigner extends string = string,
  TAccountGlobalState extends string = string,
  TAccountPlatformFeeVault extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  globalState?: Address<TAccountGlobalState>;
  platformFeeVault?: Address<TAccountPlatformFeeVault>;
  admin: Address<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCollectPlatformFeesInstructionAsync<
  TAccountSigner extends string,
  TAccountGlobalState extends string,
  TAccountPlatformFeeVault extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CollectPlatformFeesAsyncInput<
    TAccountSigner,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CollectPlatformFeesInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountAdmin,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    platformFeeVault: {
      value: input.platformFeeVault ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.globalState.value) {
    accounts.globalState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            183, 21, 201, 39, 132, 92, 173, 133, 20, 49, 110, 146, 116, 34, 193,
            22, 230, 35, 4, 182, 110, 1, 127, 84, 6, 28, 105, 208, 196, 28, 74,
            185,
          ])
        ),
      ],
    });
  }
  if (!accounts.platformFeeVault.value) {
    accounts.platformFeeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 95, 102, 101, 101, 95, 118,
            97, 117, 108, 116,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.platformFeeVault),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCollectPlatformFeesInstructionDataEncoder().encode({}),
  } as CollectPlatformFeesInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CollectPlatformFeesInput<
  TAccountSigner extends string = string,
  TAccountGlobalState extends string = string,
  TAccountPlatformFeeVault extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  globalState: Address<TAccountGlobalState>;
  platformFeeVault: Address<TAccountPlatformFeeVault>;
  admin: Address<TAccountAdmin>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCollectPlatformFeesInstruction<
  TAccountSigner extends string,
  TAccountGlobalState extends string,
  TAccountPlatformFeeVault extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: CollectPlatformFeesInput<
    TAccountSigner,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectPlatformFeesInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountGlobalState,
  TAccountPlatformFeeVault,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    platformFeeVault: {
      value: input.platformFeeVault ?? null,
      isWritable: true,
    },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.platformFeeVault),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCollectPlatformFeesInstructionDataEncoder().encode({}),
  } as CollectPlatformFeesInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCollectPlatformFeesInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    globalState: TAccountMetas[1];
    platformFeeVault: TAccountMetas[2];
    admin: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CollectPlatformFeesInstructionData;
};

export function parseCollectPlatformFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCollectPlatformFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      globalState: getNextAccount(),
      platformFeeVault: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCollectPlatformFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
