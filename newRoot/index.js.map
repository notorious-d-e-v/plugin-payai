{"version":3,"sources":["../../../node_modules/hashlru/index.js","../../../node_modules/merge-options/node_modules/is-plain-obj/index.js","../../../node_modules/merge-options/index.js","../../../node_modules/retry/lib/retry_operation.js","../../../node_modules/retry/lib/retry.js","../../../node_modules/retry/index.js","../../../node_modules/@chainsafe/as-chacha20poly1305/common/const.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/chacha20poly1305.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/poly1305.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/wasmCode.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/wasm.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/chacha20.ts","../../../node_modules/@chainsafe/as-chacha20poly1305/src/index.ts","../../../node_modules/is-electron/index.js","../src/client.ts","../../../node_modules/libp2p/src/index.ts","../../../node_modules/libp2p/src/config.ts","../../../node_modules/progress-events/src/index.ts","../../../node_modules/@multiformats/dns/src/resolvers/default.ts","../../../node_modules/@multiformats/dns/src/utils/get-types.ts","../../../node_modules/uint8arrays/src/to-string.node.ts","../../../node_modules/multiformats/src/bases/base10.ts","../../../node_modules/multiformats/src/bytes.ts","../../../node_modules/multiformats/src/vendor/base-x.js","../../../node_modules/multiformats/src/bases/base.ts","../../../node_modules/multiformats/src/bases/base16.ts","../../../node_modules/multiformats/src/bases/base2.ts","../../../node_modules/multiformats/src/bases/base256emoji.ts","../../../node_modules/multiformats/src/bases/base32.ts","../../../node_modules/multiformats/src/bases/base36.ts","../../../node_modules/multiformats/src/bases/base58.ts","../../../node_modules/multiformats/src/bases/base64.ts","../../../node_modules/multiformats/src/bases/base8.ts","../../../node_modules/multiformats/src/bases/identity.ts","../../../node_modules/multiformats/src/codecs/json.ts","../../../node_modules/multiformats/src/hashes/identity.ts","../../../node_modules/multiformats/src/vendor/varint.js","../../../node_modules/multiformats/src/varint.ts","../../../node_modules/multiformats/src/hashes/digest.ts","../../../node_modules/multiformats/src/hashes/sha2.ts","../../../node_modules/multiformats/src/hashes/hasher.ts","../../../node_modules/multiformats/src/cid.ts","../../../node_modules/multiformats/src/basics.ts","../../../node_modules/uint8arrays/src/alloc.node.ts","../../../node_modules/uint8arrays/src/util/as-uint8array.node.ts","../../../node_modules/uint8arrays/src/util/bases.ts","../../../node_modules/@multiformats/dns/src/utils/to-dns-response.ts","../../../node_modules/@multiformats/dns/src/utils/cache.ts","../../../node_modules/@multiformats/dns/src/dns.ts","../../../node_modules/@multiformats/dns/src/index.ts","../../../node_modules/uint8arrays/src/equals.ts","../../../node_modules/uint8-varint/src/index.ts","../../../node_modules/uint8arrays/src/concat.node.ts","../../../node_modules/@chainsafe/is-ip/src/parser.ts","../../../node_modules/@chainsafe/is-ip/src/parse.ts","../../../node_modules/@chainsafe/netmask/src/util.ts","../../../node_modules/@chainsafe/netmask/src/ip.ts","../../../node_modules/@chainsafe/netmask/src/cidr.ts","../../../node_modules/@chainsafe/netmask/src/ipnet.ts","../../../node_modules/uint8arrays/src/from-string.node.ts","../../../node_modules/@chainsafe/is-ip/src/is-ip.node.ts","../../../node_modules/@multiformats/multiaddr/src/ip.ts","../../../node_modules/@multiformats/multiaddr/src/protocols-table.ts","../../../node_modules/@multiformats/multiaddr/src/convert.ts","../../../node_modules/@multiformats/multiaddr/src/codec.ts","../../../node_modules/@multiformats/multiaddr/src/multiaddr.ts","../../../node_modules/@multiformats/multiaddr/src/index.ts","../../../node_modules/@multiformats/multiaddr/src/resolvers/dnsaddr.ts","../../../node_modules/merge-options/index.mjs","../../../node_modules/libp2p/src/libp2p.ts","../../../node_modules/interface-datastore/src/key.ts","../../../node_modules/interface-store/src/errors.ts","../../../node_modules/it-drain/src/index.ts","../../../node_modules/it-peekable/src/index.ts","../../../node_modules/it-filter/src/index.ts","../../../node_modules/it-all/src/index.ts","../../../node_modules/it-sort/src/index.ts","../../../node_modules/it-take/src/index.ts","../../../node_modules/datastore-core/src/base.ts","../../../node_modules/datastore-core/src/memory.ts","../../../node_modules/libp2p/src/address-manager/index.ts","../../../node_modules/libp2p/src/address-manager/dns-mappings.ts","../../../node_modules/libp2p/src/address-manager/ip-mappings.ts","../../../node_modules/libp2p/src/address-manager/observed-addresses.ts","../../../node_modules/libp2p/src/address-manager/transport-addresses.ts","../../../node_modules/libp2p/src/components.ts","../../../node_modules/libp2p/src/errors.ts","../../../node_modules/libp2p/src/config/connection-gater.ts","../../../node_modules/libp2p/src/connection-manager/index.ts","../../../node_modules/libp2p/src/get-peer.ts","../../../node_modules/libp2p/src/connection-manager/connection-pruner.ts","../../../node_modules/libp2p/src/connection-manager/constants.defaults.ts","../../../node_modules/libp2p/src/connection-manager/constants.ts","../../../node_modules/libp2p/src/connection-manager/utils.ts","../../../node_modules/libp2p/src/connection-manager/dial-queue.ts","../../../node_modules/@multiformats/multiaddr-matcher/src/utils.ts","../../../node_modules/@multiformats/multiaddr-matcher/src/index.ts","../../../node_modules/any-signal/src/index.ts","../../../node_modules/libp2p/src/connection-manager/address-sorter.ts","../../../node_modules/libp2p/src/connection-manager/reconnect-queue.ts","../../../node_modules/libp2p/node_modules/p-retry/index.js","../../../node_modules/is-network-error/index.js","../../../node_modules/libp2p/src/connection-monitor.ts","../../../node_modules/p-defer/index.js","../../../node_modules/race-signal/src/index.ts","../../../node_modules/it-queueless-pushable/src/index.ts","../../../node_modules/uint8arraylist/src/index.ts","../../../node_modules/it-byte-stream/src/errors.ts","../../../node_modules/it-byte-stream/src/index.ts","../../../node_modules/libp2p/src/content-routing.ts","../../../node_modules/it-pushable/src/fifo.ts","../../../node_modules/it-pushable/src/index.ts","../../../node_modules/it-merge/src/index.ts","../../../node_modules/libp2p/src/peer-routing.ts","../../../node_modules/it-parallel/src/index.ts","../../../node_modules/libp2p/src/random-walk.ts","../../../node_modules/race-event/src/index.ts","../../../node_modules/libp2p/src/registrar.ts","../../../node_modules/libp2p/src/transport-manager.ts","../../../node_modules/libp2p/src/upgrader.ts","../../../node_modules/libp2p/src/connection/index.ts","../../../node_modules/libp2p/src/version.ts","../src/config/libp2p.ts","../../../node_modules/@chainsafe/libp2p-noise/src/noise.ts","../../../node_modules/it-length-prefixed/src/utils.ts","../../../node_modules/it-length-prefixed/src/encode.ts","../../../node_modules/it-length-prefixed/src/errors.ts","../../../node_modules/it-length-prefixed/src/decode.ts","../../../node_modules/it-length-prefixed-stream/src/errors.ts","../../../node_modules/it-length-prefixed-stream/src/index.ts","../../../node_modules/it-pair/src/index.ts","../../../node_modules/it-pair/src/duplex.ts","../../../node_modules/it-pipe/src/index.ts","../../../node_modules/@chainsafe/libp2p-noise/src/constants.ts","../../../node_modules/@chainsafe/libp2p-noise/src/crypto/index.ts","../../../node_modules/@chainsafe/as-sha256/src/alloc.ts","../../../node_modules/@chainsafe/as-sha256/src/wasmCode.ts","../../../node_modules/@chainsafe/as-sha256/src/wasmSimdCode.ts","../../../node_modules/@chainsafe/as-sha256/src/wasm.ts","../../../node_modules/@chainsafe/as-sha256/src/index.ts","../../../node_modules/wherearewe/src/index.js","../../../node_modules/@noble/ciphers/src/_assert.ts","../../../node_modules/@noble/ciphers/src/utils.ts","../../../node_modules/@noble/ciphers/src/_arx.ts","../../../node_modules/@noble/ciphers/src/_poly1305.ts","../../../node_modules/@noble/ciphers/src/chacha.ts","../../../node_modules/@noble/hashes/src/_assert.ts","../../../node_modules/@noble/hashes/src/cryptoNode.ts","../../../node_modules/@noble/hashes/src/utils.ts","../../../node_modules/@noble/hashes/src/_md.ts","../../../node_modules/@noble/curves/src/abstract/utils.ts","../../../node_modules/@noble/curves/src/abstract/modular.ts","../../../node_modules/@noble/curves/src/abstract/montgomery.ts","../../../node_modules/@noble/curves/src/ed25519.ts","../../../node_modules/@noble/hashes/src/hmac.ts","../../../node_modules/@noble/hashes/src/hkdf.ts","../../../node_modules/@noble/hashes/src/sha256.ts","../../../node_modules/@chainsafe/libp2p-noise/src/crypto/js.ts","../../../node_modules/@chainsafe/libp2p-noise/src/crypto.ts","../../../node_modules/@chainsafe/libp2p-noise/src/encoder.ts","../../../node_modules/@chainsafe/libp2p-noise/src/metrics.ts","../../../node_modules/@chainsafe/libp2p-noise/src/logger.ts","../../../node_modules/@chainsafe/libp2p-noise/src/errors.ts","../../../node_modules/@chainsafe/libp2p-noise/src/nonce.ts","../../../node_modules/@chainsafe/libp2p-noise/src/protocol.ts","../../../node_modules/@chainsafe/libp2p-noise/src/utils.ts","../../../node_modules/protons-runtime/src/utils/float.ts","../../../node_modules/protons-runtime/src/utils/longbits.ts","../../../node_modules/protons-runtime/src/utils/utf8.ts","../../../node_modules/protons-runtime/src/utils/reader.ts","../../../node_modules/protons-runtime/src/decode.ts","../../../node_modules/protons-runtime/src/utils/pool.ts","../../../node_modules/protons-runtime/src/utils/writer.ts","../../../node_modules/protons-runtime/src/encode.ts","../../../node_modules/protons-runtime/src/codec.ts","../../../node_modules/protons-runtime/src/codecs/message.ts","../../../node_modules/@chainsafe/libp2p-noise/src/proto/payload.ts","../../../node_modules/@chainsafe/libp2p-noise/src/performHandshake.ts","../../../node_modules/@chainsafe/libp2p-noise/src/streaming.ts","../../../node_modules/@chainsafe/libp2p-noise/src/index.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/muxer.ts","../../../node_modules/get-iterator/src/index.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/config.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/errors.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/constants.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/frame.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/decode.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/encode.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/stream.ts","../../../node_modules/it-foreach/src/index.ts","../../../node_modules/@chainsafe/libp2p-yamux/src/index.ts","../src/config/bootstrap.json","../src/datadir.ts","../src/utils.ts","../src/actions/browseAgents.ts","../src/actions/makeOfferAction.ts","../src/actions/acceptOfferAction.ts","../src/actions/advertiseServicesAction.ts","../src/index.ts"],"sourcesContent":["module.exports = function (max) {\n\n  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')\n\n  var size = 0, cache = Object.create(null), _cache = Object.create(null)\n\n  function update (key, value) {\n    cache[key] = value\n    size ++\n    if(size >= max) {\n      size = 0\n      _cache = cache\n      cache = Object.create(null)\n    }\n  }\n\n  return {\n    has: function (key) {\n      return cache[key] !== undefined || _cache[key] !== undefined\n    },\n    remove: function (key) {\n      if(cache[key] !== undefined)\n        cache[key] = undefined\n      if(_cache[key] !== undefined)\n        _cache[key] = undefined\n    },\n    get: function (key) {\n      var v = cache[key]\n      if(v !== undefined) return v\n      if((v = _cache[key]) !== undefined) {\n        update(key, v)\n        return v\n      }\n    },\n    set: function (key, value) {\n      if(cache[key] !== undefined) cache[key] = value\n      else update(key, value)\n    },\n    clear: function () {\n      cache = Object.create(null)\n      _cache = Object.create(null)\n    }\n  }\n}\n\n\n\n\n\n\n\n","'use strict';\n\nmodule.exports = value => {\n\tif (Object.prototype.toString.call(value) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn prototype === null || prototype === Object.prototype;\n};\n","'use strict';\nconst isOptionObject = require('is-plain-obj');\n\nconst {hasOwnProperty} = Object.prototype;\nconst {propertyIsEnumerable} = Object;\nconst defineProperty = (object, name, value) => Object.defineProperty(object, name, {\n\tvalue,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOptions = {\n\tconcatArrays: false,\n\tignoreUndefined: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n\tconst keys = [];\n\n\tfor (const key in value) {\n\t\tif (hasOwnProperty.call(value, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\n\t/* istanbul ignore else  */\n\tif (Object.getOwnPropertySymbols) {\n\t\tconst symbols = Object.getOwnPropertySymbols(value);\n\n\t\tfor (const symbol of symbols) {\n\t\t\tif (propertyIsEnumerable.call(value, symbol)) {\n\t\t\t\tkeys.push(symbol);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keys;\n};\n\nfunction clone(value) {\n\tif (Array.isArray(value)) {\n\t\treturn cloneArray(value);\n\t}\n\n\tif (isOptionObject(value)) {\n\t\treturn cloneOptionObject(value);\n\t}\n\n\treturn value;\n}\n\nfunction cloneArray(array) {\n\tconst result = array.slice(0, 0);\n\n\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\n\t\tdefineProperty(result, key, clone(array[key]));\n\t});\n\n\treturn result;\n}\n\nfunction cloneOptionObject(object) {\n\tconst result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};\n\n\tgetEnumerableOwnPropertyKeys(object).forEach(key => {\n\t\tdefineProperty(result, key, clone(object[key]));\n\t});\n\n\treturn result;\n}\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nconst mergeKeys = (merged, source, keys, config) => {\n\tkeys.forEach(key => {\n\t\tif (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Do not recurse into prototype chain of merged\n\t\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n\t\t\tdefineProperty(merged, key, merge(merged[key], source[key], config));\n\t\t} else {\n\t\t\tdefineProperty(merged, key, clone(source[key]));\n\t\t}\n\t});\n\n\treturn merged;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, config) => {\n\tlet result = merged.slice(0, 0);\n\tlet resultIndex = 0;\n\n\t[merged, source].forEach(array => {\n\t\tconst indices = [];\n\n\t\t// `result.concat(array)` with cloning\n\t\tfor (let k = 0; k < array.length; k++) {\n\t\t\tif (!hasOwnProperty.call(array, k)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices.push(String(k));\n\n\t\t\tif (array === merged) {\n\t\t\t\t// Already cloned\n\t\t\t\tdefineProperty(result, resultIndex++, array[k]);\n\t\t\t} else {\n\t\t\t\tdefineProperty(result, resultIndex++, clone(array[k]));\n\t\t\t}\n\t\t}\n\n\t\t// Merge non-index keys\n\t\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);\n\t});\n\n\treturn result;\n};\n\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\nfunction merge(merged, source, config) {\n\tif (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n\t\treturn concatArrays(merged, source, config);\n\t}\n\n\tif (!isOptionObject(source) || !isOptionObject(merged)) {\n\t\treturn clone(source);\n\t}\n\n\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\n\nmodule.exports = function (...options) {\n\tconst config = merge(clone(defaultMergeOptions), (this !== globalThis && this) || {}, defaultMergeOptions);\n\tlet merged = {_: {}};\n\n\tfor (const option of options) {\n\t\tif (option === undefined) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isOptionObject(option)) {\n\t\t\tthrow new TypeError('`' + option + '` is not an Option Object');\n\t\t}\n\n\t\tmerged = merge(merged, {_: option}, config);\n\t}\n\n\treturn merged._;\n};\n","function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n","var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n","module.exports = require('./lib/retry');",null,null,null,null,null,null,null,"// https://github.com/electron/electron/issues/2288\nfunction isElectron() {\n    // Renderer process\n    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {\n        return true;\n    }\n\n    // Main process\n    if (typeof process !== 'undefined' && typeof process.versions === 'object' && !!process.versions.electron) {\n        return true;\n    }\n\n    // Detect the user agent when the `nodeIntegration` option is set to false\n    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = isElectron;\n","import { type Client, IAgentRuntime } from '@elizaos/core';\nimport { elizaLogger } from '@elizaos/core';\nimport { createHelia, Helia } from 'helia';\nimport { createLibp2p, Libp2p, Libp2pOptions } from 'libp2p';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { createOrbitDB, OrbitDB, IPFSAccessController } from '@orbitdb/core';\nimport { FsBlockstore } from 'blockstore-fs';\nimport { LevelDatastore } from 'datastore-level'\nimport { libp2pOptions } from './config/libp2p';\nimport { dataDir, sellerServicesFile } from './datadir';\nimport bootstrapConfig from './config/bootstrap.json'\nimport fs from 'fs';\nimport { getSolanaKeypair, hashAndSign, getCIDFromOrbitDbHash, prepareBuyOffer, queryOrbitDbReturningCompleteEntries, prepareServiceAd, getBase58PublicKeyFromCryptoKey } from './utils';\n\nconst {\n    createHash,\n  } = await import('node:crypto');\n\nclass PayAIClient implements Client {\n  public libp2p: Libp2p | null = null;\n  public ipfs: Helia | null = null;\n  public orbitdb: OrbitDB | null = null;\n  public updatesDB: any = null;\n  public serviceAdsDB: any = null;\n  public buyOffersDB: any = null;\n  public agreementsDB: any = null;\n  private servicesConfig: any = null;\n  private servicesConfigPath: string;\n  private servicesConfigInterval: NodeJS.Timeout | null = null;\n  public sellerServiceAdCID: string | null = null;\n\n  constructor() {\n    elizaLogger.debug('PayAI Client created');\n  }\n\n  /**\n   * Initializes the PayAI Client by creating libp2p, Helia, and OrbitDB instances.\n   */\n  public async initialize(runtime: IAgentRuntime): Promise<void> {\n    try {\n      elizaLogger.info('Initializing PayAI Client');\n      const agentDir = dataDir + '/' + runtime.character.name;\n\n      // create libp2p instance\n      const libp2pDatastore: LevelDatastore = new LevelDatastore(agentDir + '/libp2p');\n      const libp2pConfig: Libp2pOptions = Object.assign({}, libp2pOptions);\n      libp2pConfig.datastore = libp2pDatastore;\n      this.libp2p = await createLibp2p(libp2pConfig);\n\n      // create ipfs instance\n      const blockstore = new FsBlockstore(agentDir + '/ipfs');\n      this.ipfs = await createHelia({ libp2p: this.libp2p, blockstore });\n\n      // create orbitdb instance\n      this.orbitdb = await createOrbitDB( {ipfs: this.ipfs, directory: agentDir});\n\n      // open updates database\n      this.updatesDB = await this.orbitdb.open(bootstrapConfig.databases.updates, { sync: true });\n      this.updatesDB.events.on('update', async (entry) => {\n        // what has been updated.\n        elizaLogger.debug('payai updates db: ', entry.payload.value);\n      });\n\n      // open service ads database\n      this.serviceAdsDB = await this.orbitdb.open(bootstrapConfig.databases.serviceAds, { sync: true });\n      this.serviceAdsDB.events.on('update', async (entry) => {\n        elizaLogger.debug('payai service ads db: ', entry.payload.value);\n      });\n\n      // open buy offers database\n      this.buyOffersDB = await this.orbitdb.open(bootstrapConfig.databases.buyOffers, { sync: true });\n      this.buyOffersDB.events.on('update', async (entry) => {\n        elizaLogger.debug('payai buy offers db: ', entry.payload.value);\n      });\n\n      // open agreements database\n      this.agreementsDB = await this.orbitdb.open(bootstrapConfig.databases.agreements, { sync: true });\n      this.agreementsDB.events.on('update', async (entry) => {\n        elizaLogger.debug('payai agreements db: ', entry.payload.value);\n      });\n\n      // write to the updates database\n      await this.updatesDB.add(`Agent ${runtime.character.name} joined the payai network`);\n\n      // init seller agent checks\n      this.servicesConfigPath = `${agentDir}/sellerServices.json`;\n      await this.initSellerAgentFunctionality(runtime);\n\n      elizaLogger.info('PayAI Client initialized');\n    } catch (error) {\n      elizaLogger.error('Failed to initialize PayAI Client', error);\n      throw error;\n    }\n  }\n\n    /**\n     * Initializes the seller agent functionality.\n     * This includes loading the sellerServices.json file, updating the serviceAds database\n     * if necessary, and periodically checking for updates to the sellerServices.json file.\n     * @param runtime - The runtime context for the client.\n     */\n    private async initSellerAgentFunctionality(runtime: IAgentRuntime): Promise<void> {\n      // load the services from the sellerServices.json if the file exists\n      if (fs.existsSync(this.servicesConfigPath)) {\n        const localServices = JSON.parse(fs.readFileSync(this.servicesConfigPath, 'utf-8'));\n        this.servicesConfig = localServices;\n\n        // check if the service already exists in the serviceAdsDB\n        const localServiceAd = await prepareServiceAd(localServices, runtime);\n        const fetchedServiceAds = await queryOrbitDbReturningCompleteEntries(\n            this.serviceAdsDB,\n            (doc: any) => {\n                return (\n                    doc.message.toString() === localServiceAd.message.toString() &&\n                    doc.signature === localServiceAd.signature\n                );\n            }\n        );\n\n        // if the service does not exist in the serviceAdsDB, add it\n        if (fetchedServiceAds.length === 0) {\n          elizaLogger.info('Local services does not match serviceAdsDB, adding to database');\n          const result = await this.serviceAdsDB.put(localServiceAd);\n          this.sellerServiceAdCID = getCIDFromOrbitDbHash(result);\n          elizaLogger.info('Added new service to serviceAdsDB');\n          elizaLogger.info(\"CID: \", CID.parse(result, base58btc).toString());\n        } else {\n          this.sellerServiceAdCID = getCIDFromOrbitDbHash(fetchedServiceAds[0].hash);\n          elizaLogger.info('Local services marches serviceAdsDB, no need to update the database');\n        }\n      }\n\n      // start a periodic check for updates to the sellerServices.json file\n      // in case the seller agent changes their local services\n      await this.checkServicesConfig(runtime);\n      this.servicesConfigInterval = setInterval(() => {\n        this.checkServicesConfig(runtime).catch(error => {\n          elizaLogger.error('Error in servicesConfigInterval', error);\n        });\n      }, 10000);\n    }\n\n  private readAndParseServicesConfig(): any {\n    try {\n        const fileContents = fs.readFileSync(this.servicesConfigPath, 'utf-8');\n        return JSON.parse(fileContents);\n        }\n    catch (error) {\n        elizaLogger.error('Error reading sellerServices.json', error);\n        console.error(error);\n        throw error;\n    }\n  }\n\n  /**\n   * Checks the sellerServices.json file for updates and updates the serviceAdsDB if necessary.\n   */\n  private async checkServicesConfig(runtime: IAgentRuntime): Promise<void> {\n    try {\n      // return early if the file does not exist\n      if (!fs.existsSync(this.servicesConfigPath)) {\n        return;\n      }\n\n      // read and parse the contents of the sellerServices.json file\n      const parsedContents = this.readAndParseServicesConfig();\n\n      // contents have changed, update the serviceAdsDB\n      if (JSON.stringify(this.servicesConfig) !== JSON.stringify(parsedContents)) {\n        elizaLogger.info(\"sellerServices.json has changed\");\n        this.servicesConfig = parsedContents;\n        const serviceAd = await prepareServiceAd(this.servicesConfig, runtime);\n        const result = await this.serviceAdsDB.put(serviceAd);\n        this.sellerServiceAdCID = getCIDFromOrbitDbHash(result);\n        elizaLogger.info('Updated serviceAdsDB with new sellerServices.json contents');\n      }\n    } catch (error) {\n      elizaLogger.error('Error checking sellerServices.json', error);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /*\n   * Function to get an OrbitDB entry using its hash.\n   */\n    public async getEntryFromHash(hash: string, db: any): Promise<any> {\n        try {\n            const entry = await db.log.get(hash);\n            return entry.payload.value;\n        } catch (error) {\n            elizaLogger.error('Error getting orbitdb entry from hash', error);\n            throw error;\n        }\n    }\n\n    // TODO this will change once PayAI content is available from publicly accessible IPFS nodes\n    /* Function to get an OrbitDB entry using its ipfs CID. */\n    public async getEntryFromCID(cid: string, db: any): Promise<any> {\n        return this.getEntryFromHash(cid, db);\n    }\n\n  /*\n   * Close the OrbitDB databases.\n   */\n  public async closeDatabases(): Promise<void> {\n    try {\n      await this.updatesDB.close();\n      await this.serviceAdsDB.close();\n      await this.buyOffersDB.close();\n      await this.agreementsDB.close();\n      if (this.servicesConfigInterval) {\n        clearInterval(this.servicesConfigInterval);\n        this.servicesConfigInterval = null;\n      }\n    } catch (error) {\n      elizaLogger.error('Failed to close databases', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Starts the PayAI Client.\n   * @param runtime - The runtime context for the client.\n   */\n  public async start(runtime: IAgentRuntime): Promise<void> {\n    try {\n      await this.initialize(runtime);\n      elizaLogger.info('PayAI Client started');\n    } catch (error) {\n      elizaLogger.error('Error while starting PayAI Client', error);\n      console.error(error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stops the PayAI Client.\n   * @param runtime - The runtime context for the client.\n   */\n  public async stop(runtime: IAgentRuntime): Promise<void> {\n    try {\n      await this.closeDatabases();\n      await this.orbitdb.stop();\n      await this.ipfs.stop();\n      elizaLogger.info('PayAI Client stopped');\n    } catch (error) {\n      elizaLogger.error('Error while stopping PayAI Client', error);\n      throw error;\n    }\n  }\n}\n\nconst payAIClient: Client = new PayAIClient();\n\nexport { payAIClient };\n","/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\n\nimport { generateKeyPair } from '@libp2p/crypto/keys'\nimport { peerIdFromPrivateKey } from '@libp2p/peer-id'\nimport { validateConfig } from './config.js'\nimport { Libp2p as Libp2pClass } from './libp2p.js'\nimport type { AddressManagerInit, AddressFilter } from './address-manager/index.js'\nimport type { Components } from './components.js'\nimport type { ConnectionManagerInit } from './connection-manager/index.js'\nimport type { ConnectionMonitorInit } from './connection-monitor.js'\nimport type { TransportManagerInit } from './transport-manager.js'\nimport type { Libp2p, ServiceMap, ComponentLogger, NodeInfo, ConnectionProtector, ConnectionEncrypter, ConnectionGater, ContentRouting, Metrics, PeerDiscovery, PeerRouting, StreamMuxerFactory, Transport, PrivateKey } from '@libp2p/interface'\nimport type { PersistentPeerStoreInit } from '@libp2p/peer-store'\nimport type { DNS } from '@multiformats/dns'\nimport type { Datastore } from 'interface-datastore'\n\nexport type ServiceFactoryMap<T extends ServiceMap = ServiceMap> = {\n  [Property in keyof T]: (components: Components & T) => T[Property]\n}\n\nexport type { AddressManagerInit, AddressFilter }\n\n/**\n * For Libp2p configurations and modules details read the [Configuration Document](https://github.com/libp2p/js-libp2p/tree/main/doc/CONFIGURATION.md).\n */\nexport interface Libp2pInit<T extends ServiceMap = ServiceMap> {\n  /**\n   * The private key is used in cryptographic operations and the Peer ID derived\n   * from it's corresponding public key is used to identify the node to other\n   * peers on the network.\n   *\n   * If this is not passed a new Ed25519 private key will be generated.\n   */\n  privateKey?: PrivateKey\n\n  /**\n   * Metadata about the node - implementation name, version number, etc\n   */\n  nodeInfo?: NodeInfo\n\n  /**\n   * Addresses for transport listening and to advertise to the network\n   */\n  addresses?: AddressManagerInit\n\n  /**\n   * libp2p Connection Manager configuration\n   */\n  connectionManager?: ConnectionManagerInit\n\n  /**\n   * libp2p Connection Monitor configuration\n   */\n  connectionMonitor?: ConnectionMonitorInit\n\n  /**\n   * A connection gater can deny new connections based on user criteria\n   */\n  connectionGater?: ConnectionGater\n\n  /**\n   * libp2p transport manager configuration\n   */\n  transportManager?: TransportManagerInit\n\n  /**\n   * An optional datastore to persist peer information, DHT records, etc.\n   *\n   * An in-memory datastore will be used if one is not provided.\n   */\n  datastore?: Datastore\n\n  /**\n   * libp2p PeerStore configuration\n   */\n  peerStore?: PersistentPeerStoreInit\n\n  /**\n   * Transports are low-level communication channels\n   */\n  transports?: Array<(components: Components) => Transport>\n\n  /**\n   * Stream muxers allow the creation of many data streams over a single\n   * connection.\n   */\n  streamMuxers?: Array<(components: Components) => StreamMuxerFactory>\n\n  /**\n   * Connection encrypters ensure that data sent over connections cannot be\n   * eavesdropped on, and that the remote peer posesses the private key that\n   * corresponds to the public key that it's Peer ID is derived from.\n   */\n  connectionEncrypters?: Array<(components: Components) => ConnectionEncrypter>\n\n  /**\n   * Peer discovery mechanisms allow finding peers on the network\n   */\n  peerDiscovery?: Array<(components: Components) => PeerDiscovery>\n\n  /**\n   * Peer routers provide implementations for peer routing queries\n   */\n  peerRouters?: Array<(components: Components) => PeerRouting>\n\n  /**\n   * Content routers provide implementations for content routing queries\n   */\n  contentRouters?: Array<(components: Components) => ContentRouting>\n\n  /**\n   * A Metrics implementation can be supplied to collect metrics on this node\n   */\n  metrics?(components: Components): Metrics\n\n  /**\n   * A ConnectionProtector can be used to create a secure overlay on top of the network using pre-shared keys\n   */\n  connectionProtector?(components: Components): ConnectionProtector\n\n  /**\n   * Arbitrary libp2p modules\n   */\n  services?: ServiceFactoryMap<T>\n\n  /**\n   * An optional logging implementation that can be used to write runtime logs.\n   *\n   * Set the `DEBUG` env var or the `debug` key on LocalStorage to see logs.\n   *\n   * @example\n   *\n   * Node.js:\n   *\n   * ```console\n   * $ DEBUG=\"*libp2p:*\" node myscript.js\n   * ```\n   *\n   * Browsers:\n   *\n   * ```TypeScript\n   * localStorage.setItem('debug', '*libp2p:*')\n   * ```\n   */\n  logger?: ComponentLogger\n\n  /**\n   * An optional DNS resolver configuration. If omitted the default DNS resolver\n   * for the platform will be used which means `node:dns` on Node.js and\n   * DNS-JSON-over-HTTPS for browsers using Google and Cloudflare servers.\n   */\n  dns?: DNS\n}\n\nexport type { Libp2p, ConnectionManagerInit, ConnectionMonitorInit, TransportManagerInit }\n\nexport type Libp2pOptions<T extends ServiceMap = ServiceMap> = Libp2pInit<T> & { start?: boolean }\n\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```TypeScript\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [yamux(), mplex()],\n *   connectionEncrypters: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nexport async function createLibp2p <T extends ServiceMap = ServiceMap> (options: Libp2pOptions<T> = {}): Promise<Libp2p<T>> {\n  options.privateKey ??= await generateKeyPair('Ed25519')\n\n  const node = new Libp2pClass({\n    ...await validateConfig(options),\n    peerId: peerIdFromPrivateKey(options.privateKey)\n  })\n\n  if (options.start !== false) {\n    await node.start()\n  }\n\n  return node\n}\n","import { FaultTolerance, InvalidParametersError } from '@libp2p/interface'\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\nimport mergeOptions from 'merge-options'\nimport type { Libp2pInit } from './index.js'\nimport type { ServiceMap } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst DefaultConfig: Libp2pInit = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (multiaddrs: Multiaddr[]) => multiaddrs\n  },\n  connectionManager: {\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    }\n  },\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  }\n}\n\nexport async function validateConfig <T extends ServiceMap = Record<string, unknown>> (opts: Libp2pInit<T>): Promise<Libp2pInit<T>> {\n  const resultingOptions: Libp2pInit<T> = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n    throw new InvalidParametersError('Private network is enforced, but no protector was provided')\n  }\n\n  return resultingOptions\n}\n","/**\n * Progress events are emitted during long running operations\n */\nexport interface ProgressEvent<T extends string = any, D = unknown> {\n  /**\n   * The event type\n   */\n  type: T\n\n  /**\n   * Context-specific event information\n   */\n  detail: D\n}\n\n/**\n * An implementation of the ProgressEvent interface, this is essentially\n * a typed `CustomEvent` with a `type` property that lets us disambiguate\n * events passed to `progress` callbacks.\n */\nexport class CustomProgressEvent<D = unknown, T extends string = any> extends Event implements ProgressEvent<T, D> {\n  public type: T\n  public detail: D\n\n  constructor (type: T, detail?: D) {\n    super(type)\n\n    this.type = type\n    // @ts-expect-error detail may be undefined\n    this.detail = detail\n  }\n}\n\n/**\n * Define an `onProgress` callback that can be invoked with `ProgressEvent`s\n *\n * @example\n *\n * ```typescript\n * type MyOperationProgressEvents =\n *   ProgressEvent<'operation:start'> |\n *   ProgressEvent<'operation:success', Result> |\n *   ProgressEvent<'operation:error', Error>\n *\n * export interface MyOperationOptions extends ProgressOptions<MyOperationProgressEvents> {\n *  // define options here\n * }\n * ```\n */\nexport interface ProgressOptions<Event extends ProgressEvent = any> {\n  onProgress?: (evt: Event) => void\n}\n","import { Resolver } from 'dns/promises'\nimport { RecordType } from '../index.js'\nimport { getTypes } from '../utils/get-types.js'\nimport { toDNSResponse } from '../utils/to-dns-response.js'\nimport type { DNSResolver } from './index.js'\nimport type { Answer } from '../index.js'\n\nconst nodeResolver: DNSResolver = async (fqdn, options = {}) => {\n  const resolver = new Resolver()\n  const listener = (): void => {\n    resolver.cancel()\n  }\n  const types = getTypes(options.types)\n\n  try {\n    options.signal?.addEventListener('abort', listener)\n\n    const answers = await Promise.all(types.map(async type => {\n      if (type === RecordType.A) {\n        return mapToAnswers(fqdn, type, await resolver.resolve4(fqdn))\n      }\n\n      if (type === RecordType.CNAME) {\n        return mapToAnswers(fqdn, type, await resolver.resolveCname(fqdn))\n      }\n\n      if (type === RecordType.TXT) {\n        return mapToAnswers(fqdn, type, await resolver.resolveTxt(fqdn))\n      }\n\n      if (type === RecordType.AAAA) {\n        return mapToAnswers(fqdn, type, await resolver.resolve6(fqdn))\n      }\n\n      throw new TypeError('Unsupported DNS record type')\n    }))\n\n    return toDNSResponse({\n      Question: types.map(type => ({\n        name: fqdn,\n        type\n      })),\n      Answer: answers.flat()\n    })\n  } finally {\n    options.signal?.removeEventListener('abort', listener)\n  }\n}\n\nexport function defaultResolver (): DNSResolver[] {\n  return [\n    nodeResolver\n  ]\n}\n\nfunction mapToAnswer (name: string, type: RecordType, data: string): Omit<Answer, 'TTL'> {\n  return {\n    name,\n    type,\n    data\n  }\n}\n\nfunction mapToAnswers (name: string, type: RecordType, data: string | string[] | string[][]): Array<Omit<Answer, 'TTL'>> {\n  if (!Array.isArray(data)) {\n    data = [data]\n  }\n\n  return data.map(data => {\n    if (Array.isArray(data)) {\n      return data.map(data => mapToAnswer(name, type, data))\n    }\n\n    return mapToAnswer(name, type, data)\n  })\n    .flat()\n}\n","import { RecordType } from '../index.js'\n\nexport function getTypes (types?: RecordType | RecordType[]): RecordType[] {\n  const DEFAULT_TYPES = [\n    RecordType.A\n  ]\n\n  if (types == null) {\n    return DEFAULT_TYPES\n  }\n\n  if (Array.isArray(types)) {\n    if (types.length === 0) {\n      return DEFAULT_TYPES\n    }\n\n    return types\n  }\n\n  return [\n    types\n  ]\n}\n","import { Buffer } from 'node:buffer'\nimport bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8')\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","export const empty = new Uint8Array(0)\n\nexport function toHex (d: Uint8Array): string {\n  return d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n}\n\nexport function fromHex (hex: string): Uint8Array {\n  const hexes = hex.match(/../g)\n  return hexes != null ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\nexport function equals (aa: Uint8Array, bb: Uint8Array): boolean {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function coerce (o: ArrayBufferView | ArrayBuffer | Uint8Array): Uint8Array {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\nexport function isBinary (o: unknown): o is ArrayBuffer | ArrayBufferView {\n  return o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n}\n\nexport function fromString (str: string): Uint8Array {\n  return new TextEncoder().encode(str)\n}\n\nexport function toString (b: Uint8Array): string {\n  return new TextDecoder().decode(b)\n}\n","/* eslint-disable */\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n/**\n * @param {string} ALPHABET\n * @param {any} name\n */\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  /**\n   * @param {any[] | Iterable<number>} source\n   */\n  function encode (source) {\n    // @ts-ignore\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  /**\n   * @param {string | string[]} source\n   */\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  /**\n   * @param {string | string[]} string\n   */\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import { coerce } from '../bytes.js'\nimport basex from '../vendor/base-x.js'\nimport type { BaseCodec, BaseDecoder, BaseEncoder, CombobaseDecoder, Multibase, MultibaseCodec, MultibaseDecoder, MultibaseEncoder, UnibaseDecoder } from './interface.js'\n\ninterface EncodeFn { (bytes: Uint8Array): string }\ninterface DecodeFn { (text: string): Uint8Array }\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n */\nclass Encoder<Base extends string, Prefix extends string> implements MultibaseEncoder<Prefix>, BaseEncoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  encode (bytes: Uint8Array): Multibase<Prefix> {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n */\nclass Decoder<Base extends string, Prefix extends string> implements MultibaseDecoder<Prefix>, UnibaseDecoder<Prefix>, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseDecode: DecodeFn\n  private readonly prefixCodePoint: number\n\n  constructor (name: Base, prefix: Prefix, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    const prefixCodePoint = prefix.codePointAt(0)\n    /* c8 ignore next 3 */\n    if (prefixCodePoint === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    this.prefixCodePoint = prefixCodePoint\n    this.baseDecode = baseDecode\n  }\n\n  decode (text: string): Uint8Array {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  or<OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n}\n\ntype Decoders<Prefix extends string> = Record<Prefix, UnibaseDecoder<Prefix>>\n\nclass ComposedDecoder<Prefix extends string> implements MultibaseDecoder<Prefix>, CombobaseDecoder<Prefix> {\n  readonly decoders: Decoders<Prefix>\n\n  constructor (decoders: Decoders<Prefix>) {\n    this.decoders = decoders\n  }\n\n  or <OtherPrefix extends string> (decoder: UnibaseDecoder<OtherPrefix> | ComposedDecoder<OtherPrefix>): ComposedDecoder<Prefix | OtherPrefix> {\n    return or(this, decoder)\n  }\n\n  decode (input: string): Uint8Array {\n    const prefix = input[0] as Prefix\n    const decoder = this.decoders[prefix]\n    if (decoder != null) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\nexport function or <L extends string, R extends string> (left: UnibaseDecoder<L> | CombobaseDecoder<L>, right: UnibaseDecoder<R> | CombobaseDecoder<R>): ComposedDecoder<L | R> {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  return new ComposedDecoder({\n    ...(left.decoders ?? { [(left as UnibaseDecoder<L>).prefix]: left }),\n    ...(right.decoders ?? { [(right as UnibaseDecoder<R>).prefix]: right })\n  } as Decoders<L | R>)\n}\n\nexport class Codec<Base extends string, Prefix extends string> implements MultibaseCodec<Prefix>, MultibaseEncoder<Prefix>, MultibaseDecoder<Prefix>, BaseCodec, BaseEncoder, BaseDecoder {\n  readonly name: Base\n  readonly prefix: Prefix\n  readonly baseEncode: EncodeFn\n  readonly baseDecode: DecodeFn\n  readonly encoder: Encoder<Base, Prefix>\n  readonly decoder: Decoder<Base, Prefix>\n\n  constructor (name: Base, prefix: Prefix, baseEncode: EncodeFn, baseDecode: DecodeFn) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  encode (input: Uint8Array): string {\n    return this.encoder.encode(input)\n  }\n\n  decode (input: string): Uint8Array {\n    return this.decoder.decode(input)\n  }\n}\n\nexport function from <Base extends string, Prefix extends string> ({ name, prefix, encode, decode }: { name: Base, prefix: Prefix, encode: EncodeFn, decode: DecodeFn }): Codec<Base, Prefix> {\n  return new Codec(name, prefix, encode, decode)\n}\n\nexport function baseX <Base extends string, Prefix extends string> ({ name, prefix, alphabet }: { name: Base, prefix: Prefix, alphabet: string }): Codec<Base, Prefix> {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: (text: string): Uint8Array => coerce(decode(text))\n  })\n}\n\nfunction decode (string: string, alphabet: string, bitsPerChar: number, name: string): Uint8Array {\n  // Build the character lookup table:\n  const codes: Record<string, number> = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || (0xff & (buffer << (8 - bits))) !== 0) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\nfunction encode (data: Uint8Array, alphabet: string, bitsPerChar: number): string {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits !== 0) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (((out.length * bitsPerChar) & 7) !== 0) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n */\nexport function rfc4648 <Base extends string, Prefix extends string> ({ name, prefix, bitsPerChar, alphabet }: { name: Base, prefix: Prefix, bitsPerChar: number, alphabet: string }): Codec<Base, Prefix> {\n  return from({\n    prefix,\n    name,\n    encode (input: Uint8Array): string {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input: string): Uint8Array {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars: string[] = (alphabet.reduce<string[]>((p, c, i) => { p[i] = c; return p }, ([])))\nconst alphabetCharsToBytes: number[] = (alphabet.reduce<number[]>((p, c, i) => {\n  const codePoint = c.codePointAt(0)\n  if (codePoint == null) {\n    throw new Error(`Invalid character: ${c}`)\n  }\n  p[codePoint] = i\n  return p\n}, ([])))\n\nfunction encode (data: Uint8Array): string {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\nfunction decode (str: string): Uint8Array {\n  const byts = []\n  for (const char of str) {\n    const codePoint = char.codePointAt(0)\n    if (codePoint == null) {\n      throw new Error(`Invalid character: ${char}`)\n    }\n    const byt = alphabetCharsToBytes[codePoint]\n    if (byt == null) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { fromString, toString } from '../bytes.js'\nimport { from } from './base.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","import type { ArrayBufferView, ByteView } from './interface.js'\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\nexport function encode <T> (node: T): ByteView<T> {\n  return textEncoder.encode(JSON.stringify(node))\n}\n\nexport function decode <T> (data: ByteView<T> | ArrayBufferView<T>): T {\n  return JSON.parse(textDecoder.decode(data))\n}\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code: 0x0 = 0x0\nconst name = 'identity'\n\nconst encode: (input: Uint8Array) => Uint8Array = coerce\n\nfunction digest (input: Uint8Array): Digest.Digest<typeof code, number> {\n  return Digest.create(code, encode(input))\n}\n\nexport const identity = { code, name, encode, digest }\n","/* eslint-disable */\nvar encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\n/**\n * @param {number} num\n * @param {number[]} out\n * @param {number} offset\n */\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  // @ts-ignore\n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\n/**\n * @param {string | any[]} buf\n * @param {number} offset\n */\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      // @ts-ignore\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  // @ts-ignore\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (/** @type {number} */ value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from './vendor/varint.js'\n\nexport function decode (data: Uint8Array, offset = 0): [number, number] {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\nexport function encodeTo (int: number, target: Uint8Array, offset = 0): Uint8Array {\n  varint.encode(int, target, offset)\n  return target\n}\n\nexport function encodingLength (int: number): number {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n","import crypto from 'crypto'\nimport { coerce } from '../bytes.js'\nimport { from } from './hasher.js'\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: (input) => coerce(crypto.createHash('sha256').update(input).digest())\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: input => coerce(crypto.createHash('sha512').update(input).digest())\n})\n","import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n","import { base32 } from './bases/base32.js'\nimport { base36 } from './bases/base36.js'\nimport { base58btc } from './bases/base58.js'\nimport { coerce } from './bytes.js'\nimport * as Digest from './hashes/digest.js'\nimport * as varint from './varint.js'\nimport type * as API from './link/interface.js'\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\nexport function format <T extends API.Link<unknown, number, number, API.Version>, Prefix extends string> (link: T, base?: API.MultibaseEncoder<Prefix>): API.ToString<T, Prefix> {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        base as API.MultibaseEncoder<'z'> ?? base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        (base ?? base32.encoder) as API.MultibaseEncoder<Prefix>\n      )\n  }\n}\n\nexport function toJSON <Link extends API.UnknownLink> (link: Link): API.LinkJSON<Link> {\n  return {\n    '/': format(link)\n  }\n}\n\nexport function fromJSON <Link extends API.UnknownLink> (json: API.LinkJSON<Link>): CID<unknown, number, number, API.Version> {\n  return CID.parse(json['/'])\n}\n\nconst cache = new WeakMap<API.UnknownLink, Map<string, string>>()\n\nfunction baseCache (cid: API.UnknownLink): Map<string, string> {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\nexport class CID<Data = unknown, Format extends number = number, Alg extends number = number, Version extends API.Version = API.Version> implements API.Link<Data, Format, Alg, Version> {\n  readonly code: Format\n  readonly version: Version\n  readonly multihash: API.MultihashDigest<Alg>\n  readonly bytes: Uint8Array\n  readonly '/': Uint8Array\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param multihash - (Multi)hash of the of the content.\n   */\n  constructor (version: Version, code: Format, multihash: API.MultihashDigest<Alg>, bytes: Uint8Array) {\n    this.code = code\n    this.version = version\n    this.multihash = multihash\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID (): this {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset (): number {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength (): number {\n    return this.bytes.byteLength\n  }\n\n  toV0 (): CID<Data, API.DAG_PB, API.SHA_256, 0> {\n    switch (this.version) {\n      case 0: {\n        return this as CID<Data, API.DAG_PB, API.SHA_256, 0>\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return (\n          CID.createV0(\n            multihash as API.MultihashDigest<API.SHA_256>\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  toV1 (): CID<Data, Format, Alg, 1> {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return this as CID<Data, Format, Alg, 1>\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  equals (other: unknown): other is CID<Data, Format, Alg, Version> {\n    return CID.equals(this, other)\n  }\n\n  static equals <Data, Format extends number, Alg extends number, Version extends API.Version>(self: API.Link<Data, Format, Alg, Version>, other: unknown): other is CID {\n    const unknown = other as { code?: unknown, version?: unknown, multihash?: unknown }\n    return (\n      unknown != null &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  toString (base?: API.MultibaseEncoder<string>): string {\n    return format(this, base)\n  }\n\n  toJSON (): API.LinkJSON<this> {\n    return { '/': format(this) }\n  }\n\n  link (): this {\n    return this\n  }\n\n  readonly [Symbol.toStringTag] = 'CID';\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] (): string {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   */\n  static asCID <Data, Format extends number, Alg extends number, Version extends API.Version, U>(input: API.Link<Data, Format, Alg, Version> | U): CID<Data, Format, Alg, Version> | null {\n    if (input == null) {\n      return null\n    }\n\n    const value = input as any\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        multihash as API.MultihashDigest<Alg>,\n        bytes ?? encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest = Digest.decode(multihash) as API.MultihashDigest<Alg>\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   * @param version - Version of the CID\n   * @param code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param digest - (Multi)hash of the of the content.\n   */\n  static create <Data, Format extends number, Alg extends number, Version extends API.Version>(version: Version, code: Format, digest: API.MultihashDigest<Alg>): CID<Data, Format, Alg, Version> {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   */\n  static createV0 <T = unknown>(digest: API.MultihashDigest<typeof SHA_256_CODE>): CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0> {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @param code - Content encoding format code.\n   * @param digest - Multihash of the content.\n   */\n  static createV1 <Data, Code extends number, Alg extends number>(code: Code, digest: API.MultihashDigest<Alg>): CID<Data, Code, Alg, 1> {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   */\n  static decode <Data, Code extends number, Alg extends number, Version extends API.Version>(bytes: API.ByteView<API.Link<Data, Code, Alg, Version>>): CID<Data, Code, Alg, Version> {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length !== 0) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   */\n  static decodeFirst <T, C extends number, A extends number, V extends API.Version>(bytes: API.ByteView<API.Link<T, C, A, V>>): [CID<T, C, A, V>, Uint8Array] {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(digest as API.MultihashDigest<API.SHA_256>)\n        : CID.createV1(specs.codec, digest)\n    return [cid as CID<T, C, A, V>, bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   */\n  static inspectBytes <T, C extends number, A extends number, V extends API.Version>(initialBytes: API.ByteView<API.Link<T, C, A, V>>): { version: V, codec: C, multihashCode: A, digestSize: number, multihashSize: number, size: number } {\n    let offset = 0\n    const next = (): number => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = next() as V\n    let codec = DAG_PB_CODE as C\n    if (version as number === 18) {\n      // CIDv0\n      version = 0 as V\n      offset = 0\n    } else {\n      codec = next() as C\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = next() as A // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   */\n  static parse <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version>(source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): CID<Data, Code, Alg, Version> {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\nfunction parseCIDtoBytes <Prefix extends string, Data, Code extends number, Alg extends number, Version extends API.Version> (source: API.ToString<API.Link<Data, Code, Alg, Version>, Prefix>, base?: API.MultibaseDecoder<Prefix>): [Prefix, API.ByteView<API.Link<Data, Code, Alg, Version>>] {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base ?? base58btc\n      return [\n        base58btc.prefix as Prefix,\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base ?? base58btc\n      return [base58btc.prefix as Prefix, decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base ?? base32\n      return [base32.prefix as Prefix, decoder.decode(source)]\n    }\n    case base36.prefix: {\n      const decoder = base ?? base36\n      return [base36.prefix as Prefix, decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32, base36 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [source[0] as Prefix, base.decode(source)]\n    }\n  }\n}\n\nfunction toStringV0 (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<'z'>): string {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nfunction toStringV1 <Prefix extends string> (bytes: Uint8Array, cache: Map<string, string>, base: API.MultibaseEncoder<Prefix>): string {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\nfunction encodeCID (version: API.Version, code: number, multihash: Uint8Array): Uint8Array {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","import * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base2 from './bases/base2.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base8 from './bases/base8.js'\nimport * as identityBase from './bases/identity.js'\nimport * as json from './codecs/json.js'\nimport * as raw from './codecs/raw.js'\nimport * as identity from './hashes/identity.js'\nimport * as sha2 from './hashes/sha2.js'\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nexport const bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nexport const hashes = { ...sha2, ...identity }\nexport const codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes }\n","import { Buffer } from 'node:buffer'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  return asUint8Array(Buffer.alloc(size))\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  return asUint8Array(Buffer.allocUnsafe(size))\n}\n","/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array (buf: Uint8Array): Uint8Array {\n  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n}\n","import { bases } from 'multiformats/basics'\nimport type { MultibaseCodec } from 'multiformats'\nimport { allocUnsafe } from '#alloc'\n\nfunction createCodec (name: string, prefix: string, encode: (buf: Uint8Array) => string, decode: (str: string) => Uint8Array): MultibaseCodec<any> {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = allocUnsafe(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\nexport type SupportedEncodings = 'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof typeof bases\n\nconst BASES: Record<SupportedEncodings, MultibaseCodec<any>> = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n\n  ...bases\n}\n\nexport default BASES\n","import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { RecordType, type DNSResponse } from '../index.js'\n\n/**\n * This TTL will be used if the remote service does not return one\n */\nexport const DEFAULT_TTL = 60\n\nexport function toDNSResponse (obj: any): DNSResponse {\n  return {\n    Status: obj.Status ?? 0,\n    TC: obj.TC ?? obj.flag_tc ?? false,\n    RD: obj.RD ?? obj.flag_rd ?? false,\n    RA: obj.RA ?? obj.flag_ra ?? false,\n    AD: obj.AD ?? obj.flag_ad ?? false,\n    CD: obj.CD ?? obj.flag_cd ?? false,\n    Question: (obj.Question ?? obj.questions ?? []).map((question: any) => {\n      return {\n        name: question.name,\n        type: RecordType[question.type]\n      }\n    }),\n    Answer: (obj.Answer ?? obj.answers ?? []).map((answer: any) => {\n      return {\n        name: answer.name,\n        type: RecordType[answer.type],\n        TTL: (answer.TTL ?? answer.ttl ?? DEFAULT_TTL),\n        data: answer.data instanceof Uint8Array ? uint8ArrayToString(answer.data) : answer.data\n      }\n    })\n  }\n}\n","import hashlru from 'hashlru'\nimport { RecordType } from '../index.js'\nimport { DEFAULT_TTL, toDNSResponse } from './to-dns-response.js'\nimport type { Answer, DNSResponse } from '../index.js'\n\ninterface CachedAnswer {\n  expires: number\n  value: Answer\n}\n\nexport interface AnswerCache {\n  get (fqdn: string, types: RecordType[]): DNSResponse | undefined\n  add (domain: string, answer: Answer): void\n  remove (domain: string, type: ResponseType): void\n  clear (): void\n}\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n */\nclass CachedAnswers {\n  private readonly lru: ReturnType<typeof hashlru>\n\n  constructor (maxSize: number) {\n    this.lru = hashlru(maxSize)\n  }\n\n  get (fqdn: string, types: RecordType[]): DNSResponse | undefined {\n    let foundAllAnswers = true\n    const answers: Answer[] = []\n\n    for (const type of types) {\n      const cached = this.getAnswers(fqdn, type)\n\n      if (cached.length === 0) {\n        foundAllAnswers = false\n        break\n      }\n\n      answers.push(...cached)\n    }\n\n    if (foundAllAnswers) {\n      return toDNSResponse({ answers })\n    }\n  }\n\n  private getAnswers (domain: string, type: RecordType): Answer[] {\n    const key = `${domain.toLowerCase()}-${type}`\n    const answers: CachedAnswer[] = this.lru.get(key)\n\n    if (answers != null) {\n      const cachedAnswers = answers\n        .filter((entry) => {\n          return entry.expires > Date.now()\n        })\n        .map(({ expires, value }) => ({\n          ...value,\n          TTL: Math.round((expires - Date.now()) / 1000),\n          type: RecordType[value.type]\n        }))\n\n      if (cachedAnswers.length === 0) {\n        this.lru.remove(key)\n      }\n\n      // @ts-expect-error hashlru stringifies stored types which turns enums\n      // into strings, we convert back into enums above but tsc doesn't know\n      return cachedAnswers\n    }\n\n    return []\n  }\n\n  add (domain: string, answer: Answer): void {\n    const key = `${domain.toLowerCase()}-${answer.type}`\n\n    const answers: CachedAnswer[] = this.lru.get(key) ?? []\n    answers.push({\n      expires: Date.now() + ((answer.TTL ?? DEFAULT_TTL) * 1000),\n      value: answer\n    })\n\n    this.lru.set(key, answers)\n  }\n\n  remove (domain: string, type: ResponseType): void {\n    const key = `${domain.toLowerCase()}-${type}`\n\n    this.lru.remove(key)\n  }\n\n  clear (): void {\n    this.lru.clear()\n  }\n}\n\n/**\n * Avoid sending multiple queries for the same hostname by caching results\n */\nexport function cache (size: number): AnswerCache {\n  return new CachedAnswers(size)\n}\n","import { CustomProgressEvent } from 'progress-events'\nimport { defaultResolver } from './resolvers/default.js'\nimport { cache } from './utils/cache.js'\nimport { getTypes } from './utils/get-types.js'\nimport type { DNS as DNSInterface, DNSInit, DNSResponse, QueryOptions } from './index.js'\nimport type { DNSResolver } from './resolvers/index.js'\nimport type { AnswerCache } from './utils/cache.js'\n\nconst DEFAULT_ANSWER_CACHE_SIZE = 1000\n\nexport class DNS implements DNSInterface {\n  private readonly resolvers: Record<string, DNSResolver[]>\n  private readonly cache: AnswerCache\n\n  constructor (init: DNSInit) {\n    this.resolvers = {}\n    this.cache = cache(init.cacheSize ?? DEFAULT_ANSWER_CACHE_SIZE)\n\n    Object.entries(init.resolvers ?? {}).forEach(([tld, resolver]) => {\n      if (!Array.isArray(resolver)) {\n        resolver = [resolver]\n      }\n\n      // convert `com` -> `com.`\n      if (!tld.endsWith('.')) {\n        tld = `${tld}.`\n      }\n\n      this.resolvers[tld] = resolver\n    })\n\n    // configure default resolver if none specified\n    if (this.resolvers['.'] == null) {\n      this.resolvers['.'] = defaultResolver()\n    }\n  }\n\n  /**\n   * Queries DNS resolvers for the passed record types for the passed domain.\n   *\n   * If cached records exist for all desired types they will be returned\n   * instead.\n   *\n   * Any new responses will be added to the cache for subsequent requests.\n   */\n  async query (domain: string, options: QueryOptions = {}): Promise<DNSResponse> {\n    const types = getTypes(options.types)\n    const cached = options.cached !== false ? this.cache.get(domain, types) : undefined\n\n    if (cached != null) {\n      options.onProgress?.(new CustomProgressEvent<string>('dns:cache', { detail: cached }))\n\n      return cached\n    }\n\n    const tld = `${domain.split('.').pop()}.`\n    const resolvers = (this.resolvers[tld] ?? this.resolvers['.']).sort(() => {\n      return (Math.random() > 0.5) ? -1 : 1\n    })\n\n    const errors: Error[] = []\n\n    for (const resolver of resolvers) {\n      // skip further resolutions if the user aborted the signal\n      if (options.signal?.aborted === true) {\n        break\n      }\n\n      try {\n        const result = await resolver(domain, {\n          ...options,\n          types\n        })\n\n        for (const answer of result.Answer) {\n          this.cache.add(domain, answer)\n        }\n\n        return result\n      } catch (err: any) {\n        errors.push(err)\n        options.onProgress?.(new CustomProgressEvent<Error>('dns:error', { detail: err }))\n      }\n    }\n\n    if (errors.length === 1) {\n      throw errors[0]\n    }\n\n    throw new AggregateError(errors, `DNS lookup of ${domain} ${types} failed`)\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Query DNS records using `node:dns`, DNS over HTTP and/or DNSJSON over HTTP.\n *\n * A list of publicly accessible servers can be found [here](https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers).\n *\n * @example Using the default resolver\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve A records with a 5s timeout\n * const result = await dns.query('google.com', {\n *   signal: AbortSignal.timeout(5000)\n * })\n * ```\n *\n * @example Using per-TLD resolvers\n *\n * ```TypeScript\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     // will only be used to resolve `.com` addresses\n *     'com.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query'),\n *\n *     // this can also be an array, resolvers will be shuffled and tried in\n *     // series\n *     'net.': [\n *       dnsJsonOverHttps('https://dns.google/resolve'),\n *       dnsJsonOverHttps('https://dns.pub/dns-query')\n *     ],\n *\n *     // will only be used to resolve all other addresses\n *     '.': dnsJsonOverHttps('https://dnsforge.de/dns-query'),\n *   }\n * })\n * ```\n *\n * @example Query for specific record types\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // resolve only TXT records\n * const result = await dns.query('google.com', {\n *   types: [\n *     RecordType.TXT\n *   ]\n * })\n * ```\n *\n * ## Caching\n *\n * Individual Aanswers are cached so. If you make a request, for which all\n * record types are cached, all values will be pulled from the cache.\n *\n * If any of the record types are not cached, a new request will be resolved as\n * if none of the records were cached, and the cache will be updated to include\n * the new results.\n *\n * @example Ignoring the cache\n *\n * ```TypeScript\n * import { dns, RecordType } from '@multiformats/dns'\n *\n * const resolver = dns()\n *\n * // do not used cached results, always resolve a new query\n * const result = await dns.query('google.com', {\n *   cached: false\n * })\n * ```\n */\n\nimport { DNS as DNSClass } from './dns.js'\nimport type { DNSResolver } from './resolvers/index.js'\nimport type { ProgressEvent, ProgressOptions } from 'progress-events'\n\n/**\n * A subset of DNS Record Types\n *\n * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4.\n */\nexport enum RecordType {\n  A = 1,\n  CNAME = 5,\n  TXT = 16,\n  AAAA = 28\n}\n\nexport interface Question {\n  /**\n   * The record name requested.\n   */\n  name: string\n\n  /**\n   * The type of DNS record requested.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4.\n   */\n  type: RecordType\n}\n\nexport interface Answer {\n  /**\n   * The record owner.\n   */\n  name: string\n\n  /**\n   * The type of DNS record.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4\n   */\n  type: RecordType\n\n  /**\n   * The number of seconds the answer can be stored in cache before it is\n   * considered stale.\n   */\n  TTL: number\n\n  /**\n   * The value of the DNS record for the given name and type. The data will be\n   * in text for standardized record types and in hex for unknown types.\n   */\n  data: string\n}\n\nexport interface DNSResponse {\n  /**\n   * The Response Code of the DNS Query.\n   *\n   * @see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6\n   */\n  Status: number\n\n  /**\n   * If true, it means the truncated bit was set. This happens when the DNS\n   * answer is larger than a single UDP or TCP packet.\n   */\n  TC: boolean\n\n  /**\n   * If true, it means the Recursive Desired bit was set.\n   */\n  RD: boolean\n\n  /**\n   * If true, it means the Recursion Available bit was set.\n   */\n  RA: boolean\n\n  /**\n   * If true, it means that every record in the answer was verified with DNSSEC.\n   */\n  AD: boolean\n\n  /**\n   * If true, the client asked to disable DNSSEC validation.\n   */\n  CD: boolean\n\n  /**\n   * The records that were requested.\n   */\n  Question: Question[]\n\n  /**\n   * Values for the records that were requested.\n   */\n  Answer: Answer[]\n}\n\n/**\n * The default maximum amount of recursion allowed during a query\n */\nexport const MAX_RECURSIVE_DEPTH = 32\n\nexport interface QueryOptions extends ProgressOptions<ResolveDnsProgressEvents> {\n  signal?: AbortSignal\n\n  /**\n   * Do not use cached DNS entries\n   *\n   * @default false\n   */\n  cached?: boolean\n\n  /**\n   * The type or types of DNS records to resolve\n   *\n   * @default [RecordType.A, RecordType.AAAA]\n   */\n  types?: RecordType | RecordType[]\n}\n\nexport interface DNS {\n  query(fqdn: string, options?: QueryOptions): Promise<DNSResponse>\n}\n\nexport type ResolveDnsProgressEvents =\n  ProgressEvent<'dns:cache', string> |\n  ProgressEvent<'dns:query', string> |\n  ProgressEvent<'dns:response', DNSResponse> |\n  ProgressEvent<'dns:error', Error>\n\nexport type DNSResolvers = Record<string, DNSResolver | DNSResolver[]>\n\nexport interface DNSInit {\n  /**\n   * A set of resolvers used to answer DNS queries\n   *\n   * String keys control which resolvers are used for which TLDs.\n   *\n   * @example\n   *\n   * ```TypeScript\n   * import { dns } from '@multiformats/dns'\n   * import { dnsOverHttps } from '@multiformats/dns'\n   *\n   * const resolver = dns({\n   *   resolvers: {\n   *     // only used for .com domains\n   *     'com.': dnsOverHttps('https://example-1.com'),\n   *\n   *     // only used for .net domains, can be an array\n   *     'net.': [\n   *       dnsOverHttps('https://example-2.com'),\n   *       dnsOverHttps('https://example-3.com'),\n   *     ],\n   *\n   *     // used for everything else (can be an array)\n   *     '.': dnsOverHttps('https://example-4.com')\n   *   }\n   * })\n   * ```\n   */\n  resolvers?: DNSResolvers\n\n  /**\n   * To avoid repeating DNS lookups, successful answers are cached according to\n   * their TTL. To avoid exhausting memory, this option controls how many\n   * answers to cache.\n   *\n   * @default 1000\n   */\n  cacheSize?: number\n}\n\nexport function dns (init: DNSInit = {}): DNS {\n  return new DNSClass(init)\n}\n","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals (a: Uint8Array, b: Uint8Array): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n","/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst N1 = Math.pow(2, 7)\nconst N2 = Math.pow(2, 14)\nconst N3 = Math.pow(2, 21)\nconst N4 = Math.pow(2, 28)\nconst N5 = Math.pow(2, 35)\nconst N6 = Math.pow(2, 42)\nconst N7 = Math.pow(2, 49)\n\n/** Most significant bit of a byte */\nconst MSB = 0x80\n/** Rest of the bits in a byte */\nconst REST = 0x7f\n\nexport function encodingLength (value: number): number {\n  if (value < N1) {\n    return 1\n  }\n\n  if (value < N2) {\n    return 2\n  }\n\n  if (value < N3) {\n    return 3\n  }\n\n  if (value < N4) {\n    return 4\n  }\n\n  if (value < N5) {\n    return 5\n  }\n\n  if (value < N6) {\n    return 6\n  }\n\n  if (value < N7) {\n    return 7\n  }\n\n  if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n    throw new RangeError('Could not encode varint')\n  }\n\n  return 8\n}\n\nexport function encodeUint8Array (value: number, buf: Uint8Array, offset: number = 0): Uint8Array {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 7: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 6: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 5: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 4: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 3: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 2: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 1: {\n      buf[offset++] = (value & 0xFF)\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function encodeUint8ArrayList (value: number, buf: Uint8ArrayList, offset: number = 0): Uint8ArrayList {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 7: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 6: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 5: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 4: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 3: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 2: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 1: {\n      buf.set(offset++, (value & 0xFF))\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function decodeUint8Array (buf: Uint8Array, offset: number): number {\n  let b = buf[offset]\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 1]\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 2]\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 3]\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 4]\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 5]\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 6]\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 7]\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function decodeUint8ArrayList (buf: Uint8ArrayList, offset: number): number {\n  let b = buf.get(offset)\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 1)\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 2)\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 3)\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 4)\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 5)\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 6)\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 7)\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function encode (value: number): Uint8Array\nexport function encode (value: number, buf: Uint8Array, offset?: number): Uint8Array\nexport function encode (value: number, buf: Uint8ArrayList, offset?: number): Uint8ArrayList\nexport function encode <T extends Uint8Array | Uint8ArrayList = Uint8Array> (value: number, buf?: T, offset: number = 0): T {\n  if (buf == null) {\n    buf = allocUnsafe(encodingLength(value)) as T\n  }\n  if (buf instanceof Uint8Array) {\n    return encodeUint8Array(value, buf, offset) as T\n  } else {\n    return encodeUint8ArrayList(value, buf, offset) as T\n  }\n}\n\nexport function decode (buf: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n  if (buf instanceof Uint8Array) {\n    return decodeUint8Array(buf, offset)\n  } else {\n    return decodeUint8ArrayList(buf, offset)\n  }\n}\n","import { Buffer } from 'node:buffer'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat (arrays: Uint8Array[], length?: number): Uint8Array {\n  return asUint8Array(Buffer.concat(arrays, length))\n}\n",null,null,"import { IPv4Len, IPv6Len } from \"./ip.js\";\n\nexport function allFF(\n  a: number[] | Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== 0xff) return false;\n    i++;\n  }\n  return true;\n}\n\nexport function deepEqual(\n  a: Uint8Array | number[],\n  b: Uint8Array,\n  from: number,\n  to: number\n): boolean {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n\n/***\n * Returns long ip format\n */\nexport function ipToString(ip: Uint8Array | number[]): string {\n  switch (ip.length) {\n    case IPv4Len: {\n      return ip.join(\".\");\n    }\n    case IPv6Len: {\n      const result = [] as string[];\n      for (let i = 0; i < ip.length; i++) {\n        if (i % 2 === 0) {\n          result.push(\n            ip[i].toString(16).padStart(2, \"0\") +\n              ip[i + 1].toString(16).padStart(2, \"0\")\n          );\n        }\n      }\n      return result.join(\":\");\n    }\n    default: {\n      throw new Error(\"Invalid ip length\");\n    }\n  }\n}\n\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nexport function simpleMaskLength(mask: Uint8Array): number {\n  let ones = 0;\n  // eslint-disable-next-line prefer-const\n  for (let [index, byte] of mask.entries()) {\n    if (byte === 0xff) {\n      ones += 8;\n      continue;\n    }\n    while ((byte & 0x80) != 0) {\n      ones++;\n      byte = byte << 1;\n    }\n    if ((byte & 0x80) != 0) {\n      return -1;\n    }\n    for (let i = index + 1; i < mask.length; i++) {\n      if (mask[i] != 0) {\n        return -1;\n      }\n    }\n    break;\n  }\n  return ones;\n}\n\nexport function maskToHex(mask: Uint8Array): string {\n  let hex = \"0x\";\n  for (const byte of mask) {\n    hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n  }\n  return hex;\n}\n","import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { allFF, deepEqual } from \"./util.js\";\n\nexport const IPv4Len = 4;\nexport const IPv6Len = 16;\n\nexport const maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nexport const ipv4Prefix = new Uint8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255,\n]);\n\nexport interface IpNetRaw {\n  network: Uint8Array;\n  mask: Uint8Array;\n}\n\nexport function maskIp(ip: Uint8Array, mask: Uint8Array): Uint8Array {\n  if (mask.length === IPv6Len && ip.length === IPv4Len && allFF(mask, 0, 11)) {\n    mask = mask.slice(12);\n  }\n  if (\n    mask.length === IPv4Len &&\n    ip.length === IPv6Len &&\n    deepEqual(ip, ipv4Prefix, 0, 11)\n  ) {\n    ip = ip.slice(12);\n  }\n  const n = ip.length;\n  if (n != mask.length) {\n    throw new Error(\"Failed to mask ip\");\n  }\n  const out = new Uint8Array(n);\n  for (let i = 0; i < n; i++) {\n    out[i] = ip[i] & mask[i];\n  }\n  return out;\n}\n\nexport function containsIp(\n  net: IpNetRaw,\n  ip: Uint8Array | number[] | string\n): boolean {\n  if (typeof ip === \"string\") {\n    ip = parseIP(ip)!;\n  }\n  if (ip == null) throw new Error(\"Invalid ip\");\n  if (ip.length !== net.network.length) {\n    return false;\n  }\n  for (let i = 0; i < ip.length; i++) {\n    if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function iPv4FromIPv6(ip: Uint8Array): Uint8Array {\n  if (!isIPv4mappedIPv6(ip)) {\n    throw new Error(\"Must have 0xffff prefix\");\n  }\n  return ip.slice(12);\n}\n\nexport function isIPv4mappedIPv6(ip: Uint8Array | number[]): boolean {\n  return deepEqual(ip, ipv4Prefix, 0, 11);\n}\n","import { parseIPv4, parseIPv6 } from \"@chainsafe/is-ip/parse\";\nimport { IPv4Len, IPv6Len, maskIp } from \"./ip.js\";\n\nexport function parseCidr(s: string): {\n  network: Uint8Array;\n  mask: Uint8Array;\n} {\n  const [address, maskString] = s.split(\"/\");\n  if (!address || !maskString)\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  let ipLength = IPv4Len;\n  let ip = parseIPv4(address);\n  if (ip == null) {\n    ipLength = IPv6Len;\n    ip = parseIPv6(address);\n    if (ip == null) throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const m = parseInt(maskString, 10);\n  if (\n    Number.isNaN(m) ||\n    String(m).length !== maskString.length ||\n    m < 0 ||\n    m > ipLength * 8\n  ) {\n    throw new Error(\"Failed to parse given CIDR: \" + s);\n  }\n  const mask = cidrMask(m, 8 * ipLength);\n  return {\n    network: maskIp(ip, mask),\n    mask,\n  };\n}\n\nexport function cidrMask(ones: number, bits: number): Uint8Array {\n  if (bits !== 8 * IPv4Len && bits !== 8 * IPv6Len)\n    throw new Error(\"Invalid CIDR mask\");\n  if (ones < 0 || ones > bits) throw new Error(\"Invalid CIDR mask\");\n  const l = bits / 8;\n  const m = new Uint8Array(l);\n  for (let i = 0; i < l; i++) {\n    if (ones >= 8) {\n      m[i] = 0xff;\n      ones -= 8;\n      continue;\n    }\n    m[i] = 255 - (0xff >> ones);\n    ones = 0;\n  }\n  return m;\n}\n","import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { cidrMask, parseCidr } from \"./cidr.js\";\nimport { containsIp, maskIp } from \"./ip.js\";\nimport { ipToString, maskToHex, simpleMaskLength } from \"./util.js\";\n\nexport class IpNet {\n  public readonly network: Uint8Array;\n  public readonly mask: Uint8Array;\n\n  /**\n   *\n   * @param ipOrCidr either network ip or full cidr address\n   * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n   */\n  constructor(ipOrCidr: string, mask?: string | number) {\n    if (mask == null) {\n      ({ network: this.network, mask: this.mask } = parseCidr(ipOrCidr));\n    } else {\n      const ipResult = parseIP(ipOrCidr);\n      if (ipResult == null) {\n        throw new Error(\"Failed to parse network\");\n      }\n      mask = String(mask);\n      const m = parseInt(mask, 10);\n      if (\n        Number.isNaN(m) ||\n        String(m).length !== mask.length ||\n        m < 0 ||\n        m > ipResult.length * 8\n      ) {\n        const maskResult = parseIP(mask);\n        if (maskResult == null) {\n          throw new Error(\"Failed to parse mask\");\n        }\n        this.mask = maskResult;\n      } else {\n        this.mask = cidrMask(m, 8 * ipResult.length);\n      }\n      this.network = maskIp(ipResult, this.mask);\n    }\n  }\n\n  /**\n   * Checks if netmask contains ip address\n   * @param ip\n   * @returns\n   */\n  contains(ip: Uint8Array | number[] | string): boolean {\n    return containsIp({ network: this.network, mask: this.mask }, ip);\n  }\n\n  /**Serializes back to string format */\n  toString(): string {\n    const l = simpleMaskLength(this.mask);\n    const mask = l !== -1 ? String(l) : maskToHex(this.mask);\n    return ipToString(this.network) + \"/\" + mask;\n  }\n}\n","import { Buffer } from 'node:buffer'\nimport bases, { type SupportedEncodings } from './util/bases.js'\nimport { asUint8Array } from '#util/as-uint8array'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return asUint8Array(Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n",null,"import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from '@chainsafe/is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  ip = ip.toString().trim()\n\n  if (isV4(ip)) {\n    const bytes = new Uint8Array(offset + 4)\n\n    ip.split(/\\./g).forEach((byte) => {\n      bytes[offset++] = parseInt(byte, 10) & 0xff\n    })\n\n    return bytes\n  }\n\n  if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    const bytes = new Uint8Array(offset + 16)\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      bytes[offset++] = (word >> 8) & 0xff\n      bytes[offset++] = word & 0xff\n    }\n\n    return bytes\n  }\n\n  throw new Error('invalid ip address')\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number): string {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const view = new DataView(buf.buffer)\n\n  if (length === 4) {\n    const result = []\n\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n\n    return result.join('.')\n  }\n\n  if (length === 16) {\n    const result = []\n\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n\n    return result.join(':')\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n\n  return ''\n}\n","import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc-direct'],\n  [281, 0, 'webrtc'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [449, V, 'sni'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [481, V, 'http-path'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n","import { IpNet } from '@chainsafe/netmask'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Multiaddr } from './index.js'\n\nconst ip4Protocol = getProtocol('ip4')\nconst ip6Protocol = getProtocol('ip6')\nconst ipcidrProtocol = getProtocol('ipcidr')\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\n// eslint-disable-next-line complexity\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n    case 42: // ipv6zone\n      return bytes2str(buf)\n    case 43: // ipcidr\n      return uint8ArrayToString(buf, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    case 481: // http-path\n      return globalThis.encodeURIComponent(bytes2str(buf))\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\n// eslint-disable-next-line complexity\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n    case 42: // ipv6zone\n      return str2bytes(str)\n    case 43: // ipcidr\n      return uint8ArrayFromString(str, 'base10')\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    case 481: // http-path\n      return str2bytes(globalThis.decodeURIComponent(str))\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nexport function convertToIpNet (multiaddr: Multiaddr): IpNet {\n  let mask: string | undefined\n  let addr: string | undefined\n  multiaddr.stringTuples().forEach(([code, value]) => {\n    if (code === ip4Protocol.code || code === ip6Protocol.code) {\n      addr = value\n    }\n    if (code === ipcidrProtocol.code) {\n      mask = value\n    }\n  })\n  if (mask == null || addr == null) {\n    throw new Error('Invalid multiaddr')\n  }\n  return new IpNet(addr, mask)\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string): Uint8Array {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array): string {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number): Uint8Array {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array): number {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string): Uint8Array {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.encodingLength(size))\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string): Uint8Array {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string): Uint8Array {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const hash = buf.slice(varint.encodingLength(size))\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.encodingLength(size))\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array): string {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n","import * as varint from 'uint8-varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\nexport interface MultiaddrParts {\n  bytes: Uint8Array\n  string: string\n  tuples: Tuple[]\n  stringTuples: StringTuple[]\n  path: string | null\n}\n\nexport function stringToMultiaddrParts (str: string): MultiaddrParts {\n  str = cleanPath(str)\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  const parts = str.split('/').slice(1)\n  if (parts.length === 1 && parts[0] === '') {\n    return {\n      bytes: new Uint8Array(),\n      string: '/',\n      tuples: [],\n      stringTuples: [],\n      path: null\n    }\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([proto.code])\n      stringTuples.push([proto.code])\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = cleanPath(parts.slice(p).join('/'))\n      tuples.push([proto.code, convertToBytes(proto.code, path)])\n      stringTuples.push([proto.code, path])\n      break\n    }\n\n    const bytes = convertToBytes(proto.code, parts[p])\n    tuples.push([proto.code, bytes])\n    stringTuples.push([proto.code, convertToString(proto.code, bytes)])\n  }\n\n  return {\n    string: stringTuplesToString(stringTuples),\n    bytes: tuplesToBytes(tuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\nexport function bytesToMultiaddrParts (bytes: Uint8Array): MultiaddrParts {\n  const tuples: Tuple[] = []\n  const stringTuples: StringTuple[] = []\n  let path: string | null = null\n\n  let i = 0\n  while (i < bytes.length) {\n    const code = varint.decode(bytes, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, bytes.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      stringTuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = bytes.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > bytes.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n    const stringAddr = convertToString(code, addr)\n    stringTuples.push([code, stringAddr])\n    if (p.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = stringAddr\n      break\n    }\n  }\n\n  return {\n    bytes: Uint8Array.from(bytes),\n    string: stringTuplesToString(stringTuples),\n    tuples,\n    stringTuples,\n    path\n  }\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return uint8ArrayConcat(tuples.map((tup) => {\n    const proto = getProtocol(tup[0])\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  }))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr))\n    return size + varint.encodingLength(size)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.encodingLength(code)\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string): Error {\n  return new Error('Error parsing address: ' + str)\n}\n","import { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, type MultiaddrParts, tuplesToBytes } from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport { isMultiaddr, multiaddr, resolvers } from './index.js'\nimport type { MultiaddrInput, Multiaddr as MultiaddrInterface, MultiaddrObject, Protocol, StringTuple, Tuple, NodeAddress, ResolveOptions } from './index.js'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nclass NoAvailableResolverError extends Error {\n  constructor (message = 'No available resolver') {\n    super(message)\n    this.name = 'NoAvailableResolverError'\n  }\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr implements MultiaddrInterface {\n  public bytes: Uint8Array\n  readonly #string: string\n  readonly #tuples: Tuple[]\n  readonly #stringTuples: StringTuple[]\n  readonly #path: string | null\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    let parts: MultiaddrParts\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      parts = stringToMultiaddrParts(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes)\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n\n    this.bytes = parts.bytes\n    this.#string = parts.string\n    this.#tuples = parts.tuples\n    this.#stringTuples = parts.stringTuples\n    this.#path = parts.path\n  }\n\n  toString (): string {\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    return this.#tuples.map(([code]) => code)\n  }\n\n  protoNames (): string[] {\n    return this.#tuples.map(([code]) => getProtocol(code).name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    return this.#tuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    return this.#stringTuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      let tuples: Array<[number, string | undefined]> = []\n\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name])\n        }\n\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = []\n        }\n      })\n\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    return this.#path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: ResolveOptions): Promise<MultiaddrInterface[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw new NoAvailableResolverError(`no available resolver for ${resolvableProto.name}`)\n    }\n\n    const result = await resolver(this, options)\n\n    return result.map(str => multiaddr(str))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${this.#string})`\n  }\n}\n","/**\n * @packageDocumentation\n *\n * A standard way to represent addresses that\n *\n * - support any standard network protocol\n * - are self-describing\n * - have a binary packed format\n * - have a nice string representation\n * - encapsulate well\n *\n * @example\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const addr = multiaddr('/ip4/127.0.0.1/udp/1234')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234)\n *\n * addr.bytes\n * // <Uint8Array 04 7f 00 00 01 11 04 d2>\n *\n * addr.toString()\n * // '/ip4/127.0.0.1/udp/1234'\n *\n * addr.protos()\n * // [\n * //   {code: 4, name: 'ip4', size: 32},\n * //   {code: 273, name: 'udp', size: 16}\n * // ]\n *\n * // gives you an object that is friendly with what Node.js core modules expect for addresses\n * addr.nodeAddress()\n * // {\n * //   family: 4,\n * //   port: 1234,\n * //   address: \"127.0.0.1\"\n * // }\n *\n * addr.encapsulate('/sctp/5678')\n * // Multiaddr(/ip4/127.0.0.1/udp/1234/sctp/5678)\n * ```\n *\n * ## Resolving DNSADDR addresses\n *\n * [DNSADDR](https://github.com/multiformats/multiaddr/blob/master/protocols/DNSADDR.md) is a spec that allows storing a TXT DNS record that contains a Multiaddr.\n *\n * To resolve DNSADDR addresses, call the `.resolve()` function the multiaddr, optionally passing a `DNS` resolver.\n *\n * DNSADDR addresses can resolve to multiple multiaddrs, since there is no limit to the number of TXT records that can be stored.\n *\n * @example Resolving DNSADDR Multiaddrs\n *\n * ```TypeScript\n * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n *\n * resolvers.set('dnsaddr', dnsaddrResolver)\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n *\n * // resolve with a 5s timeout\n * const resolved = await ma.resolve({\n *   signal: AbortSignal.timeout(5000)\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n *\n * @example Using a custom DNS resolver to resolve DNSADDR Multiaddrs\n *\n * See the docs for [@multiformats/dns](https://www.npmjs.com/package/@multiformats/dns) for a full breakdown of how to specify multiple resolvers or resolvers that can be used for specific TLDs.\n *\n * ```TypeScript\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { dns } from '@multiformats/dns'\n * import { dnsJsonOverHttps } from '@multiformats/dns/resolvers'\n *\n * const resolver = dns({\n *   resolvers: {\n *     '.': dnsJsonOverHttps('https://cloudflare-dns.com/dns-query')\n *   }\n * })\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const resolved = await ma.resolve({\n *  dns: resolver\n * })\n *\n * console.info(resolved)\n * // [Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...'), Multiaddr('/ip4/147.75...')...]\n * ```\n */\n\nimport { Multiaddr as MultiaddrClass, symbol } from './multiaddr.js'\nimport { getProtocol } from './protocols-table.js'\nimport type { Resolver } from './resolvers/index.js'\nimport type { DNS } from '@multiformats/dns'\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\n\nexport type { Resolver }\n\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js'\n\nexport interface ResolveOptions extends AbortOptions {\n  /**\n   * An optional DNS resolver\n   */\n  dns?: DNS\n\n  /**\n   * When resolving DNSADDR Multiaddrs that resolve to other DNSADDR Multiaddrs,\n   * limit how many times we will recursively resolve them.\n   *\n   * @default 32\n   */\n  maxRecursiveDepth?: number\n}\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString(): string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON(): string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions(): MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos(): Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes(): number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames(): string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples(): Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples(): StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate(addr: MultiaddrInput): Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate(addr: Multiaddr | string): Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode(code: number): Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId(): string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath(): string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals(addr: { bytes: Uint8Array }): boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve(options?: ResolveOptions): Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress(): NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress(addr?: Multiaddr): boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new MultiaddrClass('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new MultiaddrClass(addr)\n}\n\nexport { getProtocol as protocols }\n","import { dns, RecordType } from '@multiformats/dns'\nimport { multiaddr } from '../index.js'\nimport { getProtocol } from '../protocols-table.js'\nimport type { Resolver } from './index.js'\nimport type { AbortOptions, Multiaddr } from '../index.js'\nimport type { DNS } from '@multiformats/dns'\n\nconst MAX_RECURSIVE_DEPTH = 32\nconst { code: dnsaddrCode } = getProtocol('dnsaddr')\n\nclass RecursionLimitError extends Error {\n  constructor (message = 'Max recursive depth reached') {\n    super(message)\n    this.name = 'RecursionLimitError'\n  }\n}\n\nexport interface DNSADDROptions extends AbortOptions {\n  /**\n   * An optional DNS resolver\n   */\n  dns?: DNS\n\n  /**\n   * When resolving DNSADDR Multiaddrs that resolve to other DNSADDR Multiaddrs,\n   * limit how many times we will recursively resolve them.\n   *\n   * @default 32\n   */\n  maxRecursiveDepth?: number\n}\n\nexport const dnsaddrResolver: Resolver<DNSADDROptions> = async function dnsaddrResolver (ma: Multiaddr, options: DNSADDROptions = {}): Promise<string[]> {\n  const recursionLimit = options.maxRecursiveDepth ?? MAX_RECURSIVE_DEPTH\n\n  if (recursionLimit === 0) {\n    throw new RecursionLimitError('Max recursive depth reached')\n  }\n\n  const [, hostname] = ma.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? []\n\n  const resolver = options?.dns ?? dns()\n  const result = await resolver.query(`_dnsaddr.${hostname}`, {\n    signal: options?.signal,\n    types: [\n      RecordType.TXT\n    ]\n  })\n\n  const peerId = ma.getPeerId()\n  const output: string[] = []\n\n  for (const answer of result.Answer) {\n    const addr = answer.data\n      .replace(/[\"']/g, '')\n      .trim()\n      .split('=')[1]\n\n    if (addr == null) {\n      continue\n    }\n\n    if (peerId != null && !addr.includes(peerId)) {\n      continue\n    }\n\n    const ma = multiaddr(addr)\n\n    if (addr.startsWith('/dnsaddr')) {\n      const resolved = await ma.resolve({\n        ...options,\n        maxRecursiveDepth: recursionLimit - 1\n      })\n\n      output.push(...resolved.map(ma => ma.toString()))\n    } else {\n      output.push(ma.toString())\n    }\n  }\n\n  return output\n}\n","/**\n * Thin ESM wrapper for CJS named exports.\n *\n * Ref: https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1\n */\n\nimport mergeOptions from './index.js';\nexport default mergeOptions;\n","import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { contentRoutingSymbol, TypedEventEmitter, setMaxListeners, peerDiscoverySymbol, peerRoutingSymbol, InvalidParametersError } from '@libp2p/interface'\nimport { defaultLogger } from '@libp2p/logger'\nimport { PeerSet } from '@libp2p/peer-collections'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { persistentPeerStore } from '@libp2p/peer-store'\nimport { isMultiaddr, type Multiaddr } from '@multiformats/multiaddr'\nimport { MemoryDatastore } from 'datastore-core/memory'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { AddressManager } from './address-manager/index.js'\nimport { checkServiceDependencies, defaultComponents } from './components.js'\nimport { connectionGater } from './config/connection-gater.js'\nimport { DefaultConnectionManager } from './connection-manager/index.js'\nimport { ConnectionMonitor } from './connection-monitor.js'\nimport { CompoundContentRouting } from './content-routing.js'\nimport { DefaultPeerRouting } from './peer-routing.js'\nimport { RandomWalk } from './random-walk.js'\nimport { DefaultRegistrar } from './registrar.js'\nimport { DefaultTransportManager } from './transport-manager.js'\nimport { DefaultUpgrader } from './upgrader.js'\nimport * as pkg from './version.js'\nimport type { Components } from './components.js'\nimport type { Libp2p as Libp2pInterface, Libp2pInit } from './index.js'\nimport type { PeerRouting, ContentRouting, Libp2pEvents, PendingDial, ServiceMap, AbortOptions, ComponentLogger, Logger, Connection, NewStreamOptions, Stream, Metrics, PeerId, PeerInfo, PeerStore, Topology, Libp2pStatus, IsDialableOptions, DialOptions, PublicKey, Ed25519PeerId, Secp256k1PeerId, RSAPublicKey, RSAPeerId, URLPeerId, Ed25519PublicKey, Secp256k1PublicKey } from '@libp2p/interface'\nimport type { StreamHandler, StreamHandlerOptions } from '@libp2p/interface-internal'\n\nexport class Libp2p<T extends ServiceMap = ServiceMap> extends TypedEventEmitter<Libp2pEvents> implements Libp2pInterface<T> {\n  public peerId: PeerId\n  public peerStore: PeerStore\n  public contentRouting: ContentRouting\n  public peerRouting: PeerRouting\n  public metrics?: Metrics\n  public services: T\n  public logger: ComponentLogger\n  public status: Libp2pStatus\n\n  public components: Components & T\n  private readonly log: Logger\n\n  constructor (init: Libp2pInit<T> & { peerId: PeerId }) {\n    super()\n\n    this.status = 'stopped'\n\n    // event bus - components can listen to this emitter to be notified of system events\n    // and also cause them to be emitted\n    const events = new TypedEventEmitter<Libp2pEvents>()\n    const originalDispatch = events.dispatchEvent.bind(events)\n    events.dispatchEvent = (evt: any) => {\n      const internalResult = originalDispatch(evt)\n      const externalResult = this.dispatchEvent(\n        new CustomEvent(evt.type, { detail: evt.detail })\n      )\n\n      return internalResult || externalResult\n    }\n\n    // This emitter gets listened to a lot\n    setMaxListeners(Infinity, events)\n\n    this.peerId = init.peerId\n    this.logger = init.logger ?? defaultLogger()\n    this.log = this.logger.forComponent('libp2p')\n    // @ts-expect-error {} may not be of type T\n    this.services = {}\n    // @ts-expect-error defaultComponents is missing component types added later\n    const components = this.components = defaultComponents({\n      peerId: init.peerId,\n      privateKey: init.privateKey,\n      nodeInfo: init.nodeInfo ?? {\n        name: pkg.name,\n        version: pkg.version\n      },\n      logger: this.logger,\n      events,\n      datastore: init.datastore ?? new MemoryDatastore(),\n      connectionGater: connectionGater(init.connectionGater),\n      dns: init.dns\n    })\n\n    this.peerStore = this.configureComponent('peerStore', persistentPeerStore(components, {\n      addressFilter: this.components.connectionGater.filterMultiaddrForPeer,\n      ...init.peerStore\n    }))\n\n    // Create Metrics\n    if (init.metrics != null) {\n      this.metrics = this.configureComponent('metrics', init.metrics(this.components))\n    }\n\n    components.events.addEventListener('peer:update', evt => {\n      // if there was no peer previously in the peer store this is a new peer\n      if (evt.detail.previous == null) {\n        const peerInfo: PeerInfo = {\n          id: evt.detail.peer.id,\n          multiaddrs: evt.detail.peer.addresses.map(a => a.multiaddr)\n        }\n\n        components.events.safeDispatchEvent('peer:discovery', { detail: peerInfo })\n      }\n    })\n\n    // Set up connection protector if configured\n    if (init.connectionProtector != null) {\n      this.configureComponent('connectionProtector', init.connectionProtector(components))\n    }\n\n    // Set up the Upgrader\n    this.components.upgrader = new DefaultUpgrader(this.components, {\n      connectionEncrypters: (init.connectionEncrypters ?? []).map((fn, index) => this.configureComponent(`connection-encryption-${index}`, fn(this.components))),\n      streamMuxers: (init.streamMuxers ?? []).map((fn, index) => this.configureComponent(`stream-muxers-${index}`, fn(this.components))),\n      inboundUpgradeTimeout: init.connectionManager?.inboundUpgradeTimeout,\n      outboundUpgradeTimeout: init.connectionManager?.outboundUpgradeTimeout\n    })\n\n    // Setup the transport manager\n    this.configureComponent('transportManager', new DefaultTransportManager(this.components, init.transportManager))\n\n    // Create the Connection Manager\n    this.configureComponent('connectionManager', new DefaultConnectionManager(this.components, init.connectionManager))\n\n    if (init.connectionMonitor?.enabled !== false) {\n      // Create the Connection Monitor if not disabled\n      this.configureComponent('connectionMonitor', new ConnectionMonitor(this.components, init.connectionMonitor))\n    }\n\n    // Create the Registrar\n    this.configureComponent('registrar', new DefaultRegistrar(this.components))\n\n    // Addresses {listen, announce, noAnnounce}\n    this.configureComponent('addressManager', new AddressManager(this.components, init.addresses))\n\n    // Peer routers\n    const peerRouters: PeerRouting[] = (init.peerRouters ?? []).map((fn, index) => this.configureComponent(`peer-router-${index}`, fn(this.components)))\n    this.peerRouting = this.components.peerRouting = this.configureComponent('peerRouting', new DefaultPeerRouting(this.components, {\n      routers: peerRouters\n    }))\n\n    // Content routers\n    const contentRouters: ContentRouting[] = (init.contentRouters ?? []).map((fn, index) => this.configureComponent(`content-router-${index}`, fn(this.components)))\n    this.contentRouting = this.components.contentRouting = this.configureComponent('contentRouting', new CompoundContentRouting(this.components, {\n      routers: contentRouters\n    }))\n\n    // Random walk\n    this.configureComponent('randomWalk', new RandomWalk(this.components))\n\n    // Discovery modules\n    ;(init.peerDiscovery ?? []).forEach((fn, index) => {\n      const service = this.configureComponent(`peer-discovery-${index}`, fn(this.components))\n\n      service.addEventListener('peer', (evt) => {\n        this.#onDiscoveryPeer(evt)\n      })\n    })\n\n    // Transport modules\n    init.transports?.forEach((fn, index) => {\n      this.components.transportManager.add(this.configureComponent(`transport-${index}`, fn(this.components)))\n    })\n\n    // User defined modules\n    if (init.services != null) {\n      for (const name of Object.keys(init.services)) {\n        const createService = init.services[name]\n        const service: any = createService(this.components)\n\n        if (service == null) {\n          this.log.error('service factory %s returned null or undefined instance', name)\n          continue\n        }\n\n        this.services[name as keyof T] = service\n        this.configureComponent(name, service)\n\n        if (service[contentRoutingSymbol] != null) {\n          this.log('registering service %s for content routing', name)\n          contentRouters.push(service[contentRoutingSymbol])\n        }\n\n        if (service[peerRoutingSymbol] != null) {\n          this.log('registering service %s for peer routing', name)\n          peerRouters.push(service[peerRoutingSymbol])\n        }\n\n        if (service[peerDiscoverySymbol] != null) {\n          this.log('registering service %s for peer discovery', name)\n          service[peerDiscoverySymbol].addEventListener?.('peer', (evt: CustomEvent<PeerInfo>) => {\n            this.#onDiscoveryPeer(evt)\n          })\n        }\n      }\n    }\n\n    // Ensure all services have their required dependencies\n    checkServiceDependencies(components)\n  }\n\n  private configureComponent <T> (name: string, component: T): T {\n    if (component == null) {\n      this.log.error('component %s was null or undefined', name)\n    }\n\n    // @ts-expect-error cannot assign props\n    this.components[name] = component\n\n    return component\n  }\n\n  /**\n   * Starts the libp2p node and all its subsystems\n   */\n  async start (): Promise<void> {\n    if (this.status !== 'stopped') {\n      return\n    }\n\n    this.status = 'starting'\n\n    this.log('libp2p is starting')\n\n    try {\n      await this.components.beforeStart?.()\n      await this.components.start()\n      await this.components.afterStart?.()\n\n      this.status = 'started'\n      this.safeDispatchEvent('start', { detail: this })\n      this.log('libp2p has started')\n    } catch (err: any) {\n      this.log.error('An error occurred starting libp2p', err)\n      // set status to 'started' so this.stop() will stop any running components\n      this.status = 'started'\n      await this.stop()\n      throw err\n    }\n  }\n\n  /**\n   * Stop the libp2p node by closing its listeners and open connections\n   */\n  async stop (): Promise<void> {\n    if (this.status !== 'started') {\n      return\n    }\n\n    this.log('libp2p is stopping')\n\n    this.status = 'stopping'\n\n    await this.components.beforeStop?.()\n    await this.components.stop()\n    await this.components.afterStop?.()\n\n    this.status = 'stopped'\n    this.safeDispatchEvent('stop', { detail: this })\n    this.log('libp2p has stopped')\n  }\n\n  getConnections (peerId?: PeerId): Connection[] {\n    return this.components.connectionManager.getConnections(peerId)\n  }\n\n  getDialQueue (): PendingDial[] {\n    return this.components.connectionManager.getDialQueue()\n  }\n\n  getPeers (): PeerId[] {\n    const peerSet = new PeerSet()\n\n    for (const conn of this.components.connectionManager.getConnections()) {\n      peerSet.add(conn.remotePeer)\n    }\n\n    return Array.from(peerSet)\n  }\n\n  async dial (peer: PeerId | Multiaddr | Multiaddr[], options: DialOptions = {}): Promise<Connection> {\n    return this.components.connectionManager.openConnection(peer, {\n      // ensure any userland dials take top priority in the queue\n      priority: 75,\n      ...options\n    })\n  }\n\n  async dialProtocol (peer: PeerId | Multiaddr | Multiaddr[], protocols: string | string[], options: NewStreamOptions = {}): Promise<Stream> {\n    if (protocols == null) {\n      throw new InvalidParametersError('no protocols were provided to open a stream')\n    }\n\n    protocols = Array.isArray(protocols) ? protocols : [protocols]\n\n    if (protocols.length === 0) {\n      throw new InvalidParametersError('no protocols were provided to open a stream')\n    }\n\n    const connection = await this.dial(peer, options)\n\n    return connection.newStream(protocols, options)\n  }\n\n  getMultiaddrs (): Multiaddr[] {\n    return this.components.addressManager.getAddresses()\n  }\n\n  getProtocols (): string[] {\n    return this.components.registrar.getProtocols()\n  }\n\n  async hangUp (peer: PeerId | Multiaddr, options: AbortOptions = {}): Promise<void> {\n    if (isMultiaddr(peer)) {\n      peer = peerIdFromString(peer.getPeerId() ?? '')\n    }\n\n    await this.components.connectionManager.closeConnections(peer, options)\n  }\n\n  /**\n   * Get the public key for the given peer id\n   */\n  async getPublicKey (peer: Ed25519PeerId, options?: AbortOptions): Promise<Ed25519PublicKey>\n  async getPublicKey (peer: Secp256k1PeerId, options?: AbortOptions): Promise<Secp256k1PublicKey>\n  async getPublicKey (peer: RSAPeerId, options?: AbortOptions): Promise<RSAPublicKey>\n  async getPublicKey (peer: URLPeerId, options?: AbortOptions): Promise<never>\n  async getPublicKey (peer: PeerId, options?: AbortOptions): Promise<PublicKey>\n  async getPublicKey (peer: PeerId, options: AbortOptions = {}): Promise<PublicKey> {\n    this.log('getPublicKey %p', peer)\n\n    if (peer.publicKey != null) {\n      return peer.publicKey\n    }\n\n    try {\n      const peerInfo = await this.peerStore.get(peer)\n\n      if (peerInfo.id.publicKey != null) {\n        return peerInfo.id.publicKey\n      }\n    } catch (err: any) {\n      if (err.name !== 'NotFoundError') {\n        throw err\n      }\n    }\n\n    const peerKey = uint8ArrayConcat([\n      uint8ArrayFromString('/pk/'),\n      peer.toMultihash().bytes\n    ])\n\n    // search any available content routing methods\n    const bytes = await this.contentRouting.get(peerKey, options)\n\n    // ensure the returned key is valid\n    const publicKey = publicKeyFromProtobuf(bytes)\n\n    await this.peerStore.patch(peer, {\n      publicKey\n    })\n\n    return publicKey\n  }\n\n  async handle (protocols: string | string[], handler: StreamHandler, options?: StreamHandlerOptions): Promise<void> {\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    await Promise.all(\n      protocols.map(async protocol => {\n        await this.components.registrar.handle(protocol, handler, options)\n      })\n    )\n  }\n\n  async unhandle (protocols: string[] | string): Promise<void> {\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    await Promise.all(\n      protocols.map(async protocol => {\n        await this.components.registrar.unhandle(protocol)\n      })\n    )\n  }\n\n  async register (protocol: string, topology: Topology): Promise<string> {\n    return this.components.registrar.register(protocol, topology)\n  }\n\n  unregister (id: string): void {\n    this.components.registrar.unregister(id)\n  }\n\n  async isDialable (multiaddr: Multiaddr, options: IsDialableOptions = {}): Promise<boolean> {\n    return this.components.connectionManager.isDialable(multiaddr, options)\n  }\n\n  /**\n   * Called whenever peer discovery services emit `peer` events and adds peers\n   * to the peer store.\n   */\n  #onDiscoveryPeer (evt: CustomEvent<PeerInfo>): void {\n    const { detail: peer } = evt\n\n    if (peer.id.toString() === this.peerId.toString()) {\n      this.log.error('peer discovery mechanism discovered self')\n      return\n    }\n\n    void this.components.peerStore.merge(peer.id, {\n      multiaddrs: peer.multiaddrs\n    })\n      .catch(err => { this.log.error(err) })\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { type SupportedEncodings, toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst pathSepS = '/'\nconst pathSepB = new TextEncoder().encode(pathSepS)\nconst pathSep = pathSepB[0]\n\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nexport class Key {\n  private _buf: Uint8Array\n\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor (s: string | Uint8Array, clean?: boolean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s)\n    } else if (s instanceof Uint8Array) {\n      this._buf = s\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array')\n    }\n\n    if (clean == null) {\n      clean = true\n    }\n\n    if (clean) {\n      this.clean()\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key')\n    }\n  }\n\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  toString (encoding: SupportedEncodings = 'utf8'): string {\n    return uint8ArrayToString(this._buf, encoding)\n  }\n\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n  uint8Array (): Uint8Array {\n    return this._buf\n  }\n\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n  get [Symbol.toStringTag] (): string {\n    return `Key(${this.toString()})`\n  }\n\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n  static withNamespaces (list: string[]): Key {\n    return new Key(list.join(pathSepS))\n  }\n\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/344502982398')\n   * ```\n   */\n  static random (): Key {\n    return new Key(Math.random().toString().substring(2))\n  }\n\n  /**\n   * @param {*} other\n   */\n  static asKey (other: any): Key | null {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other)\n    }\n\n    if (typeof other.uint8Array === 'function') {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array())\n    }\n\n    return null\n  }\n\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean (): void {\n    if (this._buf == null || this._buf.byteLength === 0) {\n      this._buf = pathSepB\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1)\n      bytes.fill(pathSep, 0, 1)\n      bytes.set(this._buf, 1)\n      this._buf = bytes\n    }\n\n    // normalize does not remove trailing slashes\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1)\n    }\n  }\n\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n  less (key: Key): boolean {\n    const list1 = this.list()\n    const list2 = key.list()\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false\n      }\n\n      const c1 = list1[i]\n      const c2 = list2[i]\n\n      if (c1 < c2) {\n        return true\n      } else if (c1 > c2) {\n        return false\n      }\n    }\n\n    return list1.length < list2.length\n  }\n\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n  reverse (): Key {\n    return Key.withNamespaces(this.list().slice().reverse())\n  }\n\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces (): string[] {\n    return this.list()\n  }\n\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n  baseNamespace (): string {\n    const ns = this.namespaces()\n    return ns[ns.length - 1]\n  }\n\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n  list (): string[] {\n    return this.toString().split(pathSepS).slice(1)\n  }\n\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n  type (): string {\n    return namespaceType(this.baseNamespace())\n  }\n\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n  name (): string {\n    return namespaceValue(this.baseNamespace())\n  }\n\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  instance (s: string): Key {\n    return new Key(this.toString() + ':' + s)\n  }\n\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n  path (): Key {\n    let p = this.parent().toString()\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS\n    }\n    p += this.type()\n    return new Key(p)\n  }\n\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n  parent (): Key {\n    const list = this.list()\n    if (list.length === 1) {\n      return new Key(pathSepS)\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS))\n  }\n\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  child (key: Key): Key {\n    if (this.toString() === pathSepS) {\n      return key\n    } else if (key.toString() === pathSepS) {\n      return this\n    }\n\n    return new Key(this.toString() + key.toString(), false)\n  }\n\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n  isAncestorOf (other: Key): boolean {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return other.toString().startsWith(this.toString())\n  }\n\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n  isDecendantOf (other: Key): boolean {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return this.toString().startsWith(other.toString())\n  }\n\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   */\n  isTopLevel (): boolean {\n    return this.list().length === 1\n  }\n\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n  concat (...keys: Key[]): Key {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))])\n  }\n}\n\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType (ns: string): string {\n  const parts = ns.split(':')\n  if (parts.length < 2) {\n    return ''\n  }\n  return parts.slice(0, -1).join(':')\n}\n\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue (ns: string): string {\n  const parts = ns.split(':')\n  return parts[parts.length - 1]\n}\n\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten (arr: any[]): string[] {\n  return ([]).concat(...arr)\n}\n","export class OpenFailedError extends Error {\n  static name = 'OpenFailedError'\n  static code = 'ERR_OPEN_FAILED'\n  name = OpenFailedError.name\n  code = OpenFailedError.code\n\n  constructor (message = 'Open failed') {\n    super(message)\n  }\n}\n\nexport class CloseFailedError extends Error {\n  static name = 'CloseFailedError'\n  static code = 'ERR_CLOSE_FAILED'\n  name = CloseFailedError.name\n  code = CloseFailedError.code\n\n  constructor (message = 'Close failed') {\n    super(message)\n  }\n}\n\nexport class PutFailedError extends Error {\n  static name = 'PutFailedError'\n  static code = 'ERR_PUT_FAILED'\n  name = PutFailedError.name\n  code = PutFailedError.code\n\n  constructor (message = 'Put failed') {\n    super(message)\n  }\n}\n\nexport class GetFailedError extends Error {\n  static name = 'GetFailedError'\n  static code = 'ERR_GET_FAILED'\n  name = GetFailedError.name\n  code = GetFailedError.code\n\n  constructor (message = 'Get failed') {\n    super(message)\n  }\n}\n\nexport class DeleteFailedError extends Error {\n  static name = 'DeleteFailedError'\n  static code = 'ERR_DELETE_FAILED'\n  name = DeleteFailedError.name\n  code = DeleteFailedError.code\n\n  constructor (message = 'Delete failed') {\n    super(message)\n  }\n}\n\nexport class HasFailedError extends Error {\n  static name = 'HasFailedError'\n  static code = 'ERR_HAS_FAILED'\n  name = HasFailedError.name\n  code = HasFailedError.code\n\n  constructor (message = 'Has failed') {\n    super(message)\n  }\n}\n\nexport class NotFoundError extends Error {\n  static name = 'NotFoundError'\n  static code = 'ERR_NOT_FOUND'\n  name = NotFoundError.name\n  code = NotFoundError.code\n\n  constructor (message = 'Not Found') {\n    super(message)\n  }\n}\n\nexport class AbortError extends Error {\n  static name = 'AbortError'\n  static code = 'ERR_ABORTED'\n  name = AbortError.name\n  code = AbortError.code\n\n  constructor (message = 'Aborted') {\n    super(message)\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Mostly useful for tests or when you want to be explicit about consuming an iterable without doing anything with any yielded values.\n *\n * @example\n *\n * ```javascript\n * import drain from 'it-drain'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * drain(values)\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import drain from 'it-drain'\n *\n * const values = async function * {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * await drain(values())\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Drains an (async) iterable discarding its' content and does not return\n * anything\n */\nfunction drain (source: Iterable<unknown>): void\nfunction drain (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<void>\nfunction drain (source: Iterable<unknown> | AsyncIterable<unknown>): Promise<void> | void {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n    })()\n  } else {\n    for (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty,@typescript-eslint/no-unused-vars\n  }\n}\n\nexport default drain\n","/**\n * @packageDocumentation\n *\n * Lets you look at the contents of an async iterator and decide what to do\n *\n * @example\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const it = peekable(value)\n *\n * const first = it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info([...it])\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import peekable from 'it-peekable'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const it = peekable(values())\n *\n * const first = await it.peek()\n *\n * console.info(first) // 0\n *\n * it.push(first)\n *\n * console.info(await all(it))\n * // [ 0, 1, 2, 3, 4 ]\n * ```\n */\n\nexport interface Peek <T> {\n  peek(): IteratorResult<T, undefined>\n}\n\nexport interface AsyncPeek <T> {\n  peek(): Promise<IteratorResult<T, undefined>>\n}\n\nexport interface Push <T> {\n  push(value: T): void\n}\n\nexport type Peekable <T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>\n\nexport type AsyncPeekable <T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>\n\nfunction peekable <T> (iterable: Iterable<T>): Peekable<T>\nfunction peekable <T> (iterable: AsyncIterable<T>): AsyncPeekable<T>\nfunction peekable <T> (iterable: Iterable<T> | AsyncIterable<T>): Peekable<T> | AsyncPeekable<T> {\n  // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n  const [iterator, symbol] = iterable[Symbol.asyncIterator] != null\n    // @ts-expect-error can't use Symbol.asyncIterator to index iterable since it might be Iterable\n    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]\n    // @ts-expect-error can't use Symbol.iterator to index iterable since it might be AsyncIterable\n    : [iterable[Symbol.iterator](), Symbol.iterator]\n\n  const queue: any[] = []\n\n  // @ts-expect-error can't use symbol to index peekable\n  return {\n    peek: () => {\n      return iterator.next()\n    },\n    push: (value: any) => {\n      queue.push(value)\n    },\n    next: () => {\n      if (queue.length > 0) {\n        return {\n          done: false,\n          value: queue.shift()\n        }\n      }\n\n      return iterator.next()\n    },\n    [symbol] () {\n      return this\n    }\n  }\n}\n\nexport default peekable\n","/**\n * @packageDocumentation\n *\n * Filter values out of an (async)iterable\n *\n * @example\n *\n * ```javascript\n * import all from 'it-all'\n * import filter from 'it-filter'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const fn = (val, index) => val > 2 // Return boolean to keep item\n *\n * const arr = all(filter(values, fn))\n *\n * console.info(arr) // 3, 4\n * ```\n *\n * Async sources and filter functions must be awaited:\n *\n * ```javascript\n * import all from 'it-all'\n * import filter from 'it-filter'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const fn = async val => (val, index) > 2 // Return boolean or promise of boolean to keep item\n *\n * const arr = await all(filter(values, fn))\n *\n * console.info(arr) // 3, 4\n * ```\n */\n\nimport peek from 'it-peekable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Filters the passed (async) iterable by using the filter function\n */\nfunction filter <T> (source: Iterable<T>, fn: (val: T, index: number) => Promise<boolean>): AsyncGenerator<T, void, undefined>\nfunction filter <T> (source: Iterable<T>, fn: (val: T, index: number) => boolean): Generator<T, void, undefined>\nfunction filter <T> (source: Iterable<T> | AsyncIterable<T>, fn: (val: T, index: number) => boolean | Promise<boolean>): AsyncGenerator<T, void, undefined>\nfunction filter <T> (source: Iterable<T> | AsyncIterable<T>, fn: (val: T, index: number) => boolean | Promise<boolean>): Generator<T, void, undefined> | AsyncGenerator<T, void, undefined> {\n  let index = 0\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const entry of source) {\n        if (await fn(entry, index++)) {\n          yield entry\n        }\n      }\n    })()\n  }\n\n  // if mapping function returns a promise we have to return an async generator\n  const peekable = peek(source)\n  const { value, done } = peekable.next()\n\n  if (done === true) {\n    return (function * () {}())\n  }\n\n  const res = fn(value, index++)\n\n  // @ts-expect-error .then is not present on O\n  if (typeof res.then === 'function') {\n    return (async function * () {\n      if (await res) {\n        yield value\n      }\n\n      for await (const entry of peekable) {\n        if (await fn(entry, index++)) {\n          yield entry\n        }\n      }\n    })()\n  }\n\n  const func = fn as (val: T, index: number) => boolean\n\n  return (function * () {\n    if (res === true) {\n      yield value\n    }\n\n    for (const entry of peekable) {\n      if (func(entry, index++)) {\n        yield entry\n      }\n    }\n  })()\n}\n\nexport default filter\n","/**\n * @packageDocumentation\n *\n * For when you need a one-liner to collect iterable values.\n *\n * @example\n *\n * ```javascript\n * import all from 'it-all'\n *\n * // This can also be an iterator, etc\n * const values = function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = all(values)\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = await all(values())\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Collects all values from an (async) iterable and returns them as an array\n */\nfunction all <T> (source: Iterable<T>): T[]\nfunction all <T> (source: Iterable<T> | AsyncIterable<T>): Promise<T[]>\nfunction all <T> (source: Iterable<T> | AsyncIterable<T>): Promise<T[]> | T[] {\n  if (isAsyncIterable(source)) {\n    return (async () => {\n      const arr = []\n\n      for await (const entry of source) {\n        arr.push(entry)\n      }\n\n      return arr\n    })()\n  }\n\n  const arr = []\n\n  for (const entry of source) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nexport default all\n","/**\n * @packageDocumentation\n *\n * Consumes all values from an (async)iterable and returns them sorted by the passed sort function.\n *\n * @example\n *\n * ```javascript\n * import sort from 'it-sort'\n * import all from 'it-all'\n *\n * const sorter = (a, b) => {\n *   return a.localeCompare(b)\n * }\n *\n * // This can also be an iterator, generator, etc\n * const values = ['foo', 'bar']\n *\n * const arr = all(sort(values, sorter))\n *\n * console.info(arr) // 'bar', 'foo'\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import sort from 'it-sort'\n * import all from 'it-all'\n *\n * const sorter = (a, b) => {\n *   return a.localeCompare(b)\n * }\n *\n * const values = async function * () {\n *   yield * ['foo', 'bar']\n * }\n *\n * const arr = await all(sort(values, sorter))\n *\n * console.info(arr) // 'bar', 'foo'\n * ```\n */\n\nimport all from 'it-all'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\nexport interface CompareFunction<T> {\n  (a: T, b: T): number\n}\n\n/**\n * Collects all values from an async iterator, sorts them\n * using the passed function and yields them\n */\nfunction sort <T> (source: Iterable<T>, sorter: CompareFunction<T>): Generator<T, void, undefined>\nfunction sort <T> (source: Iterable<T> | AsyncIterable<T>, sorter: CompareFunction<T>): AsyncGenerator<T, void, undefined>\nfunction sort <T> (source: Iterable<T> | AsyncIterable<T>, sorter: CompareFunction<T>): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      const arr = await all(source)\n\n      yield * arr.sort(sorter)\n    })()\n  }\n\n  return (function * () {\n    const arr = all(source)\n\n    yield * arr.sort(sorter)\n  })()\n}\n\nexport default sort\n","/**\n * @packageDocumentation\n *\n * For when you only want a few values out of an (async)iterable.\n *\n * @example\n *\n * ```javascript\n * import take from 'it-take'\n * import all from 'it-all'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * const arr = all(take(values, 2))\n *\n * console.info(arr) // 0, 1\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import take from 'it-take'\n * import all from 'it-all'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * const arr = await all(take(values(), 2))\n *\n * console.info(arr) // 0, 1\n * ```\n */\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Stop iteration after n items have been received\n */\nfunction take <T> (source: Iterable<T>, limit: number): Generator<T, void, undefined>\nfunction take <T> (source: Iterable<T> | AsyncIterable<T>, limit: number): AsyncGenerator<T, void, undefined>\nfunction take <T> (source: Iterable<T> | AsyncIterable<T>, limit: number): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      let items = 0\n\n      if (limit < 1) {\n        return\n      }\n\n      for await (const entry of source) {\n        yield entry\n\n        items++\n\n        if (items === limit) {\n          return\n        }\n      }\n    })()\n  }\n\n  return (function * () {\n    let items = 0\n\n    if (limit < 1) {\n      return\n    }\n\n    for (const entry of source) {\n      yield entry\n\n      items++\n\n      if (items === limit) {\n        return\n      }\n    }\n  })()\n}\n\nexport default take\n","import drain from 'it-drain'\nimport filter from 'it-filter'\nimport sort from 'it-sort'\nimport take from 'it-take'\nimport type { Batch, Datastore, Key, KeyQuery, Pair, Query } from 'interface-datastore'\nimport type { AbortOptions, Await, AwaitIterable } from 'interface-store'\n\nexport class BaseDatastore implements Datastore {\n  put (key: Key, val: Uint8Array, options?: AbortOptions): Await<Key> {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  get (key: Key, options?: AbortOptions): Await<Uint8Array> {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  has (key: Key, options?: AbortOptions): Await<boolean> {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  delete (key: Key, options?: AbortOptions): Await<void> {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  async * putMany (source: AwaitIterable<Pair>, options: AbortOptions = {}): AwaitIterable<Key> {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield key\n    }\n  }\n\n  async * getMany (source: AwaitIterable<Key>, options: AbortOptions = {}): AwaitIterable<Pair> {\n    for await (const key of source) {\n      yield {\n        key,\n        value: await this.get(key, options)\n      }\n    }\n  }\n\n  async * deleteMany (source: AwaitIterable<Key>, options: AbortOptions = {}): AwaitIterable<Key> {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  batch (): Batch {\n    let puts: Pair[] = []\n    let dels: Key[] = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q: Query, options?: AbortOptions): AwaitIterable<Pair> {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q: KeyQuery, options?: AbortOptions): AwaitIterable<Key> {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  query (q: Query, options?: AbortOptions): AwaitIterable<Pair> {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      const prefix = q.prefix\n      it = filter(it, (e) => e.key.toString().startsWith(prefix))\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sort(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      const offset = q.offset\n      it = filter(it, () => i++ >= offset)\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  queryKeys (q: KeyQuery, options?: AbortOptions): AwaitIterable<Key> {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      const prefix = q.prefix\n      it = filter(it, (key) =>\n        key.toString().startsWith(prefix)\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sort(it, f), it)\n    }\n\n    if (q.offset != null) {\n      const offset = q.offset\n      let i = 0\n      it = filter(it, () => i++ >= offset)\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n","import { Key } from 'interface-datastore/key'\nimport { NotFoundError } from 'interface-store'\nimport { BaseDatastore } from './base.js'\nimport type { Pair } from 'interface-datastore'\nimport type { Await, AwaitIterable } from 'interface-store'\n\nexport class MemoryDatastore extends BaseDatastore {\n  private readonly data: Map<string, Uint8Array>\n\n  constructor () {\n    super()\n\n    this.data = new Map()\n  }\n\n  put (key: Key, val: Uint8Array): Await<Key> { // eslint-disable-line require-await\n    this.data.set(key.toString(), val)\n\n    return key\n  }\n\n  get (key: Key): Await<Uint8Array> {\n    const result = this.data.get(key.toString())\n\n    if (result == null) {\n      throw new NotFoundError()\n    }\n\n    return result\n  }\n\n  has (key: Key): Await<boolean> { // eslint-disable-line require-await\n    return this.data.has(key.toString())\n  }\n\n  delete (key: Key): Await<void> { // eslint-disable-line require-await\n    this.data.delete(key.toString())\n  }\n\n  * _all (): AwaitIterable<Pair> {\n    for (const [key, value] of this.data.entries()) {\n      yield { key: new Key(key), value }\n    }\n  }\n\n  * _allKeys (): AwaitIterable<Key> {\n    for (const key of this.data.keys()) {\n      yield new Key(key)\n    }\n  }\n}\n","/* eslint-disable complexity */\nimport { isIPv4 } from '@chainsafe/is-ip'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { debounce } from '@libp2p/utils/debounce'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { DNSMappings } from './dns-mappings.js'\nimport { IPMappings } from './ip-mappings.js'\nimport { ObservedAddresses } from './observed-addresses.js'\nimport { TransportAddresses } from './transport-addresses.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, TypedEventTarget, PeerId, PeerStore } from '@libp2p/interface'\nimport type { AddressManager as AddressManagerInterface, TransportManager, NodeAddress, ConfirmAddressOptions } from '@libp2p/interface-internal'\nimport type { Filter } from '@libp2p/utils/filters'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst ONE_MINUTE = 60_000\n\nexport const defaultValues = {\n  maxObservedAddresses: 10,\n  addressVerificationTTL: ONE_MINUTE * 10,\n  addressVerificationRetry: ONE_MINUTE * 5\n}\n\nexport interface AddressManagerInit {\n  /**\n   * Pass an function in this field to override the list of addresses\n   * that are announced to the network\n   */\n  announceFilter?: AddressFilter\n\n  /**\n   * A list of string multiaddrs to listen on\n   */\n  listen?: string[]\n\n  /**\n   * A list of string multiaddrs to use instead of those reported by transports\n   */\n  announce?: string[]\n\n  /**\n   * A list of string multiaddrs string to never announce\n   */\n  noAnnounce?: string[]\n\n  /**\n   * A list of string multiaddrs to add to the list of announced addresses\n   */\n  appendAnnounce?: string[]\n\n  /**\n   * Limits the number of observed addresses we will store\n   */\n  maxObservedAddresses?: number\n\n  /**\n   * How long before each public address should be reverified in ms.\n   *\n   * Requires `@libp2p/autonat` or some other verification method to be\n   * configured.\n   *\n   * @default 600_000\n   */\n  addressVerificationTTL?: number\n\n  /**\n   * After a transport or mapped address has failed to verify, how long to wait\n   * before retrying it in ms\n   *\n   * Requires `@libp2p/autonat` or some other verification method to be\n   * configured.\n   *\n   * @default 300_000\n   */\n  addressVerificationRetry?: number\n}\n\nexport interface AddressManagerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\n/**\n * A function that takes a list of multiaddrs and returns a list\n * to announce\n */\nexport interface AddressFilter {\n  (addrs: Multiaddr[]): Multiaddr[]\n}\n\nconst defaultAddressFilter = (addrs: Multiaddr[]): Multiaddr[] => addrs\n\n/**\n * If the passed multiaddr contains the passed peer id, remove it\n */\nfunction stripPeerId (ma: Multiaddr, peerId: PeerId): Multiaddr {\n  const observedPeerIdStr = ma.getPeerId()\n\n  // strip our peer id if it has been passed\n  if (observedPeerIdStr != null) {\n    const observedPeerId = peerIdFromString(observedPeerIdStr)\n\n    // use same encoding for comparison\n    if (observedPeerId.equals(peerId)) {\n      ma = ma.decapsulate(multiaddr(`/p2p/${peerId.toString()}`))\n    }\n  }\n\n  return ma\n}\n\nexport class AddressManager implements AddressManagerInterface {\n  private readonly log: Logger\n  private readonly components: AddressManagerComponents\n  // this is an array to allow for duplicates, e.g. multiples of `/ip4/0.0.0.0/tcp/0`\n  private readonly listen: string[]\n  private readonly announce: Set<string>\n  private readonly appendAnnounce: Set<string>\n  private readonly announceFilter: AddressFilter\n  private readonly observed: ObservedAddresses\n  private readonly dnsMappings: DNSMappings\n  private readonly ipMappings: IPMappings\n  private readonly transportAddresses: TransportAddresses\n  private readonly observedAddressFilter: Filter\n  private readonly addressVerificationTTL: number\n  private readonly addressVerificationRetry: number\n\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    const { listen = [], announce = [], appendAnnounce = [] } = init\n\n    this.components = components\n    this.log = components.logger.forComponent('libp2p:address-manager')\n    this.listen = listen.map(ma => ma.toString())\n    this.announce = new Set(announce.map(ma => ma.toString()))\n    this.appendAnnounce = new Set(appendAnnounce.map(ma => ma.toString()))\n    this.observed = new ObservedAddresses(components, init)\n    this.dnsMappings = new DNSMappings(components, init)\n    this.ipMappings = new IPMappings(components, init)\n    this.transportAddresses = new TransportAddresses(components, init)\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter\n    this.observedAddressFilter = createScalableCuckooFilter(1024)\n    this.addressVerificationTTL = init.addressVerificationTTL ?? defaultValues.addressVerificationTTL\n    this.addressVerificationRetry = init.addressVerificationRetry ?? defaultValues.addressVerificationRetry\n\n    // this method gets called repeatedly on startup when transports start listening so\n    // debounce it so we don't cause multiple self:peer:update events to be emitted\n    this._updatePeerStoreAddresses = debounce(this._updatePeerStoreAddresses.bind(this), 1000)\n\n    // update our stored addresses when new transports listen\n    components.events.addEventListener('transport:listening', () => {\n      this._updatePeerStoreAddresses()\n    })\n    // update our stored addresses when existing transports stop listening\n    components.events.addEventListener('transport:close', () => {\n      this._updatePeerStoreAddresses()\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/address-manager'\n\n  _updatePeerStoreAddresses (): void {\n    // if announce addresses have been configured, ensure they make it into our peer\n    // record for things like identify\n    const addrs = this.getAddresses()\n      .map(ma => {\n        // strip our peer id if it is present\n        if (ma.getPeerId() === this.components.peerId.toString()) {\n          return ma.decapsulate(`/p2p/${this.components.peerId.toString()}`)\n        }\n\n        return ma\n      })\n\n    this.components.peerStore.patch(this.components.peerId, {\n      multiaddrs: addrs\n    })\n      .catch(err => {\n        this.log.error('error updating addresses', err)\n      })\n  }\n\n  /**\n   * Get peer listen multiaddrs\n   */\n  getListenAddrs (): Multiaddr[] {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAppendAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.appendAnnounce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get observed multiaddrs\n   */\n  getObservedAddrs (): Multiaddr[] {\n    return this.observed.getAll().map(addr => addr.multiaddr)\n  }\n\n  /**\n   * Add peer observed addresses\n   */\n  addObservedAddr (addr: Multiaddr): void {\n    const tuples = addr.stringTuples()\n    const socketAddress = `${tuples[0][1]}:${tuples[1][1]}`\n\n    // ignore if this address if it's been observed before\n    if (this.observedAddressFilter.has(socketAddress)) {\n      return\n    }\n\n    this.observedAddressFilter.add(socketAddress)\n\n    addr = stripPeerId(addr, this.components.peerId)\n\n    // ignore observed address if it is an IP mapping\n    if (this.ipMappings.has(addr)) {\n      return\n    }\n\n    // ignore observed address if it is a DNS mapping\n    if (this.dnsMappings.has(addr)) {\n      return\n    }\n\n    this.observed.add(addr)\n  }\n\n  confirmObservedAddr (addr: Multiaddr, options?: ConfirmAddressOptions): void {\n    addr = stripPeerId(addr, this.components.peerId)\n    let startingConfidence = true\n\n    if (options?.type === 'observed' || this.observed.has(addr)) {\n      startingConfidence = this.observed.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n    }\n\n    if (options?.type === 'transport' || this.transportAddresses.has(addr)) {\n      startingConfidence = this.transportAddresses.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n    }\n\n    if (options?.type === 'dns-mapping' || this.dnsMappings.has(addr)) {\n      startingConfidence = this.dnsMappings.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n    }\n\n    if (options?.type === 'ip-mapping' || this.ipMappings.has(addr)) {\n      startingConfidence = this.ipMappings.confirm(addr, options?.ttl ?? this.addressVerificationTTL)\n    }\n\n    // only trigger the 'self:peer:update' event if our confidence in an address has changed\n    if (!startingConfidence) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  removeObservedAddr (addr: Multiaddr, options?: ConfirmAddressOptions): void {\n    addr = stripPeerId(addr, this.components.peerId)\n\n    let startingConfidence = false\n\n    if (this.observed.has(addr)) {\n      startingConfidence = this.observed.remove(addr)\n    }\n\n    if (this.transportAddresses.has(addr)) {\n      startingConfidence = this.transportAddresses.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n    }\n\n    if (this.dnsMappings.has(addr)) {\n      startingConfidence = this.dnsMappings.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n    }\n\n    if (this.ipMappings.has(addr)) {\n      startingConfidence = this.ipMappings.unconfirm(addr, options?.ttl ?? this.addressVerificationRetry)\n    }\n\n    // only trigger the 'self:peer:update' event if our confidence in an address has changed\n    if (startingConfidence) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  getAddresses (): Multiaddr[] {\n    const addresses = new Set<string>()\n\n    const multiaddrs = this.getAddressesWithMetadata()\n      .filter(addr => {\n        if (!addr.verified) {\n          return false\n        }\n\n        const maStr = addr.multiaddr.toString()\n\n        if (addresses.has(maStr)) {\n          return false\n        }\n\n        addresses.add(maStr)\n\n        return true\n      })\n      .map(address => address.multiaddr)\n\n    // filter addressees before returning\n    return this.announceFilter(\n      multiaddrs.map(str => {\n        const ma = multiaddr(str)\n\n        // do not append our peer id to a path multiaddr as it will become invalid\n        if (ma.protos().pop()?.path === true) {\n          return ma\n        }\n\n        if (ma.getPeerId() === this.components.peerId.toString()) {\n          return ma\n        }\n\n        return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`)\n      })\n    )\n  }\n\n  getAddressesWithMetadata (): NodeAddress[] {\n    const announceMultiaddrs = this.getAnnounceAddrs()\n\n    if (announceMultiaddrs.length > 0) {\n      return announceMultiaddrs.map(multiaddr => ({\n        multiaddr,\n        verified: true,\n        type: 'announce',\n        expires: Date.now() + this.addressVerificationTTL,\n        lastVerified: Date.now()\n      }))\n    }\n\n    let addresses: NodeAddress[] = []\n\n    // add transport addresses\n    addresses = addresses.concat(\n      this.components.transportManager.getAddrs()\n        .map(multiaddr => this.transportAddresses.get(multiaddr, this.addressVerificationTTL))\n    )\n\n    // add append announce addresses\n    addresses = addresses.concat(\n      this.getAppendAnnounceAddrs().map(multiaddr => ({\n        multiaddr,\n        verified: true,\n        type: 'announce',\n        expires: Date.now() + this.addressVerificationTTL,\n        lastVerified: Date.now()\n      }))\n    )\n\n    // add observed addresses\n    addresses = addresses.concat(\n      this.observed.getAll()\n    )\n\n    // add ip mapped addresses\n    addresses = addresses.concat(\n      this.ipMappings.getAll(addresses)\n    )\n\n    // add ip->domain mappings, must be done after IP mappings\n    addresses = addresses.concat(\n      this.dnsMappings.getAll(addresses)\n    )\n\n    return addresses\n  }\n\n  addDNSMapping (domain: string, addresses: string[]): void {\n    this.dnsMappings.add(domain, addresses)\n  }\n\n  removeDNSMapping (domain: string): void {\n    if (this.dnsMappings.remove(multiaddr(`/dns/${domain}`))) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n\n  addPublicAddressMapping (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    this.ipMappings.add(internalIp, internalPort, externalIp, externalPort, protocol)\n\n    // remove duplicate observed addresses\n    this.observed.removePrefixed(`/ip${isIPv4(externalIp) ? 4 : 6}/${externalIp}/${protocol}/${externalPort}`)\n  }\n\n  removePublicAddressMapping (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    if (this.ipMappings.remove(multiaddr(`/ip${isIPv4(externalIp) ? 4 : 6}/${externalIp}/${protocol}/${externalPort}`))) {\n      this._updatePeerStoreAddresses()\n    }\n  }\n}\n","import { isPrivateIp } from '@libp2p/utils/private-ip'\nimport { multiaddr, protocols } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr, StringTuple } from '@multiformats/multiaddr'\n\nconst MAX_DATE = 8_640_000_000_000_000\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface DNSMapping {\n  domain: string\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nconst CODEC_TLS = 0x01c0\nconst CODEC_SNI = 0x01c1\nconst CODEC_DNS = 0x35\nconst CODEC_DNS4 = 0x36\nconst CODEC_DNS6 = 0x37\nconst CODEC_DNSADDR = 0x38\n\nexport class DNSMappings {\n  private readonly log: Logger\n  private readonly mappings: Map<string, DNSMapping>\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:dns-mappings')\n    this.mappings = new Map()\n  }\n\n  has (ma: Multiaddr): boolean {\n    const host = this.findHost(ma)\n\n    for (const mapping of this.mappings.values()) {\n      if (mapping.domain === host) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  add (domain: string, addresses: string[]): void {\n    addresses.forEach(ip => {\n      this.log('add DNS mapping %s to %s', ip, domain)\n      // we are only confident if this is an local domain mapping, otherwise\n      // we will require external validation\n      const verified = isPrivateIp(ip) === true\n\n      this.mappings.set(ip, {\n        domain,\n        verified,\n        expires: verified ? MAX_DATE - Date.now() : 0,\n        lastVerified: verified ? MAX_DATE - Date.now() : undefined\n      })\n    })\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const host = this.findHost(ma)\n    let wasConfident = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('removing %s to %s DNS mapping %e', ip, mapping.domain, new Error('where'))\n        this.mappings.delete(ip)\n        wasConfident = wasConfident || mapping.verified\n      }\n    }\n\n    return wasConfident\n  }\n\n  getAll (addresses: NodeAddress[]): NodeAddress[] {\n    const dnsMappedAddresses: NodeAddress[] = []\n\n    for (let i = 0; i < addresses.length; i++) {\n      const address = addresses[i]\n      const tuples = address.multiaddr.stringTuples()\n      const host = tuples[0][1]\n\n      if (host == null) {\n        continue\n      }\n\n      for (const [ip, mapping] of this.mappings.entries()) {\n        if (host !== ip) {\n          continue\n        }\n\n        // insert SNI tuple after TLS tuple, if one is present\n        const mappedIp = this.maybeAddSNITuple(tuples, mapping.domain)\n\n        if (mappedIp) {\n          // remove the address and replace it with the version that includes\n          // the SNI tuple\n          addresses.splice(i, 1)\n          i--\n\n          dnsMappedAddresses.push({\n            multiaddr: multiaddr(`/${\n              tuples.map(tuple => {\n                return [\n                  protocols(tuple[0]).name,\n                  tuple[1]\n                ].join('/')\n              }).join('/')\n            }`),\n            verified: mapping.verified,\n            type: 'dns-mapping',\n            expires: mapping.expires,\n            lastVerified: mapping.lastVerified\n          })\n        }\n      }\n    }\n\n    return dnsMappedAddresses\n  }\n\n  private maybeAddSNITuple (tuples: StringTuple[], domain: string): boolean {\n    for (let j = 0; j < tuples.length; j++) {\n      if (tuples[j][0] === CODEC_TLS && tuples[j + 1]?.[0] !== CODEC_SNI) {\n        tuples.splice(j + 1, 0, [CODEC_SNI, domain])\n        return true\n      }\n    }\n\n    return false\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const host = this.findHost(ma)\n    let startingConfidence = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('marking %s to %s DNS mapping as verified', ip, mapping.domain)\n        startingConfidence = mapping.verified\n        mapping.verified = true\n        mapping.expires = Date.now() + ttl\n        mapping.lastVerified = Date.now()\n      }\n    }\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const host = this.findHost(ma)\n    let wasConfident = false\n\n    for (const [ip, mapping] of this.mappings.entries()) {\n      if (mapping.domain === host) {\n        this.log('removing verification of %s to %s DNS mapping', ip, mapping.domain)\n        wasConfident = wasConfident || mapping.verified\n        mapping.verified = false\n        mapping.expires = Date.now() + ttl\n      }\n    }\n\n    return wasConfident\n  }\n\n  private findHost (ma: Multiaddr): string | undefined {\n    for (const tuple of ma.stringTuples()) {\n      if (tuple[0] === CODEC_SNI) {\n        return tuple[1]\n      }\n\n      if (tuple[0] === CODEC_DNS || tuple[0] === CODEC_DNS4 || tuple[0] === CODEC_DNS6 || tuple[0] === CODEC_DNSADDR) {\n        return tuple[1]\n      }\n    }\n  }\n}\n","import { isIPv4 } from '@chainsafe/is-ip'\nimport { multiaddr, protocols } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface PublicAddressMapping {\n  internalIp: string\n  internalPort: number\n  externalIp: string\n  externalPort: number\n  externalFamily: 4 | 6\n  protocol: 'tcp' | 'udp'\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nconst CODEC_IP4 = 0x04\nconst CODEC_IP6 = 0x29\nconst CODEC_TCP = 0x06\nconst CODEC_UDP = 0x0111\n\nexport class IPMappings {\n  private readonly log: Logger\n  private readonly mappings: Map<string, PublicAddressMapping[]>\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:ip-mappings')\n    this.mappings = new Map()\n  }\n\n  has (ma: Multiaddr): boolean {\n    const tuples = ma.stringTuples()\n\n    for (const mappings of this.mappings.values()) {\n      for (const mapping of mappings) {\n        if (mapping.externalIp === tuples[0][1]) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  add (internalIp: string, internalPort: number, externalIp: string, externalPort: number = internalPort, protocol: 'tcp' | 'udp' = 'tcp'): void {\n    const key = `${internalIp}-${internalPort}-${protocol}`\n    const mappings = this.mappings.get(key) ?? []\n    const mapping: PublicAddressMapping = {\n      internalIp,\n      internalPort,\n      externalIp,\n      externalPort,\n      externalFamily: isIPv4(externalIp) ? 4 : 6,\n      protocol,\n      verified: false,\n      expires: 0\n    }\n    mappings.push(mapping)\n\n    this.mappings.set(key, mappings)\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1] ?? ''\n    const protocol = tuples[1][0] === CODEC_TCP ? 'tcp' : 'udp'\n    const port = parseInt(tuples[1][1] ?? '0')\n    let wasConfident = false\n\n    for (const [key, mappings] of this.mappings.entries()) {\n      for (let i = 0; i < mappings.length; i++) {\n        const mapping = mappings[i]\n\n        if (mapping.externalIp === host && mapping.externalPort === port && mapping.protocol === protocol) {\n          this.log('removing %s:%s to %s:%s %s IP mapping', mapping.externalIp, mapping.externalPort, host, port, protocol)\n\n          wasConfident = wasConfident || mapping.verified\n          mappings.splice(i, 1)\n          i--\n        }\n      }\n\n      if (mappings.length === 0) {\n        this.mappings.delete(key)\n      }\n    }\n\n    return wasConfident\n  }\n\n  getAll (addresses: NodeAddress[]): NodeAddress[] {\n    const ipMappedAddresses: NodeAddress[] = []\n\n    for (const { multiaddr: ma } of addresses) {\n      const tuples = ma.stringTuples()\n      let tuple: string | undefined\n\n      // see if the internal host/port/protocol tuple has been mapped externally\n      if ((tuples[0][0] === CODEC_IP4 || tuples[0][0] === CODEC_IP6) && tuples[1][0] === CODEC_TCP) {\n        tuple = `${tuples[0][1]}-${tuples[1][1]}-tcp`\n      } else if ((tuples[0][0] === CODEC_IP4 || tuples[0][0] === CODEC_IP6) && tuples[1][0] === CODEC_UDP) {\n        tuple = `${tuples[0][1]}-${tuples[1][1]}-udp`\n      }\n\n      if (tuple == null) {\n        continue\n      }\n\n      const mappings = this.mappings.get(tuple)\n\n      if (mappings == null) {\n        continue\n      }\n\n      for (const mapping of mappings) {\n        tuples[0][0] = mapping.externalFamily === 4 ? CODEC_IP4 : CODEC_IP6\n        tuples[0][1] = mapping.externalIp\n        tuples[1][1] = `${mapping.externalPort}`\n\n        ipMappedAddresses.push({\n          multiaddr: multiaddr(`/${\n            tuples.map(tuple => {\n              return [\n                protocols(tuple[0]).name,\n                tuple[1]\n              ].join('/')\n            }).join('/')\n          }`),\n          verified: mapping.verified,\n          type: 'ip-mapping',\n          expires: mapping.expires,\n          lastVerified: mapping.lastVerified\n        })\n      }\n    }\n\n    return ipMappedAddresses\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1]\n    let startingConfidence = false\n\n    for (const mappings of this.mappings.values()) {\n      for (const mapping of mappings) {\n        // eslint-disable-next-line max-depth\n        if (mapping.externalIp === host) {\n          this.log('marking %s to %s IP mapping as verified', mapping.internalIp, mapping.externalIp)\n          startingConfidence = mapping.verified\n          mapping.verified = true\n          mapping.expires = Date.now() + ttl\n          mapping.lastVerified = Date.now()\n        }\n      }\n    }\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const tuples = ma.stringTuples()\n    const host = tuples[0][1] ?? ''\n    const protocol = tuples[1][0] === CODEC_TCP ? 'tcp' : 'udp'\n    const port = parseInt(tuples[1][1] ?? '0')\n    let wasConfident = false\n\n    for (const mappings of this.mappings.values()) {\n      for (let i = 0; i < mappings.length; i++) {\n        const mapping = mappings[i]\n\n        if (mapping.externalIp === host && mapping.externalPort === port && mapping.protocol === protocol) {\n          this.log('removing verification of %s:%s to %s:%s %s IP mapping', mapping.externalIp, mapping.externalPort, host, port, protocol)\n\n          wasConfident = wasConfident || mapping.verified\n          mapping.verified = false\n          mapping.expires = Date.now() + ttl\n        }\n      }\n    }\n\n    return wasConfident\n  }\n}\n","import { isLinkLocal } from '@libp2p/utils/multiaddr/is-link-local'\nimport { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface ObservedAddressMetadata {\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nexport class ObservedAddresses {\n  private readonly log: Logger\n  private readonly addresses: Map<string, ObservedAddressMetadata>\n  private readonly maxObservedAddresses: number\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:observed-addresses')\n    this.addresses = new Map()\n    this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses\n  }\n\n  has (ma: Multiaddr): boolean {\n    return this.addresses.has(ma.toString())\n  }\n\n  removePrefixed (prefix: string): void {\n    for (const key of this.addresses.keys()) {\n      if (key.toString().startsWith(prefix)) {\n        this.addresses.delete(key)\n      }\n    }\n  }\n\n  add (ma: Multiaddr): void {\n    if (this.addresses.size === this.maxObservedAddresses) {\n      return\n    }\n\n    if (isPrivate(ma) || isLinkLocal(ma)) {\n      return\n    }\n\n    this.log('adding observed address %a', ma)\n    this.addresses.set(ma.toString(), {\n      verified: false,\n      expires: 0\n    })\n  }\n\n  getAll (): NodeAddress[] {\n    return Array.from(this.addresses)\n      .map(([ma, metadata]) => ({\n        multiaddr: multiaddr(ma),\n        verified: metadata.verified,\n        type: 'observed',\n        expires: metadata.expires,\n        lastVerified: metadata.lastVerified\n      }))\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const startingConfidence = this.addresses.get(ma.toString())?.verified ?? false\n\n    this.log('removing observed address %a', ma)\n    this.addresses.delete(ma.toString())\n\n    return startingConfidence\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const addrString = ma.toString()\n    const metadata = this.addresses.get(addrString) ?? {\n      verified: false,\n      expires: Date.now() + ttl,\n      lastVerified: Date.now()\n    }\n    const startingConfidence = metadata.verified\n    metadata.verified = true\n    metadata.lastVerified = Date.now()\n\n    this.log('marking observed address %a as verified', addrString)\n    this.addresses.set(addrString, metadata)\n\n    return startingConfidence\n  }\n}\n","import { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport type { AddressManagerComponents, AddressManagerInit } from './index.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { NodeAddress } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport const defaultValues = {\n  maxObservedAddresses: 10\n}\n\ninterface TransportAddressMetadata {\n  verified: boolean\n  expires: number\n  lastVerified?: number\n}\n\nexport class TransportAddresses {\n  private readonly log: Logger\n  private readonly addresses: Map<string, TransportAddressMetadata>\n  private readonly maxObservedAddresses: number\n\n  constructor (components: AddressManagerComponents, init: AddressManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:address-manager:observed-addresses')\n    this.addresses = new Map()\n    this.maxObservedAddresses = init.maxObservedAddresses ?? defaultValues.maxObservedAddresses\n  }\n\n  get (multiaddr: Multiaddr, ttl: number): NodeAddress {\n    if (isPrivate(multiaddr)) {\n      return {\n        multiaddr,\n        verified: true,\n        type: 'transport',\n        expires: Date.now() + ttl,\n        lastVerified: Date.now()\n      }\n    }\n\n    const key = this.toKey(multiaddr)\n    let metadata = this.addresses.get(key)\n\n    if (metadata == null) {\n      metadata = {\n        verified: false,\n        expires: 0\n      }\n\n      this.addresses.set(key, metadata)\n    }\n\n    return {\n      multiaddr,\n      verified: metadata.verified,\n      type: 'transport',\n      expires: metadata.expires,\n      lastVerified: metadata.lastVerified\n    }\n  }\n\n  has (ma: Multiaddr): boolean {\n    const key = this.toKey(ma)\n    return this.addresses.has(key)\n  }\n\n  remove (ma: Multiaddr): boolean {\n    const key = this.toKey(ma)\n    const startingConfidence = this.addresses.get(key)?.verified ?? false\n\n    this.log('removing observed address %a', ma)\n    this.addresses.delete(key)\n\n    return startingConfidence\n  }\n\n  confirm (ma: Multiaddr, ttl: number): boolean {\n    const key = this.toKey(ma)\n    const metadata = this.addresses.get(key) ?? {\n      verified: false,\n      expires: 0,\n      lastVerified: 0\n    }\n\n    const startingConfidence = metadata.verified\n\n    metadata.verified = true\n    metadata.expires = Date.now() + ttl\n    metadata.lastVerified = Date.now()\n\n    this.addresses.set(key, metadata)\n\n    return startingConfidence\n  }\n\n  unconfirm (ma: Multiaddr, ttl: number): boolean {\n    const key = this.toKey(ma)\n    const metadata = this.addresses.get(key) ?? {\n      verified: false,\n      expires: 0\n    }\n\n    const startingConfidence = metadata.verified\n\n    metadata.verified = false\n    metadata.expires = Date.now() + ttl\n\n    this.addresses.set(key, metadata)\n\n    return startingConfidence\n  }\n\n  private toKey (ma: Multiaddr): string {\n    const options = ma.toOptions()\n\n    return `${options.host}-${options.port}-${options.transport}`\n  }\n}\n","import { serviceCapabilities, serviceDependencies } from '@libp2p/interface'\nimport { isStartable, type Startable, type Libp2pEvents, type ComponentLogger, type NodeInfo, type ConnectionProtector, type ConnectionGater, type ContentRouting, type TypedEventTarget, type Metrics, type PeerId, type PeerRouting, type PeerStore, type PrivateKey, type Upgrader } from '@libp2p/interface'\nimport { defaultLogger } from '@libp2p/logger'\nimport { MissingServiceError, UnmetServiceDependenciesError } from './errors.js'\nimport type { AddressManager, ConnectionManager, RandomWalk, Registrar, TransportManager } from '@libp2p/interface-internal'\nimport type { DNS } from '@multiformats/dns'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface Components extends Record<string, any>, Startable {\n  peerId: PeerId\n  privateKey: PrivateKey\n  nodeInfo: NodeInfo\n  logger: ComponentLogger\n  events: TypedEventTarget<Libp2pEvents>\n  addressManager: AddressManager\n  peerStore: PeerStore\n  upgrader: Upgrader\n  randomWalk: RandomWalk\n  registrar: Registrar\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  contentRouting: ContentRouting\n  peerRouting: PeerRouting\n  datastore: Datastore\n  connectionProtector?: ConnectionProtector\n  metrics?: Metrics\n  dns?: DNS\n}\n\nexport interface ComponentsInit {\n  peerId?: PeerId\n  privateKey?: PrivateKey\n  nodeInfo?: NodeInfo\n  logger?: ComponentLogger\n  events?: TypedEventTarget<Libp2pEvents>\n  addressManager?: AddressManager\n  peerStore?: PeerStore\n  upgrader?: Upgrader\n  randomWalk?: RandomWalk\n  metrics?: Metrics\n  registrar?: Registrar\n  connectionManager?: ConnectionManager\n  transportManager?: TransportManager\n  connectionGater?: ConnectionGater\n  contentRouting?: ContentRouting\n  peerRouting?: PeerRouting\n  datastore?: Datastore\n  connectionProtector?: ConnectionProtector\n  dns?: DNS\n}\n\nclass DefaultComponents implements Startable {\n  public components: Record<string, any> = {}\n  private _started = false\n\n  constructor (init: ComponentsInit = {}) {\n    this.components = {}\n\n    for (const [key, value] of Object.entries(init)) {\n      this.components[key] = value\n    }\n\n    if (this.components.logger == null) {\n      this.components.logger = defaultLogger()\n    }\n  }\n\n  isStarted (): boolean {\n    return this._started\n  }\n\n  private async _invokeStartableMethod (methodName: 'beforeStart' | 'start' | 'afterStart' | 'beforeStop' | 'stop' | 'afterStop'): Promise<void> {\n    await Promise.all(\n      Object.values(this.components)\n        .filter(obj => isStartable(obj))\n        .map(async (startable: Startable) => {\n          await startable[methodName]?.()\n        })\n    )\n  }\n\n  async beforeStart (): Promise<void> {\n    await this._invokeStartableMethod('beforeStart')\n  }\n\n  async start (): Promise<void> {\n    await this._invokeStartableMethod('start')\n    this._started = true\n  }\n\n  async afterStart (): Promise<void> {\n    await this._invokeStartableMethod('afterStart')\n  }\n\n  async beforeStop (): Promise<void> {\n    await this._invokeStartableMethod('beforeStop')\n  }\n\n  async stop (): Promise<void> {\n    await this._invokeStartableMethod('stop')\n    this._started = false\n  }\n\n  async afterStop (): Promise<void> {\n    await this._invokeStartableMethod('afterStop')\n  }\n}\n\nconst OPTIONAL_SERVICES = [\n  'metrics',\n  'connectionProtector',\n  'dns'\n]\n\nconst NON_SERVICE_PROPERTIES = [\n  'components',\n  'isStarted',\n  'beforeStart',\n  'start',\n  'afterStart',\n  'beforeStop',\n  'stop',\n  'afterStop',\n  'then',\n  '_invokeStartableMethod'\n]\n\nexport function defaultComponents (init: ComponentsInit = {}): Components {\n  const components = new DefaultComponents(init)\n\n  const proxy = new Proxy(components, {\n    get (target, prop, receiver) {\n      if (typeof prop === 'string' && !NON_SERVICE_PROPERTIES.includes(prop)) {\n        const service = components.components[prop]\n\n        if (service == null && !OPTIONAL_SERVICES.includes(prop)) {\n          throw new MissingServiceError(`${prop} not set`)\n        }\n\n        return service\n      }\n\n      return Reflect.get(target, prop, receiver)\n    },\n\n    set (target, prop, value) {\n      if (typeof prop === 'string') {\n        components.components[prop] = value\n      } else {\n        Reflect.set(target, prop, value)\n      }\n\n      return true\n    }\n  })\n\n  // @ts-expect-error component keys are proxied\n  return proxy\n}\n\nexport function checkServiceDependencies (components: Components): void {\n  const serviceCapabilities: Record<string, ConstrainBoolean> = {}\n\n  for (const service of Object.values(components.components)) {\n    for (const capability of getServiceCapabilities(service)) {\n      serviceCapabilities[capability] = true\n    }\n  }\n\n  for (const service of Object.values(components.components)) {\n    for (const capability of getServiceDependencies(service)) {\n      if (serviceCapabilities[capability] !== true) {\n        throw new UnmetServiceDependenciesError(`Service \"${getServiceName(service)}\" required capability \"${capability}\" but it was not provided by any component, you may need to add additional configuration when creating your node.`)\n      }\n    }\n  }\n}\n\nfunction getServiceCapabilities (service: any): string[] {\n  if (Array.isArray(service?.[serviceCapabilities])) {\n    return service[serviceCapabilities]\n  }\n\n  return []\n}\n\nfunction getServiceDependencies (service: any): string[] {\n  if (Array.isArray(service?.[serviceDependencies])) {\n    return service[serviceDependencies]\n  }\n\n  return []\n}\n\nfunction getServiceName (service: any): string {\n  return service?.[Symbol.toStringTag] ?? service?.toString() ?? 'unknown'\n}\n","export enum messages {\n  NOT_STARTED_YET = 'The libp2p node is not started yet',\n  NOT_FOUND = 'Not found'\n}\n\nexport class MissingServiceError extends Error {\n  constructor (message = 'Missing service') {\n    super(message)\n    this.name = 'MissingServiceError'\n  }\n}\n\nexport class UnmetServiceDependenciesError extends Error {\n  constructor (message = 'Unmet service dependencies') {\n    super(message)\n    this.name = 'UnmetServiceDependenciesError'\n  }\n}\n\nexport class NoContentRoutersError extends Error {\n  constructor (message = 'No content routers available') {\n    super(message)\n    this.name = 'NoContentRoutersError'\n  }\n}\n\nexport class NoPeerRoutersError extends Error {\n  constructor (message = 'No peer routers available') {\n    super(message)\n    this.name = 'NoPeerRoutersError'\n  }\n}\n\nexport class QueriedForSelfError extends Error {\n  constructor (message = 'Should not try to find self') {\n    super(message)\n    this.name = 'QueriedForSelfError'\n  }\n}\n\nexport class UnhandledProtocolError extends Error {\n  constructor (message = 'Unhandled protocol error') {\n    super(message)\n    this.name = 'UnhandledProtocolError'\n  }\n}\n\nexport class DuplicateProtocolHandlerError extends Error {\n  constructor (message = 'Duplicate protocol handler error') {\n    super(message)\n    this.name = 'DuplicateProtocolHandlerError'\n  }\n}\n\nexport class DialDeniedError extends Error {\n  constructor (message = 'Dial denied error') {\n    super(message)\n    this.name = 'DialDeniedError'\n  }\n}\n\nexport class NoValidAddressesError extends Error {\n  constructor (message = 'No valid addresses') {\n    super(message)\n    this.name = 'NoValidAddressesError'\n  }\n}\n\nexport class ConnectionInterceptedError extends Error {\n  constructor (message = 'Connection intercepted') {\n    super(message)\n    this.name = 'ConnectionInterceptedError'\n  }\n}\n\nexport class ConnectionDeniedError extends Error {\n  constructor (message = 'Connection denied') {\n    super(message)\n    this.name = 'ConnectionDeniedError'\n  }\n}\n\nexport class MuxerUnavailableError extends Error {\n  constructor (message = 'Stream is not multiplexed') {\n    super(message)\n    this.name = 'MuxerUnavailableError'\n  }\n}\n\nexport class EncryptionFailedError extends Error {\n  constructor (message = 'Encryption failed') {\n    super(message)\n    this.name = 'EncryptionFailedError'\n  }\n}\n\nexport class TransportUnavailableError extends Error {\n  constructor (message = 'Transport unavailable') {\n    super(message)\n    this.name = 'TransportUnavailableError'\n  }\n}\n","import type { ConnectionGater } from '@libp2p/interface'\n\n/**\n * Returns a default connection gater implementation that allows everything\n */\nexport function connectionGater (gater: ConnectionGater = {}): ConnectionGater {\n  return {\n    denyDialPeer: async () => false,\n    denyDialMultiaddr: async () => false,\n    denyInboundConnection: async () => false,\n    denyOutboundConnection: async () => false,\n    denyInboundEncryptedConnection: async () => false,\n    denyOutboundEncryptedConnection: async () => false,\n    denyInboundUpgradedConnection: async () => false,\n    denyOutboundUpgradedConnection: async () => false,\n    filterMultiaddrForPeer: async () => true,\n    ...gater\n  }\n}\n","import { ConnectionClosedError, InvalidMultiaddrError, InvalidParametersError, InvalidPeerIdError, NotStartedError, start, stop } from '@libp2p/interface'\nimport { PeerMap } from '@libp2p/peer-collections'\nimport { RateLimiter } from '@libp2p/utils/rate-limiter'\nimport { type Multiaddr, type Resolver, multiaddr } from '@multiformats/multiaddr'\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\nimport { CustomProgressEvent } from 'progress-events'\nimport { getPeerAddress } from '../get-peer.js'\nimport { ConnectionPruner } from './connection-pruner.js'\nimport { DIAL_TIMEOUT, INBOUND_CONNECTION_THRESHOLD, MAX_CONNECTIONS, MAX_DIAL_QUEUE_LENGTH, MAX_INCOMING_PENDING_CONNECTIONS, MAX_PARALLEL_DIALS, MAX_PEER_ADDRS_TO_DIAL } from './constants.js'\nimport { DialQueue } from './dial-queue.js'\nimport { ReconnectQueue } from './reconnect-queue.js'\nimport { multiaddrToIpNet } from './utils.js'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { PendingDial, AddressSorter, Libp2pEvents, AbortOptions, ComponentLogger, Logger, Connection, MultiaddrConnection, ConnectionGater, TypedEventTarget, Metrics, PeerId, PeerStore, Startable, PendingDialStatus, PeerRouting, IsDialableOptions } from '@libp2p/interface'\nimport type { ConnectionManager, OpenConnectionOptions, TransportManager } from '@libp2p/interface-internal'\nimport type { JobStatus } from '@libp2p/utils/queue'\n\nexport const DEFAULT_DIAL_PRIORITY = 50\n\nexport interface ConnectionManagerInit {\n  /**\n   * The maximum number of connections libp2p is willing to have before it\n   * starts pruning connections to reduce resource usage.\n   *\n   * @default 300/100\n   */\n  maxConnections?: number\n\n  /**\n   * Sort the known addresses of a peer before trying to dial, By default public\n   * addresses will be dialled before private (e.g. loopback or LAN) addresses.\n   */\n  addressSorter?: AddressSorter\n\n  /**\n   * The maximum number of dials across all peers to execute in parallel.\n   *\n   * @default 100/50\n   */\n  maxParallelDials?: number\n\n  /**\n   * The maximum size the dial queue is allowed to grow to. Promises returned\n   * when dialing peers after this limit is reached will not resolve until the\n   * queue size falls beneath this size.\n   *\n   * @default 500\n   */\n  maxDialQueueLength?: number\n\n  /**\n   * Maximum number of addresses allowed for a given peer before giving up\n   *\n   * @default 25\n   */\n  maxPeerAddrsToDial?: number\n\n  /**\n   * How long a dial attempt is allowed to take, including DNS resolution\n   * of the multiaddr, opening a socket and upgrading it to a Connection.\n   *\n   * @default 5000\n   */\n  dialTimeout?: number\n\n  /**\n   * When a new incoming connection is opened, the upgrade process (e.g.\n   * protect, encrypt, multiplex etc) must complete within this number of ms.\n   *\n   * @default 3000\n   */\n  inboundUpgradeTimeout?: number\n\n  /**\n   * When a new outbound connection is opened, the upgrade process (e.g.\n   * protect, encrypt, multiplex etc) must complete within this number of ms.\n   *\n   * @default 3000\n   */\n  outboundUpgradeTimeout?: number\n\n  /**\n   * Protocol negotiation must complete within this number of ms\n   *\n   * @default 2000\n   */\n  protocolNegotiationTimeout?: number\n\n  /**\n   * Multiaddr resolvers to use when dialling\n   */\n  resolvers?: Record<string, Resolver>\n\n  /**\n   * A list of multiaddrs that will always be allowed (except if they are in the\n   * deny list) to open connections to this node even if we've reached\n   * maxConnections\n   */\n  allow?: string[]\n\n  /**\n   * A list of multiaddrs that will never be allowed to open connections to\n   * this node under any circumstances\n   */\n  deny?: string[]\n\n  /**\n   * If more than this many connections are opened per second by a single\n   * host, reject subsequent connections.\n   *\n   * @default 5\n   */\n  inboundConnectionThreshold?: number\n\n  /**\n   * The maximum number of parallel incoming connections allowed that have yet\n   * to complete the connection upgrade - e.g. choosing connection encryption,\n   * muxer, etc.\n   *\n   * @default 10\n   */\n  maxIncomingPendingConnections?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, attempt to redial them\n   * this many times.\n   *\n   * @default 5\n   */\n  reconnectRetries?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, wait this long between\n   * each retry. Note this will be multiplied by `reconnectFactor` to create an\n   * increasing retry backoff.\n   *\n   * @default 1000\n   */\n  reconnectRetryInterval?: number\n\n  /**\n   * When a peer tagged with `KEEP_ALIVE` disconnects, apply this multiplication\n   * factor to the time interval between each retry.\n   *\n   * @default 2\n   */\n  reconnectBackoffFactor?: number\n\n  /**\n   * When a peers tagged with `KEEP_ALIVE` disconnect, reconnect to this many at\n   * once.\n   *\n   * @default 5\n   */\n  maxParallelReconnects?: number\n}\n\nconst defaultOptions = {\n  maxConnections: MAX_CONNECTIONS,\n  inboundConnectionThreshold: INBOUND_CONNECTION_THRESHOLD,\n  maxIncomingPendingConnections: MAX_INCOMING_PENDING_CONNECTIONS\n}\n\nexport interface DefaultConnectionManagerComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\n/**\n * Responsible for managing known connections.\n */\nexport class DefaultConnectionManager implements ConnectionManager, Startable {\n  private started: boolean\n  private readonly connections: PeerMap<Connection[]>\n  private readonly allow: IpNet[]\n  private readonly deny: IpNet[]\n  private readonly maxIncomingPendingConnections: number\n  private incomingPendingConnections: number\n  private outboundPendingConnections: number\n  private readonly maxConnections: number\n\n  public readonly dialQueue: DialQueue\n  public readonly reconnectQueue: ReconnectQueue\n  public readonly connectionPruner: ConnectionPruner\n  private readonly inboundConnectionRateLimiter: RateLimiter\n  private readonly peerStore: PeerStore\n  private readonly metrics?: Metrics\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly log: Logger\n  private readonly peerId: PeerId\n\n  constructor (components: DefaultConnectionManagerComponents, init: ConnectionManagerInit = {}) {\n    this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections\n\n    if (this.maxConnections < 1) {\n      throw new InvalidParametersError('Connection Manager maxConnections must be greater than 0')\n    }\n\n    /**\n     * Map of connections per peer\n     */\n    this.connections = new PeerMap()\n\n    this.started = false\n    this.peerId = components.peerId\n    this.peerStore = components.peerStore\n    this.metrics = components.metrics\n    this.events = components.events\n    this.log = components.logger.forComponent('libp2p:connection-manager')\n\n    this.onConnect = this.onConnect.bind(this)\n    this.onDisconnect = this.onDisconnect.bind(this)\n\n    // allow/deny lists\n    this.allow = (init.allow ?? []).map(str => multiaddrToIpNet(str))\n    this.deny = (init.deny ?? []).map(str => multiaddrToIpNet(str))\n\n    this.incomingPendingConnections = 0\n    this.maxIncomingPendingConnections = init.maxIncomingPendingConnections ?? defaultOptions.maxIncomingPendingConnections\n    this.outboundPendingConnections = 0\n\n    // controls individual peers trying to dial us too quickly\n    this.inboundConnectionRateLimiter = new RateLimiter({\n      points: init.inboundConnectionThreshold ?? defaultOptions.inboundConnectionThreshold,\n      duration: 1\n    })\n\n    // controls what happens when we have too many connections\n    this.connectionPruner = new ConnectionPruner({\n      connectionManager: this,\n      peerStore: components.peerStore,\n      events: components.events,\n      logger: components.logger\n    }, {\n      maxConnections: this.maxConnections,\n      allow: init.allow?.map(a => multiaddr(a))\n    })\n\n    this.dialQueue = new DialQueue(components, {\n      addressSorter: init.addressSorter,\n      maxParallelDials: init.maxParallelDials ?? MAX_PARALLEL_DIALS,\n      maxDialQueueLength: init.maxDialQueueLength ?? MAX_DIAL_QUEUE_LENGTH,\n      maxPeerAddrsToDial: init.maxPeerAddrsToDial ?? MAX_PEER_ADDRS_TO_DIAL,\n      dialTimeout: init.dialTimeout ?? DIAL_TIMEOUT,\n      resolvers: init.resolvers ?? {\n        dnsaddr: dnsaddrResolver\n      },\n      connections: this.connections\n    })\n\n    this.reconnectQueue = new ReconnectQueue({\n      events: components.events,\n      peerStore: components.peerStore,\n      logger: components.logger,\n      connectionManager: this\n    }, {\n      retries: init.reconnectRetries,\n      retryInterval: init.reconnectRetryInterval,\n      backoffFactor: init.reconnectBackoffFactor,\n      maxParallelReconnects: init.maxParallelReconnects\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/connection-manager'\n\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n  async start (): Promise<void> {\n    // track inbound/outbound connections\n    this.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n      calculate: () => {\n        const metric = {\n          inbound: 0,\n          'inbound pending': this.incomingPendingConnections,\n          outbound: 0,\n          'outbound pending': this.outboundPendingConnections\n        }\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            metric[conn.direction]++\n          }\n        }\n\n        return metric\n      }\n    })\n\n    // track total number of streams per protocol\n    this.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n      label: 'protocol',\n      calculate: () => {\n        const metric: Record<string, number> = {}\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            for (const stream of conn.streams) {\n              const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`\n\n              metric[key] = (metric[key] ?? 0) + 1\n            }\n          }\n        }\n\n        return metric\n      }\n    })\n\n    // track 90th percentile of streams per protocol\n    this.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n      label: 'protocol',\n      calculate: () => {\n        const allStreams: Record<string, number[]> = {}\n\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            const streams: Record<string, number> = {}\n\n            for (const stream of conn.streams) {\n              const key = `${stream.direction} ${stream.protocol ?? 'unnegotiated'}`\n\n              streams[key] = (streams[key] ?? 0) + 1\n            }\n\n            for (const [protocol, count] of Object.entries(streams)) {\n              allStreams[protocol] = allStreams[protocol] ?? []\n              allStreams[protocol].push(count)\n            }\n          }\n        }\n\n        const metric: Record<string, number> = {}\n\n        for (let [protocol, counts] of Object.entries(allStreams)) {\n          counts = counts.sort((a, b) => a - b)\n\n          const index = Math.floor(counts.length * 0.9)\n          metric[protocol] = counts[index]\n        }\n\n        return metric\n      }\n    })\n\n    this.events.addEventListener('connection:open', this.onConnect)\n    this.events.addEventListener('connection:close', this.onDisconnect)\n\n    await start(\n      this.dialQueue,\n      this.reconnectQueue,\n      this.connectionPruner\n    )\n\n    this.started = true\n    this.log('started')\n  }\n\n  /**\n   * Stops the Connection Manager\n   */\n  async stop (): Promise<void> {\n    this.events.removeEventListener('connection:open', this.onConnect)\n    this.events.removeEventListener('connection:close', this.onDisconnect)\n\n    await stop(\n      this.reconnectQueue,\n      this.dialQueue,\n      this.connectionPruner\n    )\n\n    // Close all connections we're tracking\n    const tasks: Array<Promise<void>> = []\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push((async () => {\n          try {\n            await connection.close()\n          } catch (err) {\n            this.log.error(err)\n          }\n        })())\n      }\n    }\n\n    this.log('closing %d connections', tasks.length)\n    await Promise.all(tasks)\n    this.connections.clear()\n\n    this.log('stopped')\n  }\n\n  getMaxConnections (): number {\n    return this.maxConnections\n  }\n\n  onConnect (evt: CustomEvent<Connection>): void {\n    void this._onConnect(evt).catch(err => {\n      this.log.error(err)\n    })\n  }\n\n  /**\n   * Tracks the incoming connection and check the connection limit\n   */\n  async _onConnect (evt: CustomEvent<Connection>): Promise<void> {\n    const { detail: connection } = evt\n\n    if (!this.started) {\n      // This can happen when we are in the process of shutting down the node\n      await connection.close()\n      return\n    }\n\n    if (connection.status !== 'open') {\n      // this can happen when the remote closes the connection immediately after\n      // opening\n      return\n    }\n\n    const peerId = connection.remotePeer\n    const isNewPeer = !this.connections.has(peerId)\n    const storedConns = this.connections.get(peerId) ?? []\n    storedConns.push(connection)\n\n    this.connections.set(peerId, storedConns)\n\n    // only need to store RSA public keys, all other types are embedded in the peer id\n    if (peerId.publicKey != null && peerId.type === 'RSA') {\n      await this.peerStore.patch(peerId, {\n        publicKey: peerId.publicKey\n      })\n    }\n\n    if (isNewPeer) {\n      this.events.safeDispatchEvent('peer:connect', { detail: connection.remotePeer })\n    }\n  }\n\n  /**\n   * Removes the connection from tracking\n   */\n  onDisconnect (evt: CustomEvent<Connection>): void {\n    const { detail: connection } = evt\n    const peerId = connection.remotePeer\n    const peerConns = this.connections.get(peerId) ?? []\n\n    // remove closed connection\n    const filteredPeerConns = peerConns.filter(conn => conn.id !== connection.id)\n\n    // update peer connections\n    this.connections.set(peerId, filteredPeerConns)\n\n    if (filteredPeerConns.length === 0) {\n      // trigger disconnect event if no connections remain\n      this.log('onDisconnect remove all connections for peer %p', peerId)\n      this.connections.delete(peerId)\n\n      // broadcast disconnect event\n      this.events.safeDispatchEvent('peer:disconnect', { detail: connection.remotePeer })\n    }\n  }\n\n  getConnections (peerId?: PeerId): Connection[] {\n    if (peerId != null) {\n      return this.connections.get(peerId) ?? []\n    }\n\n    let conns: Connection[] = []\n\n    for (const c of this.connections.values()) {\n      conns = conns.concat(c)\n    }\n\n    return conns\n  }\n\n  getConnectionsMap (): PeerMap<Connection[]> {\n    return this.connections\n  }\n\n  async openConnection (peerIdOrMultiaddr: PeerId | Multiaddr | Multiaddr[], options: OpenConnectionOptions = {}): Promise<Connection> {\n    if (!this.started) {\n      throw new NotStartedError('Not started')\n    }\n\n    this.outboundPendingConnections++\n\n    try {\n      options.signal?.throwIfAborted()\n\n      const { peerId } = getPeerAddress(peerIdOrMultiaddr)\n\n      if (this.peerId.equals(peerId)) {\n        throw new InvalidPeerIdError('Can not dial self')\n      }\n\n      if (peerId != null && options.force !== true) {\n        this.log('dial %p', peerId)\n        const existingConnection = this.getConnections(peerId)\n          .find(conn => conn.limits == null)\n\n        if (existingConnection != null) {\n          this.log('had an existing non-limited connection to %p', peerId)\n\n          options.onProgress?.(new CustomProgressEvent('dial-queue:already-connected'))\n          return existingConnection\n        }\n      }\n\n      const connection = await this.dialQueue.dial(peerIdOrMultiaddr, {\n        ...options,\n        priority: options.priority ?? DEFAULT_DIAL_PRIORITY\n      })\n\n      if (connection.status !== 'open') {\n        throw new ConnectionClosedError('Remote closed connection during opening')\n      }\n\n      let peerConnections = this.connections.get(connection.remotePeer)\n\n      if (peerConnections == null) {\n        peerConnections = []\n        this.connections.set(connection.remotePeer, peerConnections)\n      }\n\n      // we get notified of connections via the Upgrader emitting \"connection\"\n      // events, double check we aren't already tracking this connection before\n      // storing it\n      let trackedConnection = false\n\n      for (const conn of peerConnections) {\n        if (conn.id === connection.id) {\n          trackedConnection = true\n        }\n\n        // make sure we don't already have a connection to this multiaddr\n        if (options.force !== true && conn.id !== connection.id && conn.remoteAddr.equals(connection.remoteAddr)) {\n          connection.abort(new InvalidMultiaddrError('Duplicate multiaddr connection'))\n\n          // return the existing connection\n          return conn\n        }\n      }\n\n      if (!trackedConnection) {\n        peerConnections.push(connection)\n      }\n\n      return connection\n    } finally {\n      this.outboundPendingConnections--\n    }\n  }\n\n  async closeConnections (peerId: PeerId, options: AbortOptions = {}): Promise<void> {\n    const connections = this.connections.get(peerId) ?? []\n\n    await Promise.all(\n      connections.map(async connection => {\n        try {\n          await connection.close(options)\n        } catch (err: any) {\n          connection.abort(err)\n        }\n      })\n    )\n  }\n\n  async acceptIncomingConnection (maConn: MultiaddrConnection): Promise<boolean> {\n    // check deny list\n    const denyConnection = this.deny.some(ma => {\n      return ma.contains(maConn.remoteAddr.nodeAddress().address)\n    })\n\n    if (denyConnection) {\n      this.log('connection from %a refused - connection remote address was in deny list', maConn.remoteAddr)\n      return false\n    }\n\n    // check allow list\n    const allowConnection = this.allow.some(ipNet => {\n      return ipNet.contains(maConn.remoteAddr.nodeAddress().address)\n    })\n\n    if (allowConnection) {\n      this.incomingPendingConnections++\n\n      return true\n    }\n\n    // check pending connections\n    if (this.incomingPendingConnections === this.maxIncomingPendingConnections) {\n      this.log('connection from %a refused - incomingPendingConnections exceeded by host', maConn.remoteAddr)\n      return false\n    }\n\n    if (maConn.remoteAddr.isThinWaistAddress()) {\n      const host = maConn.remoteAddr.nodeAddress().address\n\n      try {\n        await this.inboundConnectionRateLimiter.consume(host, 1)\n      } catch {\n        this.log('connection from %a refused - inboundConnectionThreshold exceeded by host %s', maConn.remoteAddr, host)\n        return false\n      }\n    }\n\n    if (this.getConnections().length < this.maxConnections) {\n      this.incomingPendingConnections++\n\n      return true\n    }\n\n    this.log('connection from %a refused - maxConnections exceeded', maConn.remoteAddr)\n    return false\n  }\n\n  afterUpgradeInbound (): void {\n    this.incomingPendingConnections--\n  }\n\n  getDialQueue (): PendingDial[] {\n    const statusMap: Record<JobStatus, PendingDialStatus> = {\n      queued: 'queued',\n      running: 'active',\n      errored: 'error',\n      complete: 'success'\n    }\n\n    return this.dialQueue.queue.queue.map(job => {\n      return {\n        id: job.id,\n        status: statusMap[job.status],\n        peerId: job.options.peerId,\n        multiaddrs: [...job.options.multiaddrs].map(ma => multiaddr(ma))\n      }\n    })\n  }\n\n  async isDialable (multiaddr: Multiaddr | Multiaddr[], options: IsDialableOptions = {}): Promise<boolean> {\n    return this.dialQueue.isDialable(multiaddr, options)\n  }\n}\n","import { InvalidMultiaddrError, InvalidParametersError, isPeerId } from '@libp2p/interface'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport type { PeerId } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface PeerAddress {\n  peerId?: PeerId\n  multiaddrs: Multiaddr[]\n}\n\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr or an array of Multiaddrs\n */\nexport function getPeerAddress (peer: PeerId | Multiaddr | Multiaddr[]): PeerAddress {\n  if (isPeerId(peer)) {\n    return { peerId: peer, multiaddrs: [] }\n  }\n\n  if (!Array.isArray(peer)) {\n    peer = [peer]\n  }\n\n  let peerId: PeerId | undefined\n\n  if (peer.length > 0) {\n    const peerIdStr = peer[0].getPeerId()\n    peerId = peerIdStr == null ? undefined : peerIdFromString(peerIdStr)\n\n    // ensure PeerId is either not set or is consistent\n    peer.forEach(ma => {\n      if (!isMultiaddr(ma)) {\n        throw new InvalidMultiaddrError('Invalid multiaddr')\n      }\n\n      const maPeerIdStr = ma.getPeerId()\n\n      if (maPeerIdStr == null) {\n        if (peerId != null) {\n          throw new InvalidParametersError('Multiaddrs must all have the same peer id or have no peer id')\n        }\n      } else {\n        const maPeerId = peerIdFromString(maPeerIdStr)\n\n        if (peerId?.equals(maPeerId) !== true) {\n          throw new InvalidParametersError('Multiaddrs must all have the same peer id or have no peer id')\n        }\n      }\n    })\n  }\n\n  return {\n    peerId,\n    multiaddrs: peer\n  }\n}\n","import { PeerMap } from '@libp2p/peer-collections'\nimport { safelyCloseConnectionIfUnused } from '@libp2p/utils/close'\nimport { MAX_CONNECTIONS } from './constants.js'\nimport { multiaddrToIpNet } from './utils.js'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { Libp2pEvents, Logger, ComponentLogger, TypedEventTarget, PeerStore, Connection } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\ninterface ConnectionPrunerInit {\n  maxConnections?: number\n  allow?: Multiaddr[]\n}\n\ninterface ConnectionPrunerComponents {\n  connectionManager: ConnectionManager\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\nconst defaultOptions = {\n  maxConnections: MAX_CONNECTIONS,\n  allow: []\n}\n\n/**\n * If we go over the max connections limit, choose some connections to close\n */\nexport class ConnectionPruner {\n  private readonly maxConnections: number\n  private readonly connectionManager: ConnectionManager\n  private readonly peerStore: PeerStore\n  private readonly allow: IpNet[]\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly log: Logger\n\n  constructor (components: ConnectionPrunerComponents, init: ConnectionPrunerInit = {}) {\n    this.maxConnections = init.maxConnections ?? defaultOptions.maxConnections\n    this.allow = (init.allow ?? []).map(ma => multiaddrToIpNet(ma))\n    this.connectionManager = components.connectionManager\n    this.peerStore = components.peerStore\n    this.events = components.events\n    this.log = components.logger.forComponent('libp2p:connection-manager:connection-pruner')\n    this.maybePruneConnections = this.maybePruneConnections.bind(this)\n  }\n\n  start (): void {\n    this.events.addEventListener('connection:open', this.maybePruneConnections)\n  }\n\n  stop (): void {\n    this.events.removeEventListener('connection:open', this.maybePruneConnections)\n  }\n\n  maybePruneConnections (): void {\n    this._maybePruneConnections()\n      .catch(err => {\n        this.log.error('error while pruning connections %e', err)\n      })\n  }\n\n  /**\n   * If we have more connections than our maximum, select some excess connections\n   * to prune based on peer value\n   */\n  private async _maybePruneConnections (): Promise<void> {\n    const connections = this.connectionManager.getConnections()\n    const numConnections = connections.length\n\n    this.log('checking max connections limit %d/%d', numConnections, this.maxConnections)\n\n    if (numConnections <= this.maxConnections) {\n      return\n    }\n\n    const peerValues = new PeerMap<number>()\n\n    // work out peer values\n    for (const connection of connections) {\n      const remotePeer = connection.remotePeer\n\n      if (peerValues.has(remotePeer)) {\n        continue\n      }\n\n      peerValues.set(remotePeer, 0)\n\n      try {\n        const peer = await this.peerStore.get(remotePeer)\n\n        // sum all tag values\n        peerValues.set(remotePeer, [...peer.tags.values()].reduce((acc, curr) => {\n          return acc + curr.value\n        }, 0))\n      } catch (err: any) {\n        if (err.name !== 'NotFoundError') {\n          this.log.error('error loading peer tags', err)\n        }\n      }\n    }\n\n    const sortedConnections = this.sortConnections(connections, peerValues)\n\n    // close some connections\n    const toPrune = Math.max(numConnections - this.maxConnections, 0)\n    const toClose = []\n\n    for (const connection of sortedConnections) {\n      this.log('too many connections open - closing a connection to %p', connection.remotePeer)\n      // check allow list\n      const connectionInAllowList = this.allow.some((ipNet) => {\n        return ipNet.contains(connection.remoteAddr.nodeAddress().address)\n      })\n\n      // Connections in the allow list should be excluded from pruning\n      if (!connectionInAllowList) {\n        toClose.push(connection)\n      }\n\n      if (toClose.length === toPrune) {\n        break\n      }\n    }\n\n    // close connections\n    await Promise.all(\n      toClose.map(async connection => {\n        await safelyCloseConnectionIfUnused(connection, {\n          signal: AbortSignal.timeout(1000)\n        })\n      })\n    )\n\n    // despatch prune event\n    this.events.safeDispatchEvent('connection:prune', { detail: toClose })\n  }\n\n  sortConnections (connections: Connection[], peerValues: PeerMap<number>): Connection[] {\n    return connections\n      // sort by connection age, newest to oldest\n      .sort((a, b) => {\n        const connectionALifespan = a.timeline.open\n        const connectionBLifespan = b.timeline.open\n\n        if (connectionALifespan < connectionBLifespan) {\n          return 1\n        }\n\n        if (connectionALifespan > connectionBLifespan) {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by direction, incoming first then outgoing\n      .sort((a, b) => {\n        if (a.direction === 'outbound' && b.direction === 'inbound') {\n          return 1\n        }\n\n        if (a.direction === 'inbound' && b.direction === 'outbound') {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by number of streams, lowest to highest\n      .sort((a, b) => {\n        if (a.streams.length > b.streams.length) {\n          return 1\n        }\n\n        if (a.streams.length < b.streams.length) {\n          return -1\n        }\n\n        return 0\n      })\n      // sort by tag value, lowest to highest\n      .sort((a, b) => {\n        const peerAValue = peerValues.get(a.remotePeer) ?? 0\n        const peerBValue = peerValues.get(b.remotePeer) ?? 0\n\n        if (peerAValue > peerBValue) {\n          return 1\n        }\n\n        if (peerAValue < peerBValue) {\n          return -1\n        }\n\n        return 0\n      })\n  }\n}\n","/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#dialTimeout\n */\nexport const DIAL_TIMEOUT = 5e3\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#upgradeTimeout\n */\nexport const UPGRADE_TIMEOUT = 3e3\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#protocolNegotiationTimeout\n */\nexport const PROTOCOL_NEGOTIATION_TIMEOUT = 2e3\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxPeerAddrsToDial\n */\nexport const MAX_PEER_ADDRS_TO_DIAL = 25\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#inboundConnectionThreshold\n */\nexport const INBOUND_CONNECTION_THRESHOLD = 5\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxIncomingPendingConnections\n */\nexport const MAX_INCOMING_PENDING_CONNECTIONS = 10\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelReconnects\n */\nexport const MAX_PARALLEL_RECONNECTS = 5\n\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempt failed with the timestamp\n * stored as a string.\n *\n * Used to insure we do not endlessly try to auto dial peers we have recently\n * failed to dial.\n */\nexport const LAST_DIAL_FAILURE_KEY = 'last-dial-failure'\n\n/**\n * Store as part of the peer store metadata for a given peer, the value for this\n * key is a timestamp of the last time a dial attempt succeeded with the\n * timestamp stored as a string.\n */\nexport const LAST_DIAL_SUCCESS_KEY = 'last-dial-success'\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxDialQueueLength\n */\nexport const MAX_DIAL_QUEUE_LENGTH = 500\n","export * from './constants.defaults.js'\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxConnections\n */\nexport const MAX_CONNECTIONS = 300\n\n/**\n * @see https://libp2p.github.io/js-libp2p/interfaces/index._internal_.ConnectionManagerConfig.html#maxParallelDials\n */\nexport const MAX_PARALLEL_DIALS = 100\n","import { multiaddr, resolvers, type Multiaddr, type ResolveOptions } from '@multiformats/multiaddr'\nimport { convertToIpNet } from '@multiformats/multiaddr/convert'\nimport type { IpNet } from '@chainsafe/netmask'\nimport type { LoggerOptions } from '@libp2p/interface'\n\n/**\n * Recursively resolve DNSADDR multiaddrs\n */\nexport async function resolveMultiaddrs (ma: Multiaddr, options: ResolveOptions & LoggerOptions): Promise<Multiaddr[]> {\n  // check multiaddr resolvers\n  let resolvable = false\n\n  for (const key of resolvers.keys()) {\n    resolvable = ma.protoNames().includes(key)\n\n    if (resolvable) {\n      break\n    }\n  }\n\n  // return multiaddr if it is not resolvable\n  if (!resolvable) {\n    return [ma]\n  }\n\n  const output = await ma.resolve(options)\n\n  options.log('resolved %s to', ma, output.map(ma => ma.toString()))\n\n  return output\n}\n\n/**\n * Converts a multiaddr string or object to an IpNet object.\n * If the multiaddr doesn't include /ipcidr, it will encapsulate with the appropriate CIDR:\n * - /ipcidr/32 for IPv4\n * - /ipcidr/128 for IPv6\n *\n * @param {string | Multiaddr} ma - The multiaddr string or object to convert.\n * @returns {IpNet} The converted IpNet object.\n * @throws {Error} Throws an error if the multiaddr is not valid.\n */\nexport function multiaddrToIpNet (ma: string | Multiaddr): IpNet {\n  try {\n    let parsedMa: Multiaddr\n    if (typeof ma === 'string') {\n      parsedMa = multiaddr(ma)\n    } else {\n      parsedMa = ma\n    }\n\n    // Check if /ipcidr is already present\n    if (!parsedMa.protoNames().includes('ipcidr')) {\n      const isIPv6 = parsedMa.protoNames().includes('ip6')\n      const cidr = isIPv6 ? '/ipcidr/128' : '/ipcidr/32'\n      parsedMa = parsedMa.encapsulate(cidr)\n    }\n\n    return convertToIpNet(parsedMa)\n  } catch (error) {\n    throw new Error(`Can't convert to IpNet, Invalid multiaddr format: ${ma}`)\n  }\n}\n","/* eslint-disable max-depth */\nimport { TimeoutError, DialError, setMaxListeners, AbortError } from '@libp2p/interface'\nimport { PeerMap } from '@libp2p/peer-collections'\nimport { PriorityQueue } from '@libp2p/utils/priority-queue'\nimport { resolvers, multiaddr } from '@multiformats/multiaddr'\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\nimport { Circuit } from '@multiformats/multiaddr-matcher'\nimport { anySignal } from 'any-signal'\nimport { CustomProgressEvent } from 'progress-events'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { DialDeniedError, NoValidAddressesError } from '../errors.js'\nimport { getPeerAddress } from '../get-peer.js'\nimport { defaultAddressSorter } from './address-sorter.js'\nimport {\n  DIAL_TIMEOUT,\n  MAX_PARALLEL_DIALS,\n  MAX_PEER_ADDRS_TO_DIAL,\n  LAST_DIAL_FAILURE_KEY,\n  MAX_DIAL_QUEUE_LENGTH,\n  LAST_DIAL_SUCCESS_KEY\n} from './constants.js'\nimport { resolveMultiaddrs } from './utils.js'\nimport { DEFAULT_DIAL_PRIORITY } from './index.js'\nimport type { AddressSorter, ComponentLogger, Logger, Connection, ConnectionGater, Metrics, PeerId, Address, PeerStore, PeerRouting, IsDialableOptions, OpenConnectionProgressEvents } from '@libp2p/interface'\nimport type { OpenConnectionOptions, TransportManager } from '@libp2p/interface-internal'\nimport type { PriorityQueueJobOptions } from '@libp2p/utils/priority-queue'\nimport type { DNS } from '@multiformats/dns'\nimport type { Multiaddr, Resolver } from '@multiformats/multiaddr'\nimport type { ProgressOptions } from 'progress-events'\n\nexport interface PendingDialTarget {\n  resolve(value: any): void\n  reject(err: Error): void\n}\n\ninterface DialQueueJobOptions extends PriorityQueueJobOptions, ProgressOptions<OpenConnectionProgressEvents> {\n  peerId?: PeerId\n  multiaddrs: Set<string>\n}\n\ninterface DialerInit {\n  addressSorter?: AddressSorter\n  maxParallelDials?: number\n  maxDialQueueLength?: number\n  maxPeerAddrsToDial?: number\n  dialTimeout?: number\n  resolvers?: Record<string, Resolver>\n  connections?: PeerMap<Connection[]>\n}\n\nconst defaultOptions = {\n  maxParallelDials: MAX_PARALLEL_DIALS,\n  maxDialQueueLength: MAX_DIAL_QUEUE_LENGTH,\n  maxPeerAddrsToDial: MAX_PEER_ADDRS_TO_DIAL,\n  dialTimeout: DIAL_TIMEOUT,\n  resolvers: {\n    dnsaddr: dnsaddrResolver\n  }\n}\n\ninterface DialQueueComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  logger: ComponentLogger\n  dns?: DNS\n}\n\nexport class DialQueue {\n  public queue: PriorityQueue<Connection, DialQueueJobOptions>\n  private readonly components: DialQueueComponents\n  private readonly addressSorter?: AddressSorter\n  private readonly maxPeerAddrsToDial: number\n  private readonly maxDialQueueLength: number\n  private readonly dialTimeout: number\n  private shutDownController: AbortController\n  private readonly connections: PeerMap<Connection[]>\n  private readonly log: Logger\n\n  constructor (components: DialQueueComponents, init: DialerInit = {}) {\n    this.addressSorter = init.addressSorter\n    this.maxPeerAddrsToDial = init.maxPeerAddrsToDial ?? defaultOptions.maxPeerAddrsToDial\n    this.maxDialQueueLength = init.maxDialQueueLength ?? defaultOptions.maxDialQueueLength\n    this.dialTimeout = init.dialTimeout ?? defaultOptions.dialTimeout\n    this.connections = init.connections ?? new PeerMap()\n    this.log = components.logger.forComponent('libp2p:connection-manager:dial-queue')\n    this.components = components\n\n    this.shutDownController = new AbortController()\n    setMaxListeners(Infinity, this.shutDownController.signal)\n\n    for (const [key, value] of Object.entries(init.resolvers ?? {})) {\n      resolvers.set(key, value)\n    }\n\n    // controls dial concurrency\n    this.queue = new PriorityQueue({\n      concurrency: init.maxParallelDials ?? defaultOptions.maxParallelDials,\n      metricName: 'libp2p_dial_queue',\n      metrics: components.metrics\n    })\n    // a started job errored\n    this.queue.addEventListener('error', (event) => {\n      if (event.detail.name !== AbortError.name) {\n        this.log.error('error in dial queue - %e', event.detail)\n      }\n    })\n  }\n\n  start (): void {\n    this.shutDownController = new AbortController()\n    setMaxListeners(Infinity, this.shutDownController.signal)\n  }\n\n  /**\n   * Clears any pending dials\n   */\n  stop (): void {\n    this.shutDownController.abort()\n    this.queue.abort()\n  }\n\n  /**\n   * Connects to a given peer, multiaddr or list of multiaddrs.\n   *\n   * If a peer is passed, all known multiaddrs will be tried. If a multiaddr or\n   * multiaddrs are passed only those will be dialled.\n   *\n   * Where a list of multiaddrs is passed, if any contain a peer id then all\n   * multiaddrs in the list must contain the same peer id.\n   *\n   * The dial to the first address that is successfully able to upgrade a\n   * connection will be used, all other dials will be aborted when that happens.\n   */\n  async dial (peerIdOrMultiaddr: PeerId | Multiaddr | Multiaddr[], options: OpenConnectionOptions = {}): Promise<Connection> {\n    const { peerId, multiaddrs } = getPeerAddress(peerIdOrMultiaddr)\n\n    // make sure we don't have an existing connection to any of the addresses we\n    // are about to dial\n    const existingConnection = Array.from(this.connections.values()).flat().find(conn => {\n      if (options.force === true) {\n        return false\n      }\n\n      if (conn.remotePeer.equals(peerId)) {\n        return true\n      }\n\n      return multiaddrs.find(addr => {\n        return addr.equals(conn.remoteAddr)\n      })\n    })\n\n    if (existingConnection?.status === 'open') {\n      this.log('already connected to %a', existingConnection.remoteAddr)\n      options.onProgress?.(new CustomProgressEvent('dial-queue:already-connected'))\n      return existingConnection\n    }\n\n    // ready to dial, all async work finished - make sure we don't have any\n    // pending dials in progress for this peer or set of multiaddrs\n    const existingDial = this.queue.queue.find(job => {\n      if (peerId?.equals(job.options.peerId) === true) {\n        return true\n      }\n\n      // does the dial contain any of the target multiaddrs?\n      const addresses = job.options.multiaddrs\n\n      if (addresses == null) {\n        return false\n      }\n\n      for (const multiaddr of multiaddrs) {\n        if (addresses.has(multiaddr.toString())) {\n          return true\n        }\n      }\n\n      return false\n    })\n\n    if (existingDial != null) {\n      this.log('joining existing dial target for %p', peerId)\n\n      // add all multiaddrs to the dial target\n      for (const multiaddr of multiaddrs) {\n        existingDial.options.multiaddrs.add(multiaddr.toString())\n      }\n\n      options.onProgress?.(new CustomProgressEvent('dial-queue:already-in-dial-queue'))\n      return existingDial.join(options)\n    }\n\n    if (this.queue.size >= this.maxDialQueueLength) {\n      throw new DialError('Dial queue is full')\n    }\n\n    this.log('creating dial target for %p', peerId, multiaddrs.map(ma => ma.toString()))\n\n    options.onProgress?.(new CustomProgressEvent('dial-queue:add-to-dial-queue'))\n    return this.queue.add(async (options) => {\n      options?.onProgress?.(new CustomProgressEvent('dial-queue:start-dial'))\n      // create abort conditions - need to do this before `calculateMultiaddrs` as\n      // we may be about to resolve a dns addr which can time out\n      const signal = anySignal([\n        this.shutDownController.signal,\n        options.signal\n      ])\n      setMaxListeners(Infinity, signal)\n\n      let addrsToDial: Address[]\n\n      try {\n        // load addresses from address book, resolve and dnsaddrs, filter\n        // undiallables, add peer IDs, etc\n        addrsToDial = await this.calculateMultiaddrs(peerId, options?.multiaddrs, {\n          ...options,\n          signal\n        })\n\n        options?.onProgress?.(new CustomProgressEvent<Address[]>('dial-queue:calculated-addresses', addrsToDial))\n\n        addrsToDial.map(({ multiaddr }) => multiaddr.toString()).forEach(addr => {\n          options?.multiaddrs.add(addr)\n        })\n      } catch (err) {\n        signal.clear()\n        throw err\n      }\n\n      try {\n        let dialed = 0\n        const errors: Error[] = []\n\n        for (const address of addrsToDial) {\n          if (dialed === this.maxPeerAddrsToDial) {\n            this.log('dialed maxPeerAddrsToDial (%d) addresses for %p, not trying any others', dialed, peerId)\n\n            throw new DialError('Peer had more than maxPeerAddrsToDial')\n          }\n\n          dialed++\n\n          try {\n            const conn = await this.components.transportManager.dial(address.multiaddr, {\n              ...options,\n              signal\n            })\n\n            this.log('dial to %a succeeded', address.multiaddr)\n\n            // record the successful dial and the address\n            try {\n              await this.components.peerStore.merge(conn.remotePeer, {\n                multiaddrs: [\n                  conn.remoteAddr\n                ],\n                metadata: {\n                  [LAST_DIAL_SUCCESS_KEY]: uint8ArrayFromString(Date.now().toString())\n                }\n              })\n            } catch (err: any) {\n              this.log.error('could not update last dial failure key for %p', peerId, err)\n            }\n\n            return conn\n          } catch (err: any) {\n            this.log.error('dial failed to %a', address.multiaddr, err)\n\n            if (peerId != null) {\n              // record the failed dial\n              try {\n                await this.components.peerStore.merge(peerId, {\n                  metadata: {\n                    [LAST_DIAL_FAILURE_KEY]: uint8ArrayFromString(Date.now().toString())\n                  }\n                })\n              } catch (err: any) {\n                this.log.error('could not update last dial failure key for %p', peerId, err)\n              }\n            }\n\n            // the user/dial timeout/shutdown controller signal aborted\n            if (signal.aborted) {\n              throw new TimeoutError(err.message)\n            }\n\n            errors.push(err)\n          }\n        }\n\n        if (errors.length === 1) {\n          throw errors[0]\n        }\n\n        throw new AggregateError(errors, 'All multiaddr dials failed')\n      } finally {\n        // clean up abort signals/controllers\n        signal.clear()\n      }\n    }, {\n      peerId,\n      priority: options.priority ?? DEFAULT_DIAL_PRIORITY,\n      multiaddrs: new Set(multiaddrs.map(ma => ma.toString())),\n      signal: options.signal ?? AbortSignal.timeout(this.dialTimeout),\n      onProgress: options.onProgress\n    })\n  }\n\n  // eslint-disable-next-line complexity\n  private async calculateMultiaddrs (peerId?: PeerId, multiaddrs: Set<string> = new Set<string>(), options: OpenConnectionOptions = {}): Promise<Address[]> {\n    const addrs: Address[] = [...multiaddrs].map(ma => ({\n      multiaddr: multiaddr(ma),\n      isCertified: false\n    }))\n\n    // if a peer id or multiaddr(s) with a peer id, make sure it isn't our peer id and that we are allowed to dial it\n    if (peerId != null) {\n      if (this.components.peerId.equals(peerId)) {\n        throw new DialError('Tried to dial self')\n      }\n\n      if ((await this.components.connectionGater.denyDialPeer?.(peerId)) === true) {\n        throw new DialDeniedError('The dial request is blocked by gater.allowDialPeer')\n      }\n\n      // if just a peer id was passed, load available multiaddrs for this peer\n      // from the peer store\n      if (addrs.length === 0) {\n        this.log('loading multiaddrs for %p', peerId)\n        try {\n          const peer = await this.components.peerStore.get(peerId)\n          addrs.push(...peer.addresses)\n          this.log('loaded multiaddrs for %p', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()))\n        } catch (err: any) {\n          if (err.name !== 'NotFoundError') {\n            throw err\n          }\n        }\n      }\n\n      // if we still don't have any addresses for this peer, try a lookup\n      // using the peer routing\n      if (addrs.length === 0) {\n        this.log('looking up multiaddrs for %p in the peer routing', peerId)\n\n        try {\n          const peerInfo = await this.components.peerRouting.findPeer(peerId, options)\n\n          this.log('found multiaddrs for %p in the peer routing', peerId, addrs.map(({ multiaddr }) => multiaddr.toString()))\n\n          addrs.push(...peerInfo.multiaddrs.map(multiaddr => ({\n            multiaddr,\n            isCertified: false\n          })))\n        } catch (err: any) {\n          if (err.name !== 'NoPeerRoutersError') {\n            this.log.error('looking up multiaddrs for %p in the peer routing failed', peerId, err)\n          }\n        }\n      }\n    }\n\n    // resolve addresses - this can result in a one-to-many translation when\n    // dnsaddrs are resolved\n    let resolvedAddresses = (await Promise.all(\n      addrs.map(async addr => {\n        const result = await resolveMultiaddrs(addr.multiaddr, {\n          dns: this.components.dns,\n          ...options,\n          log: this.log\n        })\n\n        if (result.length === 1 && result[0].equals(addr.multiaddr)) {\n          return addr\n        }\n\n        return result.map(multiaddr => ({\n          multiaddr,\n          isCertified: false\n        }))\n      })\n    ))\n      .flat()\n\n    // ensure the peer id is appended to the multiaddr\n    if (peerId != null) {\n      const peerIdMultiaddr = `/p2p/${peerId.toString()}`\n      resolvedAddresses = resolvedAddresses.map(addr => {\n        const lastProto = addr.multiaddr.protos().pop()\n\n        // do not append peer id to path multiaddrs\n        if (lastProto?.path === true) {\n          return addr\n        }\n\n        // append peer id to multiaddr if it is not already present\n        if (addr.multiaddr.getPeerId() == null) {\n          return {\n            multiaddr: addr.multiaddr.encapsulate(peerIdMultiaddr),\n            isCertified: addr.isCertified\n          }\n        }\n\n        return addr\n      })\n    }\n\n    const filteredAddrs = resolvedAddresses.filter(addr => {\n      // filter out any multiaddrs that we do not have transports for\n      if (this.components.transportManager.dialTransportForMultiaddr(addr.multiaddr) == null) {\n        return false\n      }\n\n      // if the resolved multiaddr has a PeerID but it's the wrong one, ignore it\n      // - this can happen with addresses like bootstrap.libp2p.io that resolve\n      // to multiple different peers\n      const addrPeerId = addr.multiaddr.getPeerId()\n      if (peerId != null && addrPeerId != null) {\n        return peerId.equals(addrPeerId)\n      }\n\n      return true\n    })\n\n    // deduplicate addresses\n    const dedupedAddrs = new Map<string, Address>()\n\n    for (const addr of filteredAddrs) {\n      const maStr = addr.multiaddr.toString()\n      const existing = dedupedAddrs.get(maStr)\n\n      if (existing != null) {\n        existing.isCertified = existing.isCertified || addr.isCertified || false\n        continue\n      }\n\n      dedupedAddrs.set(maStr, addr)\n    }\n\n    const dedupedMultiaddrs = [...dedupedAddrs.values()]\n\n    // make sure we actually have some addresses to dial\n    if (dedupedMultiaddrs.length === 0) {\n      throw new NoValidAddressesError('The dial request has no valid addresses')\n    }\n\n    const gatedAdrs: Address[] = []\n\n    for (const addr of dedupedMultiaddrs) {\n      if (this.components.connectionGater.denyDialMultiaddr != null && await this.components.connectionGater.denyDialMultiaddr(addr.multiaddr)) {\n        continue\n      }\n\n      gatedAdrs.push(addr)\n    }\n\n    const sortedGatedAddrs = this.addressSorter == null ? defaultAddressSorter(gatedAdrs) : gatedAdrs.sort(this.addressSorter)\n\n    // make sure we actually have some addresses to dial\n    if (sortedGatedAddrs.length === 0) {\n      throw new DialDeniedError('The connection gater denied all addresses in the dial request')\n    }\n\n    this.log.trace('addresses for %p before filtering', peerId ?? 'unknown peer', resolvedAddresses.map(({ multiaddr }) => multiaddr.toString()))\n    this.log.trace('addresses for %p after filtering', peerId ?? 'unknown peer', sortedGatedAddrs.map(({ multiaddr }) => multiaddr.toString()))\n\n    return sortedGatedAddrs\n  }\n\n  async isDialable (multiaddr: Multiaddr | Multiaddr[], options: IsDialableOptions = {}): Promise<boolean> {\n    if (!Array.isArray(multiaddr)) {\n      multiaddr = [multiaddr]\n    }\n\n    try {\n      const addresses = await this.calculateMultiaddrs(undefined, new Set(multiaddr.map(ma => ma.toString())), options)\n\n      if (options.runOnLimitedConnection === false) {\n        // return true if any resolved multiaddrs are not relay addresses\n        return addresses.find(addr => {\n          return !Circuit.matches(addr.multiaddr)\n        }) != null\n      }\n\n      return true\n    } catch (err) {\n      this.log.trace('error calculating if multiaddr(s) were dialable', err)\n    }\n\n    return false\n  }\n}\n","import { base58btc } from 'multiformats/bases/base58'\nimport { base64url } from 'multiformats/bases/base64'\nimport type { Matcher, MultiaddrMatcher } from './index.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * Split a multiaddr into path components\n */\nconst toParts = (ma: Multiaddr): string[] => {\n  return ma.toString().split('/').slice(1)\n}\n\nexport const func = (fn: (val: string) => boolean): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 1) {\n        return false\n      }\n\n      if (fn(vals[0])) {\n        return vals.slice(1)\n      }\n\n      return false\n    },\n    pattern: 'fn'\n  }\n}\n\nexport const literal = (str: string): Matcher => {\n  return {\n    match: (vals) => func((val) => val === str).match(vals),\n    pattern: str\n  }\n}\n\nexport const string = (): Matcher => {\n  return {\n    match: (vals) => func((val) => typeof val === 'string').match(vals),\n    pattern: '{string}'\n  }\n}\n\nexport const number = (): Matcher => {\n  return {\n    match: (vals) => func((val) => !isNaN(parseInt(val))).match(vals),\n    pattern: '{number}'\n  }\n}\n\nexport const peerId = (): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 2) {\n        return false\n      }\n\n      if (vals[0] !== 'p2p' && vals[0] !== 'ipfs') {\n        return false\n      }\n\n      // Q is RSA, 1 is Ed25519 or Secp256k1\n      if (vals[1].startsWith('Q') || vals[1].startsWith('1')) {\n        try {\n          base58btc.decode(`z${vals[1]}`)\n        } catch (err) {\n          return false\n        }\n      } else {\n        return false\n      }\n\n      return vals.slice(2)\n    },\n    pattern: '/p2p/{peerid}'\n  }\n}\n\nexport const certhash = (): Matcher => {\n  return {\n    match: (vals) => {\n      if (vals.length < 2) {\n        return false\n      }\n\n      if (vals[0] !== 'certhash') {\n        return false\n      }\n\n      try {\n        base64url.decode(vals[1])\n      } catch {\n        return false\n      }\n\n      return vals.slice(2)\n    },\n    pattern: '/certhash/{certhash}'\n  }\n}\n\nexport const optional = (matcher: Matcher): Matcher => {\n  return {\n    match: (vals) => {\n      const result = matcher.match(vals)\n\n      if (result === false) {\n        return vals\n      }\n\n      return result\n    },\n    pattern: `optional(${matcher.pattern})`\n  }\n}\n\nexport const or = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      let matches: string[] | undefined\n\n      for (const matcher of matchers) {\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          continue\n        }\n\n        // choose greediest matcher\n        if (matches == null || result.length < matches.length) {\n          matches = result\n        }\n      }\n\n      if (matches == null) {\n        return false\n      }\n\n      return matches\n    },\n    pattern: `or(${matchers.map(m => m.pattern).join(', ')})`\n  }\n}\n\nexport const and = (...matchers: Matcher[]): Matcher => {\n  return {\n    match: (vals) => {\n      for (const matcher of matchers) {\n        // pass what's left of the array\n        const result = matcher.match(vals)\n\n        // no match\n        if (result === false) {\n          return false\n        }\n\n        vals = result\n      }\n\n      return vals\n    },\n    pattern: `and(${matchers.map(m => m.pattern).join(', ')})`\n  }\n}\n\nexport function fmt (...matchers: Matcher[]): MultiaddrMatcher {\n  function match (ma: Multiaddr): string[] | false {\n    let parts = toParts(ma)\n\n    for (const matcher of matchers) {\n      const result = matcher.match(parts)\n\n      if (result === false) {\n        return false\n      }\n\n      parts = result\n    }\n\n    return parts\n  }\n\n  function matches (ma: Multiaddr): boolean {\n    const result = match(ma)\n\n    return result !== false\n  }\n\n  function exactMatch (ma: Multiaddr): boolean {\n    const result = match(ma)\n\n    if (result === false) {\n      return false\n    }\n\n    return result.length === 0\n  }\n\n  return {\n    matchers,\n    matches,\n    exactMatch\n  }\n}\n","/**\n * @packageDocumentation\n *\n * This module exports various matchers that can be used to infer the type of a\n * passed multiaddr.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org')\n *\n * DNS.matches(ma) // true - this is a multiaddr with a DNS address at the start\n * ```\n *\n * @example\n *\n * The default matching behaviour ignores any subsequent tuples in the multiaddr.\n * If you want stricter matching you can use `.exactMatch`:\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS, Circuit } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/dnsaddr/example.org/p2p/QmFoo/p2p-circuit/p2p/QmBar')\n *\n * DNS.exactMatch(ma) // false - this address has extra tuples after the DNS component\n * Circuit.matches(ma) // true\n * Circuit.exactMatch(ma) // true - the extra tuples are circuit relay related\n * ```\n */\n\nimport { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { and, or, literal, string, peerId, optional, fmt, func, number, certhash } from './utils.js'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * A matcher accepts multiaddr components and either fails to match and returns\n * false or returns a sublist of unmatched components\n */\nexport interface Matcher {\n  match(parts: string[]): string[] | false\n  pattern: string\n}\n\n/**\n * A MultiaddrMatcher allows interpreting a multiaddr as a certain type of\n * multiaddr\n */\nexport interface MultiaddrMatcher {\n  /**\n   * The matchers that make up this MultiaddrMatcher - useful if you want to\n   * make your own custom matchers\n   */\n  matchers: Matcher[]\n\n  /**\n   * Returns true if the passed multiaddr can be treated as this type of\n   * multiaddr\n   */\n  matches(ma: Multiaddr): boolean\n\n  /**\n   * Returns true if the passed multiaddr terminates as this type of\n   * multiaddr\n   */\n  exactMatch(ma: Multiaddr): boolean\n}\n\n/**\n * DNS matchers\n */\nconst _DNS4 = and(literal('dns4'), string())\nconst _DNS6 = and(literal('dns6'), string())\nconst _DNSADDR = and(literal('dnsaddr'), string())\nconst _DNS = and(literal('dns'), string())\n\n/**\n * Matches dns4 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS4 } from '@multiformats/multiaddr-matcher'\n *\n * DNS4.matches(multiaddr('/dns4/example.org')) // true\n * ```\n */\nexport const DNS4 = fmt(_DNS4, optional(peerId()))\n\n/**\n * Matches dns6 addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS6 } from '@multiformats/multiaddr-matcher'\n *\n * DNS6.matches(multiaddr('/dns6/example.org')) // true\n * ```\n */\nexport const DNS6 = fmt(_DNS6, optional(peerId()))\n\n/**\n * Matches dnsaddr addresses.\n *\n * Use {@link DNS DNS} instead to match any type of DNS address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNSADDR } from '@multiformats/multiaddr-matcher'\n *\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNSADDR.matches(multiaddr('/dnsaddr/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNSADDR = fmt(_DNSADDR, optional(peerId()))\n\n/**\n * Matches any dns address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { DNS } from '@multiformats/multiaddr-matcher'\n *\n * DNS.matches(multiaddr('/dnsaddr/example.org')) // true\n * DNS.matches(multiaddr('/dns4/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org')) // true\n * DNS.matches(multiaddr('/dns6/example.org/p2p/Qmfoo')) // true\n * ```\n */\nexport const DNS = fmt(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(peerId()))\n\nconst _IP4 = and(literal('ip4'), func(isIPv4))\nconst _IP6 = and(literal('ip6'), func(isIPv6))\nconst _IP = or(_IP4, _IP6)\n\nconst _IP_OR_DOMAIN = or(_IP, _DNS, _DNS4, _DNS6, _DNSADDR)\n\n/**\n * A matcher for addresses that start with IP or DNS tuples.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP_OR_DOMAIN } from '@multiformats/multiaddr-matcher'\n *\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/ip4/123.123.123.123/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/dns/example.com/p2p/QmFoo')) // true\n * IP_OR_DOMAIN.matches(multiaddr('/p2p/QmFoo')) // false\n * ```\n */\nexport const IP_OR_DOMAIN = fmt(or(_IP, and(or(_DNS, _DNSADDR, _DNS4, _DNS6), optional(peerId()))))\n\n/**\n * Matches ip4 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP4 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip4/123.123.123.123')\n *\n * IP4.matches(ma) // true\n * ```\n */\nexport const IP4 = fmt(_IP4)\n\n/**\n * Matches ip6 addresses.\n *\n * Use {@link IP IP} instead to match any ip4/ip6 address.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP6 } from '@multiformats/multiaddr-matcher'\n *\n * const ma = multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')\n *\n * IP6.matches(ma) // true\n * ```\n */\nexport const IP6 = fmt(_IP6)\n\n/**\n * Matches ip4 or ip6 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { IP } from '@multiformats/multiaddr-matcher'\n *\n * IP.matches(multiaddr('/ip4/123.123.123.123')) // true\n * IP.matches(multiaddr('/ip6/fe80::1cc1:a3b8:322f:cf22')) // true\n * ```\n */\nexport const IP = fmt(_IP)\n\nconst _TCP = and(_IP_OR_DOMAIN, literal('tcp'), number())\nconst _UDP = and(_IP_OR_DOMAIN, literal('udp'), number())\n\n/**\n * Matches TCP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { TCP } from '@multiformats/multiaddr-matcher'\n *\n * TCP.matches(multiaddr('/ip4/123.123.123.123/tcp/1234')) // true\n * ```\n */\nexport const TCP = fmt(and(_TCP, optional(peerId())))\n\n/**\n * Matches UDP addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { UDP } from '@multiformats/multiaddr-matcher'\n *\n * UDP.matches(multiaddr('/ip4/123.123.123.123/udp/1234')) // true\n * ```\n */\nexport const UDP = fmt(_UDP)\n\nconst _QUIC = and(_UDP, literal('quic'), optional(peerId()))\nconst _QUICV1 = and(_UDP, literal('quic-v1'), optional(peerId()))\n\nconst QUIC_V0_OR_V1 = or(_QUIC, _QUICV1)\n\n/**\n * Matches QUIC addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUIC } from '@multiformats/multiaddr-matcher'\n *\n * QUIC.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic')) // true\n * ```\n */\nexport const QUIC = fmt(_QUIC)\n\n/**\n * Matches QUICv1 addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { QUICV1 } from '@multiformats/multiaddr-matcher'\n *\n * QUICV1.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1')) // true\n * ```\n */\nexport const QUICV1 = fmt(_QUICV1)\n\nconst _WEB = or(\n  _IP_OR_DOMAIN,\n  _TCP,\n  _UDP,\n  _QUIC,\n  _QUICV1\n)\n\nconst _WebSockets = or(\n  and(_WEB, literal('ws'), optional(peerId()))\n)\n\n/**\n * Matches WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSockets } from '@multiformats/multiaddr-matcher'\n *\n * WebSockets.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/ws')) // true\n * ```\n */\nexport const WebSockets = fmt(_WebSockets)\n\nconst _WebSocketsSecure = or(\n  and(_WEB, literal('wss'), optional(peerId())),\n  and(_WEB, literal('tls'), optional(and(literal('sni'), string())), literal('ws'), optional(peerId()))\n)\n\n/**\n * Matches secure WebSocket addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebSocketsSecure } from '@multiformats/multiaddr-matcher'\n *\n * WebSocketsSecure.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/wss')) // true\n * ```\n */\nexport const WebSocketsSecure = fmt(_WebSocketsSecure)\n\nconst _WebRTCDirect = and(_UDP, literal('webrtc-direct'), optional(certhash()), optional(certhash()), optional(peerId()))\n\n/**\n * Matches WebRTC-direct addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo/webrtc-direct/certhash/u....')) // true\n * ```\n */\nexport const WebRTCDirect = fmt(_WebRTCDirect)\n\nconst _WebTransport = and(_QUICV1, literal('webtransport'), optional(certhash()), optional(certhash()), optional(peerId()))\n\n/**\n * Matches WebTransport addresses.\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTCDirect } from '@multiformats/multiaddr-matcher'\n *\n * WebRTCDirect.matches(multiaddr('/ip4/123.123.123.123/udp/1234/quic-v1/webtransport/certhash/u..../certhash/u..../p2p/QmFoo')) // true\n * ```\n */\nexport const WebTransport = fmt(_WebTransport)\n\nconst _P2P = or(\n  _WebSockets,\n  _WebSocketsSecure,\n  and(_TCP, optional(peerId())),\n  and(QUIC_V0_OR_V1, optional(peerId())),\n  and(_IP_OR_DOMAIN, optional(peerId())),\n  _WebRTCDirect,\n  _WebTransport,\n  peerId()\n)\n\n/**\n * Matches peer addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { P2P } from '@multiformats/multiaddr-matcher'\n *\n * P2P.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmFoo')) // true\n * ```\n */\nexport const P2P = fmt(_P2P)\n\nconst _Circuit = and(_P2P, literal('p2p-circuit'), peerId())\n\n/**\n * Matches circuit relay addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Circuit } from '@multiformats/multiaddr-matcher'\n *\n * Circuit.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/p2p/QmTarget')) // true\n * ```\n */\nexport const Circuit = fmt(_Circuit)\n\nconst _WebRTC = or(\n  and(_P2P, literal('p2p-circuit'), literal('webrtc'), optional(peerId())),\n  and(_P2P, literal('webrtc'), optional(peerId())),\n  and(literal('webrtc'), optional(peerId()))\n)\n\n/**\n * Matches WebRTC addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { WebRTC } from '@multiformats/multiaddr-matcher'\n *\n * WebRTC.matches(multiaddr('/ip4/123.123.123.123/tcp/1234/p2p/QmRelay/p2p-circuit/webrtc/p2p/QmTarget')) // true\n * ```\n */\nexport const WebRTC = fmt(_WebRTC)\n\nconst _HTTP = or(\n  and(_IP_OR_DOMAIN, literal('tcp'), number(), literal('http'), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('http'), optional(peerId()))\n)\n\n/**\n * Matches HTTP addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/http')) // true\n * ```\n */\nexport const HTTP = fmt(_HTTP)\n\nconst _HTTPS = or(\n  and(_IP_OR_DOMAIN, literal('tcp'), or(\n    and(literal('443'), literal('http')),\n    and(number(), literal('https'))\n  ), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('tls'), literal('http'), optional(peerId())),\n  and(_IP_OR_DOMAIN, literal('https'), optional(peerId()))\n)\n\n/**\n * Matches HTTPS addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { HTTP } from '@multiformats/multiaddr-matcher'\n *\n * HTTP.matches(multiaddr('/dns/example.org/tls/http')) // true\n * ```\n */\nexport const HTTPS = fmt(_HTTPS)\n\nconst _Memory = or(\n  and(literal('memory'), string(), optional(peerId()))\n)\n\n/**\n * Matches Memory addresses\n *\n * @example\n *\n * ```ts\n * import { multiaddr } from '@multiformats/multiaddr'\n * import { Memory } from '@multiformats/multiaddr-matcher'\n *\n * Memory.matches(multiaddr('/memory/0xDEADBEEF')) // true\n * ```\n */\nexport const Memory = fmt(_Memory)\n","\nexport interface ClearableSignal extends AbortSignal {\n  clear: () => void\n}\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal (signals: Array<AbortSignal | undefined | null>): ClearableSignal {\n  const controller = new globalThis.AbortController()\n\n  function onAbort (): void {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort()\n      break\n    }\n\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort)\n    }\n  }\n\n  function clear (): void {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  const signal = controller.signal as ClearableSignal\n  signal.clear = clear\n\n  return signal\n}\n","import { isPrivate } from '@libp2p/utils/multiaddr/is-private'\nimport { Circuit, WebSockets, WebSocketsSecure, WebRTC, WebRTCDirect, WebTransport, TCP } from '@multiformats/multiaddr-matcher'\nimport type { Address } from '@libp2p/interface'\n\n/**\n * Sorts addresses by order of reliability, where they have presented the fewest\n * problems:\n *\n * TCP -> WebSockets/Secure -> WebRTC -> WebRTCDirect -> WebTransport\n */\n// eslint-disable-next-line complexity\nexport function reliableTransportsFirst (a: Address, b: Address): -1 | 0 | 1 {\n  const isATCP = TCP.exactMatch(a.multiaddr)\n  const isBTCP = TCP.exactMatch(b.multiaddr)\n\n  if (isATCP && !isBTCP) {\n    return -1\n  }\n\n  if (!isATCP && isBTCP) {\n    return 1\n  }\n\n  const isAWebSocketSecure = WebSocketsSecure.exactMatch(a.multiaddr)\n  const isBWebSocketSecure = WebSocketsSecure.exactMatch(b.multiaddr)\n\n  if (isAWebSocketSecure && !isBWebSocketSecure) {\n    return -1\n  }\n\n  if (!isAWebSocketSecure && isBWebSocketSecure) {\n    return 1\n  }\n\n  const isAWebSocket = WebSockets.exactMatch(a.multiaddr)\n  const isBWebSocket = WebSockets.exactMatch(b.multiaddr)\n\n  if (isAWebSocket && !isBWebSocket) {\n    return -1\n  }\n\n  if (!isAWebSocket && isBWebSocket) {\n    return 1\n  }\n\n  const isAWebRTC = WebRTC.exactMatch(a.multiaddr)\n  const isBWebRTC = WebRTC.exactMatch(b.multiaddr)\n\n  if (isAWebRTC && !isBWebRTC) {\n    return -1\n  }\n\n  if (!isAWebRTC && isBWebRTC) {\n    return 1\n  }\n\n  const isAWebRTCDirect = WebRTCDirect.exactMatch(a.multiaddr)\n  const isBWebRTCDirect = WebRTCDirect.exactMatch(b.multiaddr)\n\n  if (isAWebRTCDirect && !isBWebRTCDirect) {\n    return -1\n  }\n\n  if (!isAWebRTCDirect && isBWebRTCDirect) {\n    return 1\n  }\n\n  const isAWebTransport = WebTransport.exactMatch(a.multiaddr)\n  const isBWebTransport = WebTransport.exactMatch(b.multiaddr)\n\n  if (isAWebTransport && !isBWebTransport) {\n    return -1\n  }\n\n  if (!isAWebTransport && isBWebTransport) {\n    return 1\n  }\n\n  // ... everything else\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves public addresses to the start\n * of the array.\n */\nexport function publicAddressesFirst (a: Address, b: Address): -1 | 0 | 1 {\n  const isAPrivate = isPrivate(a.multiaddr)\n  const isBPrivate = isPrivate(b.multiaddr)\n\n  if (isAPrivate && !isBPrivate) {\n    return 1\n  } else if (!isAPrivate && isBPrivate) {\n    return -1\n  }\n\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves certified addresses to the start\n * of the array.\n */\nexport function certifiedAddressesFirst (a: Address, b: Address): -1 | 0 | 1 {\n  if (a.isCertified && !b.isCertified) {\n    return -1\n  } else if (!a.isCertified && b.isCertified) {\n    return 1\n  }\n\n  return 0\n}\n\n/**\n * Compare function for array.sort() that moves circuit relay addresses to the\n * end of the array.\n */\nexport function circuitRelayAddressesLast (a: Address, b: Address): -1 | 0 | 1 {\n  const isACircuit = Circuit.exactMatch(a.multiaddr)\n  const isBCircuit = Circuit.exactMatch(b.multiaddr)\n\n  if (isACircuit && !isBCircuit) {\n    return 1\n  } else if (!isACircuit && isBCircuit) {\n    return -1\n  }\n\n  return 0\n}\n\nexport function defaultAddressSorter (addresses: Address[]): Address[] {\n  return addresses\n    .sort(reliableTransportsFirst)\n    .sort(certifiedAddressesFirst)\n    .sort(circuitRelayAddressesLast)\n    .sort(publicAddressesFirst)\n}\n","import { KEEP_ALIVE } from '@libp2p/interface'\nimport { PeerQueue } from '@libp2p/utils/peer-queue'\nimport pRetry from 'p-retry'\nimport { MAX_PARALLEL_RECONNECTS } from './constants.js'\nimport type { ComponentLogger, Libp2pEvents, Logger, Metrics, Peer, PeerId, PeerStore, Startable, TypedEventTarget } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\n\nexport interface ReconnectQueueComponents {\n  connectionManager: ConnectionManager\n  events: TypedEventTarget<Libp2pEvents>\n  peerStore: PeerStore\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport interface ReconnectQueueInit {\n  retries?: number\n  retryInterval?: number\n  backoffFactor?: number\n  maxParallelReconnects?: number\n}\n\n/**\n * When peers tagged with `KEEP_ALIVE` disconnect, this component attempts to\n * redial them\n */\nexport class ReconnectQueue implements Startable {\n  private readonly log: Logger\n  private readonly queue: PeerQueue\n  private started: boolean\n  private readonly peerStore: PeerStore\n  private readonly retries: number\n  private readonly retryInterval?: number\n  private readonly backoffFactor?: number\n  private readonly connectionManager: ConnectionManager\n  private readonly events: TypedEventTarget<Libp2pEvents>\n\n  constructor (components: ReconnectQueueComponents, init: ReconnectQueueInit = {}) {\n    this.log = components.logger.forComponent('libp2p:reconnect-queue')\n    this.peerStore = components.peerStore\n    this.connectionManager = components.connectionManager\n    this.queue = new PeerQueue({\n      concurrency: init.maxParallelReconnects ?? MAX_PARALLEL_RECONNECTS,\n      metricName: 'libp2p_reconnect_queue',\n      metrics: components.metrics\n    })\n    this.started = false\n    this.retries = init.retries ?? 5\n    this.backoffFactor = init.backoffFactor\n    this.retryInterval = init.retryInterval\n    this.events = components.events\n\n    components.events.addEventListener('peer:disconnect', (evt) => {\n      this.maybeReconnect(evt.detail)\n        .catch(err => {\n          this.log.error('failed to maybe reconnect to %p - %e', evt.detail, err)\n        })\n    })\n  }\n\n  private async maybeReconnect (peerId: PeerId): Promise<void> {\n    if (!this.started) {\n      return\n    }\n\n    const peer = await this.peerStore.get(peerId)\n\n    if (!hasKeepAliveTag(peer)) {\n      return\n    }\n\n    if (this.queue.has(peerId)) {\n      return\n    }\n\n    this.queue.add(async (options) => {\n      await pRetry(async (attempt) => {\n        if (!this.started) {\n          return\n        }\n\n        try {\n          await this.connectionManager.openConnection(peerId, {\n            signal: options?.signal\n          })\n        } catch (err) {\n          this.log('reconnecting to %p attempt %d of %d failed - %e', peerId, attempt, this.retries, err)\n          throw err\n        }\n      }, {\n        signal: options?.signal,\n        retries: this.retries,\n        factor: this.backoffFactor,\n        minTimeout: this.retryInterval\n      })\n    }, {\n      peerId\n    })\n      .catch(async err => {\n        this.log.error('failed to reconnect to %p - %e', peerId, err)\n\n        const tags: Record<string, undefined> = {}\n\n        ;[...peer.tags.keys()].forEach(key => {\n          if (key.startsWith(KEEP_ALIVE)) {\n            tags[key] = undefined\n          }\n        })\n\n        await this.peerStore.merge(peerId, {\n          tags\n        })\n\n        this.events.safeDispatchEvent('peer:reconnect-failure', {\n          detail: peerId\n        })\n      })\n      .catch(async err => {\n        this.log.error('failed to remove keep-alive tag from %p - %e', peerId, err)\n      })\n  }\n\n  start (): void {\n    this.started = true\n  }\n\n  async afterStart (): Promise<void> {\n    // re-connect to any peers with the KEEP_ALIVE tag\n    void Promise.resolve()\n      .then(async () => {\n        const keepAlivePeers: Peer[] = await this.peerStore.all({\n          filters: [\n            (peer) => hasKeepAliveTag(peer)\n          ]\n        })\n\n        await Promise.all(\n          keepAlivePeers.map(async peer => {\n            await this.connectionManager.openConnection(peer.id)\n              .catch(err => {\n                this.log.error(err)\n              })\n          })\n        )\n      })\n      .catch(err => {\n        this.log.error(err)\n      })\n  }\n\n  stop (): void {\n    this.started = false\n    this.queue.abort()\n  }\n}\n\nfunction hasKeepAliveTag (peer: Peer): boolean {\n  for (const tag of peer.tags.keys()) {\n    if (tag.startsWith(KEEP_ALIVE)) {\n      return true\n    }\n  }\n\n  return false\n}\n","import retry from 'retry';\nimport isNetworkError from 'is-network-error';\n\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nexport default async function pRetry(input, options) {\n\treturn new Promise((resolve, reject) => {\n\t\toptions = {...options};\n\t\toptions.onFailedAttempt ??= () => {};\n\t\toptions.shouldRetry ??= () => true;\n\t\toptions.retries ??= 10;\n\n\t\tconst operation = retry.operation(options);\n\n\t\tconst abortHandler = () => {\n\t\t\toperation.stop();\n\t\t\treject(options.signal?.reason);\n\t\t};\n\n\t\tif (options.signal && !options.signal.aborted) {\n\t\t\toptions.signal.addEventListener('abort', abortHandler, {once: true});\n\t\t}\n\n\t\tconst cleanUp = () => {\n\t\t\toptions.signal?.removeEventListener('abort', abortHandler);\n\t\t\toperation.stop();\n\t\t};\n\n\t\toperation.attempt(async attemptNumber => {\n\t\t\ttry {\n\t\t\t\tconst result = await input(attemptNumber);\n\t\t\t\tcleanUp();\n\t\t\t\tresolve(result);\n\t\t\t} catch (error) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!(error instanceof Error)) {\n\t\t\t\t\t\tthrow new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof AbortError) {\n\t\t\t\t\t\tthrow error.originalError;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof TypeError && !isNetworkError(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\n\t\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\t\tif (!(await options.shouldRetry(error))) {\n\t\t\t\t\t\toperation.stop();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\n\t\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\t\tthrow operation.mainError();\n\t\t\t\t\t}\n\t\t\t\t} catch (finalError) {\n\t\t\t\t\tdecorateErrorWithCounts(finalError, attemptNumber, options);\n\t\t\t\t\tcleanUp();\n\t\t\t\t\treject(finalError);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n","const objectToString = Object.prototype.toString;\n\nconst isError = value => objectToString.call(value) === '[object Error]';\n\nconst errorMessages = new Set([\n\t'network error', // Chrome\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari 16\n\t'Load failed', // Safari 17+\n\t'Network request failed', // `cross-fetch`\n\t'fetch failed', // Undici (Node.js)\n\t'terminated', // Undici (Node.js)\n]);\n\nexport default function isNetworkError(error) {\n\tconst isValid = error\n\t\t&& isError(error)\n\t\t&& error.name === 'TypeError'\n\t\t&& typeof error.message === 'string';\n\n\tif (!isValid) {\n\t\treturn false;\n\t}\n\n\t// We do an extra check for Safari 17+ as it has a very generic error message.\n\t// Network errors in Safari have no stack.\n\tif (error.message === 'Load failed') {\n\t\treturn error.stack === undefined;\n\t}\n\n\treturn errorMessages.has(error.message);\n}\n","import { randomBytes } from '@libp2p/crypto'\nimport { serviceCapabilities, setMaxListeners } from '@libp2p/interface'\nimport { AdaptiveTimeout } from '@libp2p/utils/adaptive-timeout'\nimport { byteStream } from 'it-byte-stream'\nimport type { ComponentLogger, Logger, Metrics, Startable } from '@libp2p/interface'\nimport type { ConnectionManager } from '@libp2p/interface-internal'\nimport type { AdaptiveTimeoutInit } from '@libp2p/utils/adaptive-timeout'\n\nconst DEFAULT_PING_INTERVAL_MS = 10000\nconst PROTOCOL_VERSION = '1.0.0'\nconst PROTOCOL_NAME = 'ping'\nconst PROTOCOL_PREFIX = 'ipfs'\nconst PING_LENGTH = 32\nconst DEFAULT_ABORT_CONNECTION_ON_PING_FAILURE = true\n\nexport interface ConnectionMonitorInit {\n  /**\n   * Whether the connection monitor is enabled\n   *\n   * @default true\n   */\n  enabled?: boolean\n\n  /**\n   * How often to ping remote peers in ms\n   *\n   * @default 10000\n   */\n  pingInterval?: number\n\n  /**\n   * Timeout settings for how long the ping is allowed to take before the\n   * connection will be judged inactive and aborted.\n   *\n   * The timeout is adaptive to cope with slower networks or nodes that\n   * have changing network characteristics, such as mobile.\n   */\n  pingTimeout?: Omit<AdaptiveTimeoutInit, 'metricsName' | 'metrics'>\n\n  /**\n   * If true, any connection that fails the ping will be aborted\n   *\n   * @default true\n   */\n  abortConnectionOnPingFailure?: boolean\n\n  /**\n   * Override the ping protocol prefix\n   *\n   * @default 'ipfs'\n   */\n  protocolPrefix?: string\n}\n\nexport interface ConnectionMonitorComponents {\n  logger: ComponentLogger\n  connectionManager: ConnectionManager\n  metrics?: Metrics\n}\n\nexport class ConnectionMonitor implements Startable {\n  private readonly protocol: string\n  private readonly components: ConnectionMonitorComponents\n  private readonly log: Logger\n  private heartbeatInterval?: ReturnType<typeof setInterval>\n  private readonly pingIntervalMs: number\n  private abortController?: AbortController\n  private readonly timeout: AdaptiveTimeout\n  private readonly abortConnectionOnPingFailure: boolean\n\n  constructor (components: ConnectionMonitorComponents, init: ConnectionMonitorInit = {}) {\n    this.components = components\n    this.protocol = `/${init.protocolPrefix ?? PROTOCOL_PREFIX}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`\n\n    this.log = components.logger.forComponent('libp2p:connection-monitor')\n    this.pingIntervalMs = init.pingInterval ?? DEFAULT_PING_INTERVAL_MS\n    this.abortConnectionOnPingFailure = init.abortConnectionOnPingFailure ?? DEFAULT_ABORT_CONNECTION_ON_PING_FAILURE\n    this.timeout = new AdaptiveTimeout({\n      ...(init.pingTimeout ?? {}),\n      metrics: components.metrics,\n      metricName: 'libp2p_connection_monitor_ping_time_milliseconds'\n    })\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/connection-monitor'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/connection-monitor'\n  ]\n\n  start (): void {\n    this.abortController = new AbortController()\n    setMaxListeners(Infinity, this.abortController.signal)\n\n    this.heartbeatInterval = setInterval(() => {\n      this.components.connectionManager.getConnections().forEach(conn => {\n        Promise.resolve().then(async () => {\n          let start = Date.now()\n          try {\n            const signal = this.timeout.getTimeoutSignal({\n              signal: this.abortController?.signal\n            })\n            const stream = await conn.newStream(this.protocol, {\n              signal,\n              runOnLimitedConnection: true\n            })\n            const bs = byteStream(stream)\n            start = Date.now()\n\n            await Promise.all([\n              bs.write(randomBytes(PING_LENGTH), {\n                signal\n              }),\n              bs.read(PING_LENGTH, {\n                signal\n              })\n            ])\n\n            conn.rtt = Date.now() - start\n\n            await bs.unwrap().close({\n              signal\n            })\n          } catch (err: any) {\n            if (err.name !== 'UnsupportedProtocolError') {\n              throw err\n            }\n\n            // protocol was unsupported, but that's ok as it means the remote\n            // peer was still alive. We ran multistream-select which means two\n            // round trips (e.g. 1x for the mss header, then another for the\n            // protocol) so divide the time it took by two\n            conn.rtt = (Date.now() - start) / 2\n          }\n        })\n          .catch(err => {\n            this.log.error('error during heartbeat', err)\n\n            if (this.abortConnectionOnPingFailure) {\n              this.log.error('aborting connection due to ping failure')\n              conn.abort(err)\n            } else {\n              this.log('connection ping failed, but not aborting due to abortConnectionOnPingFailure flag')\n            }\n          })\n      })\n    }, this.pingIntervalMs)\n  }\n\n  stop (): void {\n    this.abortController?.abort()\n\n    if (this.heartbeatInterval != null) {\n      clearInterval(this.heartbeatInterval)\n    }\n  }\n}\n","export default function pDefer() {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n}\n","/**\n * An abort error class that extends error\n */\nexport class AbortError extends Error {\n  public type: string\n  public code: string | string\n\n  constructor (message?: string, code?: string, name?: string) {\n    super(message ?? 'The operation was aborted')\n    this.type = 'aborted'\n    this.name = name ?? 'AbortError'\n    this.code = code ?? 'ABORT_ERR'\n  }\n}\n\nexport interface RaceSignalOptions {\n  /**\n   * The message for the error thrown if the signal aborts\n   */\n  errorMessage?: string\n\n  /**\n   * The code for the error thrown if the signal aborts\n   */\n  errorCode?: string\n\n  /**\n   * The name for the error thrown if the signal aborts\n   */\n  errorName?: string\n}\n\n/**\n * Race a promise against an abort signal\n */\nexport async function raceSignal <T> (promise: Promise<T>, signal?: AbortSignal, opts?: RaceSignalOptions): Promise<T> {\n  if (signal == null) {\n    return promise\n  }\n\n  if (signal.aborted) {\n    return Promise.reject(new AbortError(opts?.errorMessage, opts?.errorCode, opts?.errorName))\n  }\n\n  let listener\n\n  // create the error here so we have more context in the stack trace\n  const error = new AbortError(opts?.errorMessage, opts?.errorCode, opts?.errorName)\n\n  try {\n    return await Promise.race([\n      promise,\n      new Promise<T>((resolve, reject) => {\n        listener = () => {\n          reject(error)\n        }\n        signal.addEventListener('abort', listener)\n      })\n    ])\n  } finally {\n    if (listener != null) {\n      signal.removeEventListener('abort', listener)\n    }\n  }\n}\n","/**\n * @packageDocumentation\n *\n * A pushable async generator that waits until the current value is consumed\n * before allowing a new value to be pushed.\n *\n * Useful for when you don't want to keep memory usage under control and/or\n * allow a downstream consumer to dictate how fast data flows through a pipe,\n * but you want to be able to apply a transform to that data.\n *\n * @example\n *\n * ```typescript\n * import { queuelessPushable } from 'it-queueless-pushable'\n *\n * const pushable = queuelessPushable<string>()\n *\n * // run asynchronously\n * Promise.resolve().then(async () => {\n *   // push a value - the returned promise will not resolve until the value is\n *   // read from the pushable\n *   await pushable.push('hello')\n * })\n *\n * // read a value\n * const result = await pushable.next()\n * console.info(result) // { done: false, value: 'hello' }\n * ```\n */\n\nimport deferred, { type DeferredPromise } from 'p-defer'\nimport { raceSignal, type RaceSignalOptions } from 'race-signal'\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport interface Pushable<T> extends AsyncGenerator<T, void, unknown> {\n  /**\n   * End the iterable after all values in the buffer (if any) have been yielded. If an\n   * error is passed the buffer is cleared immediately and the next iteration will\n   * throw the passed error\n   */\n  end(err?: Error, options?: AbortOptions & RaceSignalOptions): Promise<void>\n\n  /**\n   * Push a value into the iterable. Values are yielded from the iterable in the order\n   * they are pushed. Values not yet consumed from the iterable are buffered.\n   */\n  push(value: T, options?: AbortOptions & RaceSignalOptions): Promise<void>\n}\n\nclass QueuelessPushable <T> implements Pushable<T> {\n  private readNext: DeferredPromise<void>\n  private haveNext: DeferredPromise<void>\n  private ended: boolean\n  private nextResult: IteratorResult<T> | undefined\n\n  constructor () {\n    this.ended = false\n\n    this.readNext = deferred()\n    this.haveNext = deferred()\n  }\n\n  [Symbol.asyncIterator] (): AsyncGenerator<T, void, unknown> {\n    return this\n  }\n\n  async next (): Promise<IteratorResult<T, void>> {\n    if (this.nextResult == null) {\n      // wait for the supplier to push a value\n      await this.haveNext.promise\n    }\n\n    if (this.nextResult == null) {\n      throw new Error('HaveNext promise resolved but nextResult was undefined')\n    }\n\n    const nextResult = this.nextResult\n    this.nextResult = undefined\n\n    // signal to the supplier that we read the value\n    this.readNext.resolve()\n    this.readNext = deferred()\n\n    return nextResult\n  }\n\n  async throw (err?: Error): Promise<IteratorReturnResult<undefined>> {\n    this.ended = true\n\n    if (err != null) {\n      // this can cause unhandled promise rejections if nothing is awaiting the\n      // next value so attach a dummy catch listener to the promise\n      this.haveNext.promise.catch(() => {})\n      this.haveNext.reject(err)\n    }\n\n    const result: IteratorReturnResult<undefined> = {\n      done: true,\n      value: undefined\n    }\n\n    return result\n  }\n\n  async return (): Promise<IteratorResult<T>> {\n    const result: IteratorReturnResult<undefined> = {\n      done: true,\n      value: undefined\n    }\n\n    await this._push(undefined)\n\n    return result\n  }\n\n  async push (value: T, options?: AbortOptions & RaceSignalOptions): Promise<void> {\n    await this._push(value, options)\n  }\n\n  async end (err?: Error, options?: AbortOptions & RaceSignalOptions): Promise<void> {\n    if (err != null) {\n      await this.throw(err)\n    } else {\n      // abortable return\n      await this._push(undefined, options)\n    }\n  }\n\n  private async _push (value?: T, options?: AbortOptions & RaceSignalOptions): Promise<void> {\n    if (value != null && this.ended) {\n      throw new Error('Cannot push value onto an ended pushable')\n    }\n\n    // wait for all values to be read\n    while (this.nextResult != null) {\n      await this.readNext.promise\n    }\n\n    if (value != null) {\n      this.nextResult = { done: false, value }\n    } else {\n      this.ended = true\n      this.nextResult = { done: true, value: undefined }\n    }\n\n    // let the consumer know we have a new value\n    this.haveNext.resolve()\n    this.haveNext = deferred()\n\n    // wait for the consumer to have finished processing the value and requested\n    // the next one or for the passed signal to abort the waiting\n    await raceSignal(\n      this.readNext.promise,\n      options?.signal,\n      options\n    )\n  }\n}\n\nexport function queuelessPushable <T> (): Pushable<T> {\n  return new QueuelessPushable<T>()\n}\n","/**\n * @packageDocumentation\n *\n * A class that lets you do operations over a list of Uint8Arrays without\n * copying them.\n *\n * ```js\n * import { Uint8ArrayList } from 'uint8arraylist'\n *\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.subarray()\n * // -> Uint8Array([0, 1, 2, 3, 4, 5])\n *\n * list.consume(3)\n * list.subarray()\n * // -> Uint8Array([3, 4, 5])\n *\n * // you can also iterate over the list\n * for (const buf of list) {\n *   // ..do something with `buf`\n * }\n *\n * list.subarray(0, 1)\n * // -> Uint8Array([0])\n * ```\n *\n * ## Converting Uint8ArrayLists to Uint8Arrays\n *\n * There are two ways to turn a `Uint8ArrayList` into a `Uint8Array` - `.slice` and `.subarray` and one way to turn a `Uint8ArrayList` into a `Uint8ArrayList` with different contents - `.sublist`.\n *\n * ### slice\n *\n * Slice follows the same semantics as [Uint8Array.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice) in that it creates a new `Uint8Array` and copies bytes into it using an optional offset & length.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.slice(0, 1)\n * // -> Uint8Array([0])\n * ```\n *\n * ### subarray\n *\n * Subarray attempts to follow the same semantics as [Uint8Array.subarray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray) with one important different - this is a no-copy operation, unless the requested bytes span two internal buffers in which case it is a copy operation.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.subarray(0, 1)\n * // -> Uint8Array([0]) - no-copy\n *\n * list.subarray(2, 5)\n * // -> Uint8Array([2, 3, 4]) - copy\n * ```\n *\n * ### sublist\n *\n * Sublist creates and returns a new `Uint8ArrayList` that shares the underlying buffers with the original so is always a no-copy operation.\n *\n * ```js\n * const list = new Uint8ArrayList()\n * list.append(Uint8Array.from([0, 1, 2]))\n * list.append(Uint8Array.from([3, 4, 5]))\n *\n * list.sublist(0, 1)\n * // -> Uint8ArrayList([0]) - no-copy\n *\n * list.sublist(2, 5)\n * // -> Uint8ArrayList([2], [3, 4]) - no-copy\n * ```\n *\n * ## Inspiration\n *\n * Borrows liberally from [bl](https://www.npmjs.com/package/bl) but only uses native JS types.\n */\nimport { allocUnsafe, alloc } from 'uint8arrays/alloc'\nimport { concat } from 'uint8arrays/concat'\nimport { equals } from 'uint8arrays/equals'\n\nconst symbol = Symbol.for('@achingbrain/uint8arraylist')\n\nexport type Appendable = Uint8ArrayList | Uint8Array\n\nfunction findBufAndOffset (bufs: Uint8Array[], index: number): { buf: Uint8Array, index: number } {\n  if (index == null || index < 0) {\n    throw new RangeError('index is out of bounds')\n  }\n\n  let offset = 0\n\n  for (const buf of bufs) {\n    const bufEnd = offset + buf.byteLength\n\n    if (index < bufEnd) {\n      return {\n        buf,\n        index: index - offset\n      }\n    }\n\n    offset = bufEnd\n  }\n\n  throw new RangeError('index is out of bounds')\n}\n\n/**\n * Check if object is a CID instance\n *\n * @example\n *\n * ```js\n * import { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist'\n *\n * isUint8ArrayList(true) // false\n * isUint8ArrayList([]) // false\n * isUint8ArrayList(new Uint8ArrayList()) // true\n * ```\n */\nexport function isUint8ArrayList (value: any): value is Uint8ArrayList {\n  return Boolean(value?.[symbol])\n}\n\nexport class Uint8ArrayList implements Iterable<Uint8Array> {\n  private bufs: Uint8Array[]\n  public length: number\n  public readonly [symbol] = true\n\n  constructor (...data: Appendable[]) {\n    this.bufs = []\n    this.length = 0\n\n    if (data.length > 0) {\n      this.appendAll(data)\n    }\n  }\n\n  * [Symbol.iterator] (): Iterator<Uint8Array> {\n    yield * this.bufs\n  }\n\n  get byteLength (): number {\n    return this.length\n  }\n\n  /**\n   * Add one or more `bufs` to the end of this Uint8ArrayList\n   */\n  append (...bufs: Appendable[]): void {\n    this.appendAll(bufs)\n  }\n\n  /**\n   * Add all `bufs` to the end of this Uint8ArrayList\n   */\n  appendAll (bufs: Appendable[]): void {\n    let length = 0\n\n    for (const buf of bufs) {\n      if (buf instanceof Uint8Array) {\n        length += buf.byteLength\n        this.bufs.push(buf)\n      } else if (isUint8ArrayList(buf)) {\n        length += buf.byteLength\n        this.bufs.push(...buf.bufs)\n      } else {\n        throw new Error('Could not append value, must be an Uint8Array or a Uint8ArrayList')\n      }\n    }\n\n    this.length += length\n  }\n\n  /**\n   * Add one or more `bufs` to the start of this Uint8ArrayList\n   */\n  prepend (...bufs: Appendable[]): void {\n    this.prependAll(bufs)\n  }\n\n  /**\n   * Add all `bufs` to the start of this Uint8ArrayList\n   */\n  prependAll (bufs: Appendable[]): void {\n    let length = 0\n\n    for (const buf of bufs.reverse()) {\n      if (buf instanceof Uint8Array) {\n        length += buf.byteLength\n        this.bufs.unshift(buf)\n      } else if (isUint8ArrayList(buf)) {\n        length += buf.byteLength\n        this.bufs.unshift(...buf.bufs)\n      } else {\n        throw new Error('Could not prepend value, must be an Uint8Array or a Uint8ArrayList')\n      }\n    }\n\n    this.length += length\n  }\n\n  /**\n   * Read the value at `index`\n   */\n  get (index: number): number {\n    const res = findBufAndOffset(this.bufs, index)\n\n    return res.buf[res.index]\n  }\n\n  /**\n   * Set the value at `index` to `value`\n   */\n  set (index: number, value: number): void {\n    const res = findBufAndOffset(this.bufs, index)\n\n    res.buf[res.index] = value\n  }\n\n  /**\n   * Copy bytes from `buf` to the index specified by `offset`\n   */\n  write (buf: Appendable, offset: number = 0): void {\n    if (buf instanceof Uint8Array) {\n      for (let i = 0; i < buf.length; i++) {\n        this.set(offset + i, buf[i])\n      }\n    } else if (isUint8ArrayList(buf)) {\n      for (let i = 0; i < buf.length; i++) {\n        this.set(offset + i, buf.get(i))\n      }\n    } else {\n      throw new Error('Could not write value, must be an Uint8Array or a Uint8ArrayList')\n    }\n  }\n\n  /**\n   * Remove bytes from the front of the pool\n   */\n  consume (bytes: number): void {\n    // first, normalize the argument, in accordance with how Buffer does it\n    bytes = Math.trunc(bytes)\n\n    // do nothing if not a positive number\n    if (Number.isNaN(bytes) || bytes <= 0) {\n      return\n    }\n\n    // if consuming all bytes, skip iterating\n    if (bytes === this.byteLength) {\n      this.bufs = []\n      this.length = 0\n      return\n    }\n\n    while (this.bufs.length > 0) {\n      if (bytes >= this.bufs[0].byteLength) {\n        bytes -= this.bufs[0].byteLength\n        this.length -= this.bufs[0].byteLength\n        this.bufs.shift()\n      } else {\n        this.bufs[0] = this.bufs[0].subarray(bytes)\n        this.length -= bytes\n        break\n      }\n    }\n  }\n\n  /**\n   * Extracts a section of an array and returns a new array.\n   *\n   * This is a copy operation as it is with Uint8Arrays and Arrays\n   * - note this is different to the behaviour of Node Buffers.\n   */\n  slice (beginInclusive?: number, endExclusive?: number): Uint8Array {\n    const { bufs, length } = this._subList(beginInclusive, endExclusive)\n\n    return concat(bufs, length)\n  }\n\n  /**\n   * Returns a alloc from the given start and end element index.\n   *\n   * In the best case where the data extracted comes from a single Uint8Array\n   * internally this is a no-copy operation otherwise it is a copy operation.\n   */\n  subarray (beginInclusive?: number, endExclusive?: number): Uint8Array {\n    const { bufs, length } = this._subList(beginInclusive, endExclusive)\n\n    if (bufs.length === 1) {\n      return bufs[0]\n    }\n\n    return concat(bufs, length)\n  }\n\n  /**\n   * Returns a allocList from the given start and end element index.\n   *\n   * This is a no-copy operation.\n   */\n  sublist (beginInclusive?: number, endExclusive?: number): Uint8ArrayList {\n    const { bufs, length } = this._subList(beginInclusive, endExclusive)\n\n    const list = new Uint8ArrayList()\n    list.length = length\n    // don't loop, just set the bufs\n    list.bufs = [...bufs]\n\n    return list\n  }\n\n  private _subList (beginInclusive?: number, endExclusive?: number): { bufs: Uint8Array[], length: number } {\n    beginInclusive = beginInclusive ?? 0\n    endExclusive = endExclusive ?? this.length\n\n    if (beginInclusive < 0) {\n      beginInclusive = this.length + beginInclusive\n    }\n\n    if (endExclusive < 0) {\n      endExclusive = this.length + endExclusive\n    }\n\n    if (beginInclusive < 0 || endExclusive > this.length) {\n      throw new RangeError('index is out of bounds')\n    }\n\n    if (beginInclusive === endExclusive) {\n      return { bufs: [], length: 0 }\n    }\n\n    if (beginInclusive === 0 && endExclusive === this.length) {\n      return { bufs: this.bufs, length: this.length }\n    }\n\n    const bufs: Uint8Array[] = []\n    let offset = 0\n\n    for (let i = 0; i < this.bufs.length; i++) {\n      const buf = this.bufs[i]\n      const bufStart = offset\n      const bufEnd = bufStart + buf.byteLength\n\n      // for next loop\n      offset = bufEnd\n\n      if (beginInclusive >= bufEnd) {\n        // start after this buf\n        continue\n      }\n\n      const sliceStartInBuf = beginInclusive >= bufStart && beginInclusive < bufEnd\n      const sliceEndsInBuf = endExclusive > bufStart && endExclusive <= bufEnd\n\n      if (sliceStartInBuf && sliceEndsInBuf) {\n        // slice is wholly contained within this buffer\n        if (beginInclusive === bufStart && endExclusive === bufEnd) {\n          // requested whole buffer\n          bufs.push(buf)\n          break\n        }\n\n        // requested part of buffer\n        const start = beginInclusive - bufStart\n        bufs.push(buf.subarray(start, start + (endExclusive - beginInclusive)))\n        break\n      }\n\n      if (sliceStartInBuf) {\n        // slice starts in this buffer\n        if (beginInclusive === 0) {\n          // requested whole buffer\n          bufs.push(buf)\n          continue\n        }\n\n        // requested part of buffer\n        bufs.push(buf.subarray(beginInclusive - bufStart))\n        continue\n      }\n\n      if (sliceEndsInBuf) {\n        if (endExclusive === bufEnd) {\n          // requested whole buffer\n          bufs.push(buf)\n          break\n        }\n\n        // requested part of buffer\n        bufs.push(buf.subarray(0, endExclusive - bufStart))\n        break\n      }\n\n      // slice started before this buffer and ends after it\n      bufs.push(buf)\n    }\n\n    return { bufs, length: endExclusive - beginInclusive }\n  }\n\n  indexOf (search: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n    if (!isUint8ArrayList(search) && !(search instanceof Uint8Array)) {\n      throw new TypeError('The \"value\" argument must be a Uint8ArrayList or Uint8Array')\n    }\n\n    const needle = search instanceof Uint8Array ? search : search.subarray()\n\n    offset = Number(offset ?? 0)\n\n    if (isNaN(offset)) {\n      offset = 0\n    }\n\n    if (offset < 0) {\n      offset = this.length + offset\n    }\n\n    if (offset < 0) {\n      offset = 0\n    }\n\n    if (search.length === 0) {\n      return offset > this.length ? this.length : offset\n    }\n\n    // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm\n    const M: number = needle.byteLength\n\n    if (M === 0) {\n      throw new TypeError('search must be at least 1 byte long')\n    }\n\n    // radix\n    const radix: number = 256\n    const rightmostPositions: Int32Array = new Int32Array(radix)\n\n    // position of the rightmost occurrence of the byte c in the pattern\n    for (let c: number = 0; c < radix; c++) {\n      // -1 for bytes not in pattern\n      rightmostPositions[c] = -1\n    }\n\n    for (let j = 0; j < M; j++) {\n      // rightmost position for bytes in pattern\n      rightmostPositions[needle[j]] = j\n    }\n\n    // Return offset of first match, -1 if no match\n    const right = rightmostPositions\n    const lastIndex = this.byteLength - needle.byteLength\n    const lastPatIndex = needle.byteLength - 1\n    let skip: number\n\n    for (let i = offset; i <= lastIndex; i += skip) {\n      skip = 0\n\n      for (let j = lastPatIndex; j >= 0; j--) {\n        const char: number = this.get(i + j)\n\n        if (needle[j] !== char) {\n          skip = Math.max(1, j - right[char])\n          break\n        }\n      }\n\n      if (skip === 0) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  getInt8 (byteOffset: number): number {\n    const buf = this.subarray(byteOffset, byteOffset + 1)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getInt8(0)\n  }\n\n  setInt8 (byteOffset: number, value: number): void {\n    const buf = allocUnsafe(1)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setInt8(0, value)\n\n    this.write(buf, byteOffset)\n  }\n\n  getInt16 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 2)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getInt16(0, littleEndian)\n  }\n\n  setInt16 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(2)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setInt16(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getInt32 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getInt32(0, littleEndian)\n  }\n\n  setInt32 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setInt32(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getBigInt64 (byteOffset: number, littleEndian?: boolean): bigint {\n    const buf = this.subarray(byteOffset, byteOffset + 8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getBigInt64(0, littleEndian)\n  }\n\n  setBigInt64 (byteOffset: number, value: bigint, littleEndian?: boolean): void {\n    const buf = alloc(8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setBigInt64(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getUint8 (byteOffset: number): number {\n    const buf = this.subarray(byteOffset, byteOffset + 1)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getUint8(0)\n  }\n\n  setUint8 (byteOffset: number, value: number): void {\n    const buf = allocUnsafe(1)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setUint8(0, value)\n\n    this.write(buf, byteOffset)\n  }\n\n  getUint16 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 2)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getUint16(0, littleEndian)\n  }\n\n  setUint16 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(2)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setUint16(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getUint32 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getUint32(0, littleEndian)\n  }\n\n  setUint32 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setUint32(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getBigUint64 (byteOffset: number, littleEndian?: boolean): bigint {\n    const buf = this.subarray(byteOffset, byteOffset + 8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getBigUint64(0, littleEndian)\n  }\n\n  setBigUint64 (byteOffset: number, value: bigint, littleEndian?: boolean): void {\n    const buf = alloc(8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setBigUint64(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getFloat32 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getFloat32(0, littleEndian)\n  }\n\n  setFloat32 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(4)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setFloat32(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  getFloat64 (byteOffset: number, littleEndian?: boolean): number {\n    const buf = this.subarray(byteOffset, byteOffset + 8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n\n    return view.getFloat64(0, littleEndian)\n  }\n\n  setFloat64 (byteOffset: number, value: number, littleEndian?: boolean): void {\n    const buf = alloc(8)\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n    view.setFloat64(0, value, littleEndian)\n\n    this.write(buf, byteOffset)\n  }\n\n  equals (other: any): other is Uint8ArrayList {\n    if (other == null) {\n      return false\n    }\n\n    if (!(other instanceof Uint8ArrayList)) {\n      return false\n    }\n\n    if (other.bufs.length !== this.bufs.length) {\n      return false\n    }\n\n    for (let i = 0; i < this.bufs.length; i++) {\n      if (!equals(this.bufs[i], other.bufs[i])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Create a Uint8ArrayList from a pre-existing list of Uint8Arrays.  Use this\n   * method if you know the total size of all the Uint8Arrays ahead of time.\n   */\n  static fromUint8Arrays (bufs: Uint8Array[], length?: number): Uint8ArrayList {\n    const list = new Uint8ArrayList()\n    list.bufs = bufs\n\n    if (length == null) {\n      length = bufs.reduce((acc, curr) => acc + curr.byteLength, 0)\n    }\n\n    list.length = length\n\n    return list\n  }\n}\n\n/*\nfunction indexOf (needle: Uint8Array, haystack: Uint8Array, offset = 0) {\n  for (let i = offset; i < haystack.byteLength; i++) {\n    for (let j = 0; j < needle.length; j++) {\n      if (haystack[i + j] !== needle[j]) {\n        break\n      }\n\n      if (j === needle.byteLength -1) {\n        return i\n      }\n    }\n\n    if (haystack.byteLength - i < needle.byteLength) {\n      break\n    }\n  }\n\n  return -1\n}\n*/\n","/**\n * The incoming stream ended before the expected number of bytes were read\n */\nexport class UnexpectedEOFError extends Error {\n  name = 'UnexpectedEOFError'\n  code = 'ERR_UNEXPECTED_EOF'\n}\n","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive bytes over streams.\n *\n * @example\n *\n * ```typescript\n * import { byteStream } from 'it-byte-stream'\n *\n * const stream = byteStream(duplex)\n *\n * // read the next chunk\n * const bytes = await stream.read()\n *\n * // read the next five bytes\n * const fiveBytes = await stream.read(5)\n *\n * // write bytes into the stream\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n * ```\n */\n\nimport { queuelessPushable } from 'it-queueless-pushable'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { UnexpectedEOFError } from './errors.js'\nimport type { Duplex } from 'it-stream-types'\n\n/**\n * @deprecated This will not be exported in a future release\n */\nexport class CodeError extends Error {\n  public readonly code: string\n\n  constructor (message: string, code: string) {\n    super(message)\n    this.code = code\n  }\n}\n\n/**\n * @deprecated This will not be exported in a future release\n */\nexport class AbortError extends CodeError {\n  public readonly type: string\n\n  constructor (message: string) {\n    super(message, 'ABORT_ERR')\n    this.type = 'aborted'\n    this.name = 'AbortError'\n  }\n}\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport interface ByteStream <Stream = unknown> {\n  /**\n   * Read a set number of bytes from the stream\n   */\n  read(bytes?: number, options?: AbortOptions): Promise<Uint8ArrayList>\n\n  /**\n   * Write the passed bytes to the stream\n   */\n  write(input: Uint8Array | Uint8ArrayList, options?: AbortOptions): Promise<void>\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap(): Stream\n}\n\nexport interface ByteStreamOpts {\n  /**\n   * After the stream is unwrapped, any bytes that have been read from the\n   * incoming stream will be yielded in-order as `Uint8Array`(s).\n   *\n   * To yield a single `Uint8ArrayList` with all unread bytes instead, pass\n   * `false` here.\n   */\n  yieldBytes?: boolean\n}\n\nexport function byteStream <Stream extends Duplex<any, any, any>> (duplex: Stream, opts?: ByteStreamOpts): ByteStream<Stream> {\n  const write = queuelessPushable()\n\n  duplex.sink(write).catch(async (err: Error) => {\n    await write.end(err)\n  })\n\n  duplex.sink = async (source: any) => {\n    for await (const buf of source) {\n      await write.push(buf)\n    }\n\n    await write.end()\n  }\n\n  let source = duplex.source\n\n  if (duplex.source[Symbol.iterator] != null) {\n    source = duplex.source[Symbol.iterator]()\n  } else if (duplex.source[Symbol.asyncIterator] != null) {\n    source = duplex.source[Symbol.asyncIterator]()\n  }\n\n  const readBuffer = new Uint8ArrayList()\n\n  const W: ByteStream<Stream> = {\n    read: async (bytes?: number, options?: AbortOptions) => {\n      options?.signal?.throwIfAborted()\n\n      let listener: EventListener | undefined\n\n      const abortPromise = new Promise((resolve, reject) => {\n        listener = () => {\n          reject(new AbortError('Read aborted'))\n        }\n\n        options?.signal?.addEventListener('abort', listener)\n      })\n\n      try {\n        if (bytes == null) {\n          // just read whatever arrives\n          const { done, value } = await Promise.race([\n            source.next(),\n            abortPromise\n          ])\n\n          if (done === true) {\n            return new Uint8ArrayList()\n          }\n\n          return value\n        }\n\n        while (readBuffer.byteLength < bytes) {\n          const { value, done } = await Promise.race([\n            source.next(),\n            abortPromise\n          ])\n\n          if (done === true) {\n            throw new UnexpectedEOFError('unexpected end of input')\n          }\n\n          readBuffer.append(value)\n        }\n\n        const buf = readBuffer.sublist(0, bytes)\n        readBuffer.consume(bytes)\n\n        return buf\n      } finally {\n        if (listener != null) {\n          options?.signal?.removeEventListener('abort', listener)\n        }\n      }\n    },\n    write: async (data, options?: AbortOptions) => {\n      options?.signal?.throwIfAborted()\n\n      // just write\n      if (data instanceof Uint8Array) {\n        await write.push(data, options)\n      } else {\n        await write.push(data.subarray(), options)\n      }\n    },\n    unwrap: () => {\n      if (readBuffer.byteLength > 0) {\n        const originalStream = duplex.source\n        duplex.source = (async function * () {\n          if (opts?.yieldBytes === false) {\n            yield readBuffer\n          } else {\n            yield * readBuffer\n          }\n\n          yield * originalStream\n        }())\n      }\n\n      return duplex\n    }\n  }\n\n  return W\n}\n","import { NotStartedError } from '@libp2p/interface'\nimport { PeerSet } from '@libp2p/peer-collections'\nimport merge from 'it-merge'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NoContentRoutersError } from './errors.js'\nimport type { AbortOptions, ComponentLogger, ContentRouting, Metrics, PeerInfo, PeerRouting, PeerStore, RoutingOptions, Startable } from '@libp2p/interface'\nimport type { CID } from 'multiformats/cid'\n\nexport interface CompoundContentRoutingInit {\n  routers: ContentRouting[]\n}\n\nexport interface CompoundContentRoutingComponents {\n  peerStore: PeerStore\n  peerRouting: PeerRouting\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport class CompoundContentRouting implements ContentRouting, Startable {\n  private readonly routers: ContentRouting[]\n  private started: boolean\n  private readonly components: CompoundContentRoutingComponents\n\n  constructor (components: CompoundContentRoutingComponents, init: CompoundContentRoutingInit) {\n    this.routers = init.routers ?? []\n    this.started = false\n    this.components = components\n\n    this.findProviders = components.metrics?.traceFunction('libp2p.contentRouting.findProviders', this.findProviders.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      },\n      getAttributesFromYieldedValue: (value, attrs: { providers?: string[] }) => {\n        return {\n          ...attrs,\n          providers: [...(Array.isArray(attrs.providers) ? attrs.providers : []), value.id.toString()]\n        }\n      }\n    }) ?? this.findProviders\n    this.provide = components.metrics?.traceFunction('libp2p.contentRouting.provide', this.provide.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      }\n    }) ?? this.provide\n    this.cancelReprovide = components.metrics?.traceFunction('libp2p.contentRouting.cancelReprovide', this.cancelReprovide.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([cid], attrs) => {\n        return {\n          ...attrs,\n          cid: cid.toString()\n        }\n      }\n    }) ?? this.cancelReprovide\n    this.put = components.metrics?.traceFunction('libp2p.contentRouting.put', this.put.bind(this), {\n      optionsIndex: 2,\n      getAttributesFromArgs: ([key]) => {\n        return {\n          key: uint8ArrayToString(key, 'base36')\n        }\n      }\n    }) ?? this.put\n    this.get = components.metrics?.traceFunction('libp2p.contentRouting.get', this.get.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([key]) => {\n        return {\n          key: uint8ArrayToString(key, 'base36')\n        }\n      }\n    }) ?? this.get\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/content-routing'\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  async start (): Promise<void> {\n    this.started = true\n  }\n\n  async stop (): Promise<void> {\n    this.started = false\n  }\n\n  /**\n   * Iterates over all content routers in parallel to find providers of the given key\n   */\n  async * findProviders (key: CID, options: RoutingOptions = {}): AsyncGenerator<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    const self = this\n    const seen = new PeerSet()\n\n    for await (const peer of merge(\n      ...self.routers.map(router => router.findProviders(key, options))\n    )) {\n      // the peer was yielded by a content router without multiaddrs and we\n      // failed to load them\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.components.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        })\n      }\n\n      // deduplicate peers\n      if (seen.has(peer.id)) {\n        continue\n      }\n\n      seen.add(peer.id)\n\n      yield peer\n    }\n  }\n\n  /**\n   * Iterates over all content routers in parallel to notify it is\n   * a provider of the given key\n   */\n  async provide (key: CID, options: AbortOptions = {}): Promise<void> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    await Promise.all(this.routers.map(async (router) => {\n      await router.provide(key, options)\n    }))\n  }\n\n  async cancelReprovide (key: CID, options: AbortOptions = {}): Promise<void> {\n    if (this.routers.length === 0) {\n      throw new NoContentRoutersError('No content routers available')\n    }\n\n    await Promise.all(this.routers.map(async (router) => {\n      await router.cancelReprovide(key, options)\n    }))\n  }\n\n  /**\n   * Store the given key/value pair in the available content routings\n   */\n  async put (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> {\n    if (!this.isStarted()) {\n      throw new NotStartedError()\n    }\n\n    await Promise.all(this.routers.map(async (router) => {\n      await router.put(key, value, options)\n    }))\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   */\n  async get (key: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n    if (!this.isStarted()) {\n      throw new NotStartedError()\n    }\n\n    return Promise.any(this.routers.map(async (router) => {\n      return router.get(key, options)\n    }))\n  }\n}\n","// ported from https://www.npmjs.com/package/fast-fifo\n\nexport interface Next<T> {\n  done?: boolean\n  error?: Error\n  value?: T\n}\n\nclass FixedFIFO<T> {\n  public buffer: Array<Next<T> | undefined>\n  private readonly mask: number\n  private top: number\n  private btm: number\n  public next: FixedFIFO<T> | null\n\n  constructor (hwm: number) {\n    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) {\n      throw new Error('Max size for a FixedFIFO should be a power of two')\n    }\n\n    this.buffer = new Array(hwm)\n    this.mask = hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.next = null\n  }\n\n  push (data: Next<T>): boolean {\n    if (this.buffer[this.top] !== undefined) {\n      return false\n    }\n\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n\n    return true\n  }\n\n  shift (): Next<T> | undefined {\n    const last = this.buffer[this.btm]\n\n    if (last === undefined) {\n      return undefined\n    }\n\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    return last\n  }\n\n  isEmpty (): boolean {\n    return this.buffer[this.btm] === undefined\n  }\n}\n\nexport interface FIFOOptions {\n  /**\n   * When the queue reaches this size, it will be split into head/tail parts\n   */\n  splitLimit?: number\n}\n\nexport class FIFO<T> {\n  public size: number\n  private readonly hwm: number\n  private head: FixedFIFO<T>\n  private tail: FixedFIFO<T>\n\n  constructor (options: FIFOOptions = {}) {\n    this.hwm = options.splitLimit ?? 16\n    this.head = new FixedFIFO<T>(this.hwm)\n    this.tail = this.head\n    this.size = 0\n  }\n\n  calculateSize (obj: any): number {\n    if (obj?.byteLength != null) {\n      return obj.byteLength\n    }\n\n    return 1\n  }\n\n  push (val: Next<T>): void {\n    if (val?.value != null) {\n      this.size += this.calculateSize(val.value)\n    }\n\n    if (!this.head.push(val)) {\n      const prev = this.head\n      this.head = prev.next = new FixedFIFO<T>(2 * this.head.buffer.length)\n      this.head.push(val)\n    }\n  }\n\n  shift (): Next<T> | undefined {\n    let val = this.tail.shift()\n\n    if (val === undefined && (this.tail.next != null)) {\n      const next = this.tail.next\n      this.tail.next = null\n      this.tail = next\n      val = this.tail.shift()\n    }\n\n    if (val?.value != null) {\n      this.size -= this.calculateSize(val.value)\n    }\n\n    return val\n  }\n\n  isEmpty (): boolean {\n    return this.head.isEmpty()\n  }\n}\n","/**\n * @packageDocumentation\n *\n * An iterable that you can push values into.\n *\n * @example\n *\n * ```js\n * import { pushable } from 'it-pushable'\n *\n * const source = pushable()\n *\n * setTimeout(() => source.push('hello'), 100)\n * setTimeout(() => source.push('world'), 200)\n * setTimeout(() => source.end(), 300)\n *\n * const start = Date.now()\n *\n * for await (const value of source) {\n *   console.log(`got \"${value}\" after ${Date.now() - start}ms`)\n * }\n * console.log(`done after ${Date.now() - start}ms`)\n *\n * // Output:\n * // got \"hello\" after 105ms\n * // got \"world\" after 207ms\n * // done after 309ms\n * ```\n *\n * @example\n *\n * ```js\n * import { pushableV } from 'it-pushable'\n * import all from 'it-all'\n *\n * const source = pushableV()\n *\n * source.push(1)\n * source.push(2)\n * source.push(3)\n * source.end()\n *\n * console.info(await all(source))\n *\n * // Output:\n * // [ [1, 2, 3] ]\n * ```\n */\n\nimport deferred from 'p-defer'\nimport { FIFO, type Next } from './fifo.js'\n\nexport class AbortError extends Error {\n  type: string\n  code: string\n\n  constructor (message?: string, code?: string) {\n    super(message ?? 'The operation was aborted')\n    this.type = 'aborted'\n    this.code = code ?? 'ABORT_ERR'\n  }\n}\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\ninterface BasePushable<T> {\n  /**\n   * End the iterable after all values in the buffer (if any) have been yielded. If an\n   * error is passed the buffer is cleared immediately and the next iteration will\n   * throw the passed error\n   */\n  end(err?: Error): this\n\n  /**\n   * Push a value into the iterable. Values are yielded from the iterable in the order\n   * they are pushed. Values not yet consumed from the iterable are buffered.\n   */\n  push(value: T): this\n\n  /**\n   * Returns a promise that resolves when the underlying queue becomes empty (e.g.\n   * this.readableLength === 0).\n   *\n   * If an AbortSignal is passed as an option and that signal aborts, it only\n   * causes the returned promise to reject - it does not end the pushable.\n   */\n  onEmpty(options?: AbortOptions): Promise<void>\n\n  /**\n   * This property contains the number of bytes (or objects) in the queue ready to be read.\n   *\n   * If `objectMode` is true, this is the number of objects in the queue, if false it's the\n   * total number of bytes in the queue.\n   */\n  readableLength: number\n}\n\n/**\n * An iterable that you can push values into.\n */\nexport interface Pushable<T, R = void, N = unknown> extends AsyncGenerator<T, R, N>, BasePushable<T> {}\n\n/**\n * Similar to `pushable`, except it yields multiple buffered chunks at a time. All values yielded from the iterable will be arrays.\n */\nexport interface PushableV<T, R = void, N = unknown> extends AsyncGenerator<T[], R, N>, BasePushable<T> {}\n\nexport interface Options {\n  /**\n   * A boolean value that means non-`Uint8Array`s will be passed to `.push`, default: `false`\n   */\n  objectMode?: boolean\n\n  /**\n   * A function called after *all* values have been yielded from the iterator (including\n   * buffered values). In the case when the iterator is ended with an error it will be\n   * passed the error as a parameter.\n   */\n  onEnd?(err?: Error): void\n}\n\nexport interface DoneResult { done: true }\nexport interface ValueResult<T> { done: false, value: T }\nexport type NextResult<T> = ValueResult<T> | DoneResult\n\ninterface getNext<T, V = T> { (buffer: FIFO<T>): NextResult<V> }\n\nexport interface ObjectPushableOptions extends Options {\n  objectMode: true\n}\n\nexport interface BytePushableOptions extends Options {\n  objectMode?: false\n}\n\n/**\n * Create a new async iterable. The values yielded from calls to `.next()`\n * or when used in a `for await of`loop are \"pushed\" into the iterable.\n * Returns an async iterable object with additional methods.\n */\nexport function pushable<T extends { byteLength: number } = Uint8Array> (options?: BytePushableOptions): Pushable<T>\nexport function pushable<T> (options: ObjectPushableOptions): Pushable<T>\nexport function pushable<T> (options: Options = {}): Pushable<T> {\n  const getNext = (buffer: FIFO<T>): NextResult<T> => {\n    const next: Next<T> | undefined = buffer.shift()\n\n    if (next == null) {\n      return { done: true }\n    }\n\n    if (next.error != null) {\n      throw next.error\n    }\n\n    return {\n      done: next.done === true,\n      // @ts-expect-error if done is false, value will be present\n      value: next.value\n    }\n  }\n\n  return _pushable<T, T, Pushable<T>>(getNext, options)\n}\n\nexport function pushableV<T extends { byteLength: number } = Uint8Array> (options?: BytePushableOptions): PushableV<T>\nexport function pushableV<T> (options: ObjectPushableOptions): PushableV<T>\nexport function pushableV<T> (options: Options = {}): PushableV<T> {\n  const getNext = (buffer: FIFO<T>): NextResult<T[]> => {\n    let next: Next<T> | undefined\n    const values: T[] = []\n\n    while (!buffer.isEmpty()) {\n      next = buffer.shift()\n\n      if (next == null) {\n        break\n      }\n\n      if (next.error != null) {\n        throw next.error\n      }\n\n      if (next.done === false) {\n        // @ts-expect-error if done is false value should be pushed\n        values.push(next.value)\n      }\n    }\n\n    if (next == null) {\n      return { done: true }\n    }\n\n    return {\n      done: next.done === true,\n      value: values\n    }\n  }\n\n  return _pushable<T, T[], PushableV<T>>(getNext, options)\n}\n\nfunction _pushable<PushType, ValueType, ReturnType> (getNext: getNext<PushType, ValueType>, options?: Options): ReturnType {\n  options = options ?? {}\n  let onEnd = options.onEnd\n  let buffer = new FIFO<PushType>()\n  let pushable: any\n  let onNext: ((next: Next<PushType>) => ReturnType) | null\n  let ended: boolean\n  let drain = deferred()\n\n  const waitNext = async (): Promise<NextResult<ValueType>> => {\n    try {\n      if (!buffer.isEmpty()) {\n        return getNext(buffer)\n      }\n\n      if (ended) {\n        return { done: true }\n      }\n\n      return await new Promise<NextResult<ValueType>>((resolve, reject) => {\n        onNext = (next: Next<PushType>) => {\n          onNext = null\n          buffer.push(next)\n\n          try {\n            resolve(getNext(buffer))\n          } catch (err) {\n            reject(err)\n          }\n\n          return pushable\n        }\n      })\n    } finally {\n      if (buffer.isEmpty()) {\n        // settle promise in the microtask queue to give consumers a chance to\n        // await after calling .push\n        queueMicrotask(() => {\n          drain.resolve()\n          drain = deferred()\n        })\n      }\n    }\n  }\n\n  const bufferNext = (next: Next<PushType>): ReturnType => {\n    if (onNext != null) {\n      return onNext(next)\n    }\n\n    buffer.push(next)\n    return pushable\n  }\n\n  const bufferError = (err: Error): ReturnType => {\n    buffer = new FIFO()\n\n    if (onNext != null) {\n      return onNext({ error: err })\n    }\n\n    buffer.push({ error: err })\n    return pushable\n  }\n\n  const push = (value: PushType): ReturnType => {\n    if (ended) {\n      return pushable\n    }\n\n    // @ts-expect-error `byteLength` is not declared on PushType\n    if (options?.objectMode !== true && value?.byteLength == null) {\n      throw new Error('objectMode was not true but tried to push non-Uint8Array value')\n    }\n\n    return bufferNext({ done: false, value })\n  }\n  const end = (err?: Error): ReturnType => {\n    if (ended) return pushable\n    ended = true\n\n    return (err != null) ? bufferError(err) : bufferNext({ done: true })\n  }\n  const _return = (): DoneResult => {\n    buffer = new FIFO()\n    end()\n\n    return { done: true }\n  }\n  const _throw = (err: Error): DoneResult => {\n    end(err)\n\n    return { done: true }\n  }\n\n  pushable = {\n    [Symbol.asyncIterator] () { return this },\n    next: waitNext,\n    return: _return,\n    throw: _throw,\n    push,\n    end,\n    get readableLength (): number {\n      return buffer.size\n    },\n    onEmpty: async (options?: AbortOptions) => {\n      const signal = options?.signal\n      signal?.throwIfAborted()\n\n      if (buffer.isEmpty()) {\n        return\n      }\n\n      let cancel: Promise<void> | undefined\n      let listener: (() => void) | undefined\n\n      if (signal != null) {\n        cancel = new Promise((resolve, reject) => {\n          listener = () => {\n            reject(new AbortError())\n          }\n\n          signal.addEventListener('abort', listener)\n        })\n      }\n\n      try {\n        await Promise.race([\n          drain.promise,\n          cancel\n        ])\n      } finally {\n        if (listener != null && signal != null) {\n          signal?.removeEventListener('abort', listener)\n        }\n      }\n    }\n  }\n\n  if (onEnd == null) {\n    return pushable\n  }\n\n  const _pushable = pushable\n\n  pushable = {\n    [Symbol.asyncIterator] () { return this },\n    next () {\n      return _pushable.next()\n    },\n    throw (err: Error) {\n      _pushable.throw(err)\n\n      if (onEnd != null) {\n        onEnd(err)\n        onEnd = undefined\n      }\n\n      return { done: true }\n    },\n    return () {\n      _pushable.return()\n\n      if (onEnd != null) {\n        onEnd()\n        onEnd = undefined\n      }\n\n      return { done: true }\n    },\n    push,\n    end (err: Error) {\n      _pushable.end(err)\n\n      if (onEnd != null) {\n        onEnd(err)\n        onEnd = undefined\n      }\n\n      return pushable\n    },\n    get readableLength () {\n      return _pushable.readableLength\n    },\n    onEmpty: (opts?: AbortOptions) => {\n      return _pushable.onEmpty(opts)\n    }\n  }\n\n  return pushable\n}\n","/**\n * @packageDocumentation\n *\n * Merge several (async)iterables into one, yield values as they arrive.\n *\n * Nb. sources are iterated over in parallel so the order of emitted items is not guaranteed.\n *\n * @example\n *\n * ```javascript\n * import merge from 'it-merge'\n * import all from 'it-all'\n *\n * // This can also be an iterator, generator, etc\n * const values1 = [0, 1, 2, 3, 4]\n * const values2 = [5, 6, 7, 8, 9]\n *\n * const arr = all(merge(values1, values2))\n *\n * console.info(arr) // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n * ```\n *\n * Async sources must be awaited:\n *\n * ```javascript\n * import merge from 'it-merge'\n * import all from 'it-all'\n *\n * // This can also be an iterator, async iterator, generator, etc\n * const values1 = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n * const values2 = async function * () {\n *   yield * [5, 6, 7, 8, 9]\n * }\n *\n * const arr = await all(merge(values1(), values2()))\n *\n * console.info(arr) // 0, 1, 5, 6, 2, 3, 4, 7, 8, 9  <- nb. order is not guaranteed\n * ```\n */\n\nimport { pushable } from 'it-pushable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nfunction merge <T> (...sources: Array<Iterable<T>>): Generator<T, void, undefined>\nfunction merge <T> (...sources: Array<AsyncIterable<T> | Iterable<T>>): AsyncGenerator<T, void, undefined>\nfunction merge <T> (...sources: Array<AsyncIterable<T> | Iterable<T>>): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  const syncSources: Array<Iterable<T>> = []\n\n  for (const source of sources) {\n    if (!isAsyncIterable(source)) {\n      syncSources.push(source)\n    }\n  }\n\n  if (syncSources.length === sources.length) {\n    // all sources are synchronous\n    return (function * () {\n      for (const source of syncSources) {\n        yield * source\n      }\n    })()\n  }\n\n  return (async function * () {\n    const output = pushable<T>({\n      objectMode: true\n    })\n\n    void Promise.resolve().then(async () => {\n      try {\n        await Promise.all(\n          sources.map(async (source) => {\n            for await (const item of source) {\n              output.push(item)\n            }\n          })\n        )\n\n        output.end()\n      } catch (err: any) {\n        output.end(err)\n      }\n    })\n\n    yield * output\n  })()\n}\n\nexport default merge\n","import { NotFoundError } from '@libp2p/interface'\nimport { createScalableCuckooFilter } from '@libp2p/utils/filters'\nimport merge from 'it-merge'\nimport parallel from 'it-parallel'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { NoPeerRoutersError, QueriedForSelfError } from './errors.js'\nimport type { Logger, Metrics, PeerId, PeerInfo, PeerRouting, PeerStore, RoutingOptions } from '@libp2p/interface'\nimport type { ComponentLogger } from '@libp2p/logger'\n\nexport interface PeerRoutingInit {\n  routers?: PeerRouting[]\n}\n\nexport interface DefaultPeerRoutingComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport class DefaultPeerRouting implements PeerRouting {\n  private readonly log: Logger\n  private readonly peerId: PeerId\n  private readonly peerStore: PeerStore\n  private readonly routers: PeerRouting[]\n\n  constructor (components: DefaultPeerRoutingComponents, init: PeerRoutingInit = {}) {\n    this.log = components.logger.forComponent('libp2p:peer-routing')\n    this.peerId = components.peerId\n    this.peerStore = components.peerStore\n    this.routers = init.routers ?? []\n\n    this.findPeer = components.metrics?.traceFunction('libp2p.peerRouting.findPeer', this.findPeer.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([peer], attrs) => {\n        return {\n          ...attrs,\n          peer: peer.toString()\n        }\n      }\n    }) ?? this.findPeer\n    this.getClosestPeers = components.metrics?.traceFunction('libp2p.peerRouting.getClosestPeers', this.getClosestPeers.bind(this), {\n      optionsIndex: 1,\n      getAttributesFromArgs: ([key], attrs) => {\n        return {\n          ...attrs,\n          key: uint8ArrayToString(key, 'base36')\n        }\n      },\n      getAttributesFromYieldedValue: (value, attrs: { peers?: string[] }) => {\n        return {\n          ...attrs,\n          peers: [...(Array.isArray(attrs.peers) ? attrs.peers : []), value.id.toString()]\n        }\n      }\n    }) ?? this.getClosestPeers\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/peer-routing'\n\n  /**\n   * Iterates over all peer routers in parallel to find the given peer\n   */\n  async findPeer (id: PeerId, options?: RoutingOptions): Promise<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoPeerRoutersError('No peer routers available')\n    }\n\n    if (id.toString() === this.peerId.toString()) {\n      throw new QueriedForSelfError('Should not try to find self')\n    }\n\n    const self = this\n    const source = merge(\n      ...this.routers.map(router => (async function * () {\n        try {\n          yield await router.findPeer(id, options)\n        } catch (err) {\n          self.log.error(err)\n        }\n      })())\n    )\n\n    for await (const peer of source) {\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        })\n      }\n\n      return peer\n    }\n\n    throw new NotFoundError()\n  }\n\n  /**\n   * Attempt to find the closest peers on the network to the given key\n   */\n  async * getClosestPeers (key: Uint8Array, options: RoutingOptions = {}): AsyncGenerator<PeerInfo> {\n    if (this.routers.length === 0) {\n      throw new NoPeerRoutersError('No peer routers available')\n    }\n\n    const self = this\n    const seen = createScalableCuckooFilter(1024)\n\n    for await (const peer of parallel(\n      async function * () {\n        const source = merge(\n          ...self.routers.map(router => router.getClosestPeers(key, options))\n        )\n\n        for await (let peer of source) {\n          yield async () => {\n            // find multiaddrs if they are missing\n            if (peer.multiaddrs.length === 0) {\n              try {\n                peer = await self.findPeer(peer.id, {\n                  ...options,\n                  useCache: false\n                })\n              } catch (err) {\n                self.log.error('could not find peer multiaddrs', err)\n                return\n              }\n            }\n\n            return peer\n          }\n        }\n      }()\n    )) {\n      if (peer == null) {\n        continue\n      }\n\n      // store the addresses for the peer if found\n      if (peer.multiaddrs.length > 0) {\n        await this.peerStore.merge(peer.id, {\n          multiaddrs: peer.multiaddrs\n        })\n      }\n\n      // deduplicate peers\n      if (seen.has(peer.id.toMultihash().bytes)) {\n        continue\n      }\n\n      seen.add(peer.id.toMultihash().bytes)\n\n      yield peer\n    }\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Takes an (async) iterable that emits promise-returning functions, invokes them in parallel up to the concurrency limit and emits the results as they become available, optionally in the same order as the input\n *\n * @example\n *\n * ```javascript\n * import parallel from 'it-parallel'\n * import all from 'it-all'\n * import delay from 'delay'\n *\n * // This can also be an iterator, async iterator, generator, etc\n * const input = [\n *   async () => {\n *     console.info('start 1')\n *     await delay(500)\n *\n *     console.info('end 1')\n *     return 1\n *   },\n *   async () => {\n *     console.info('start 2')\n *     await delay(200)\n *\n *     console.info('end 2')\n *     return 2\n *   },\n *   async () => {\n *     console.info('start 3')\n *     await delay(100)\n *\n *     console.info('end 3')\n *     return 3\n *   }\n * ]\n *\n * const result = await all(parallel(input, {\n *   concurrency: 2\n * }))\n *\n * // output:\n * // start 1\n * // start 2\n * // end 2\n * // start 3\n * // end 3\n * // end 1\n *\n * console.info(result) // [2, 3, 1]\n * ```\n *\n * If order is important, pass `ordered: true` as an option:\n *\n * ```javascript\n * const result = await all(parallel(input, {\n *   concurrency: 2,\n *   ordered: true\n * }))\n *\n * // output:\n * // start 1\n * // start 2\n * // end 2\n * // start 3\n * // end 3\n * // end 1\n *\n * console.info(result) // [1, 2, 3]\n * ```\n */\n\nimport defer from 'p-defer'\n\ninterface Operation<T> {\n  done: boolean\n  ok: boolean\n  err: Error\n  value: T\n}\n\nconst CustomEvent = globalThis.CustomEvent ?? Event\n\nexport interface ParallelOptions {\n  /**\n   * How many jobs to execute in parallel (default: )\n   */\n  concurrency?: number\n  ordered?: boolean\n}\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function * parallel <T> (source: Iterable<() => Promise<T>> | AsyncIterable<() => Promise<T>>, options: ParallelOptions = {}): AsyncGenerator<T, void, undefined> {\n  let concurrency = options.concurrency ?? Infinity\n\n  if (concurrency < 1) {\n    concurrency = Infinity\n  }\n\n  const ordered = options.ordered == null ? false : options.ordered\n  const emitter = new EventTarget()\n\n  const ops: Array<Operation<T>> = []\n  let slotAvailable = defer()\n  let resultAvailable = defer()\n  let sourceFinished = false\n  let sourceErr: Error | undefined\n  let opErred = false\n\n  emitter.addEventListener('task-complete', () => {\n    resultAvailable.resolve()\n  })\n\n  void Promise.resolve().then(async () => {\n    try {\n      for await (const task of source) {\n        if (ops.length === concurrency) {\n          slotAvailable = defer()\n          await slotAvailable.promise\n        }\n\n        if (opErred) {\n          break\n        }\n\n        const op: any = {\n          done: false\n        }\n        ops.push(op)\n\n        task()\n          .then(result => {\n            op.done = true\n            op.ok = true\n            op.value = result\n            emitter.dispatchEvent(new CustomEvent('task-complete'))\n          }, err => {\n            op.done = true\n            op.err = err\n            emitter.dispatchEvent(new CustomEvent('task-complete'))\n          })\n      }\n\n      sourceFinished = true\n      emitter.dispatchEvent(new CustomEvent('task-complete'))\n    } catch (err: any) {\n      sourceErr = err\n      emitter.dispatchEvent(new CustomEvent('task-complete'))\n    }\n  })\n\n  function valuesAvailable (): boolean {\n    if (ordered) {\n      return ops[0]?.done\n    }\n\n    return Boolean(ops.find(op => op.done))\n  }\n\n  function * yieldOrderedValues (): Generator<T, void, unknown> {\n    while ((ops.length > 0) && ops[0].done) {\n      const op = ops[0]\n      ops.shift()\n\n      if (op.ok) {\n        yield op.value\n      } else {\n        // allow the source to exit\n        opErred = true\n        slotAvailable.resolve()\n\n        throw op.err\n      }\n\n      slotAvailable.resolve()\n    }\n  }\n\n  function * yieldUnOrderedValues (): Generator<T, void, unknown> {\n    // more values can become available while we wait for `yield`\n    // to return control to this function\n    while (valuesAvailable()) {\n      for (let i = 0; i < ops.length; i++) {\n        if (ops[i].done) {\n          const op = ops[i]\n          ops.splice(i, 1)\n          i--\n\n          if (op.ok) {\n            yield op.value\n          } else {\n            opErred = true\n            slotAvailable.resolve()\n\n            throw op.err\n          }\n\n          slotAvailable.resolve()\n        }\n      }\n    }\n  }\n\n  while (true) {\n    if (!valuesAvailable()) {\n      resultAvailable = defer()\n      await resultAvailable.promise\n    }\n\n    if (sourceErr != null) {\n      // the source threw an error, propagate it\n      throw sourceErr\n    }\n\n    if (ordered) {\n      yield * yieldOrderedValues()\n    } else {\n      yield * yieldUnOrderedValues()\n    }\n\n    if (sourceFinished && ops.length === 0) {\n      // not waiting for any results and no more tasks so we are done\n      break\n    }\n  }\n}\n","import { randomBytes } from '@libp2p/crypto'\nimport { TypedEventEmitter, setMaxListeners } from '@libp2p/interface'\nimport { anySignal } from 'any-signal'\nimport pDefer, { type DeferredPromise } from 'p-defer'\nimport { raceEvent } from 'race-event'\nimport { raceSignal } from 'race-signal'\nimport type { AbortOptions, ComponentLogger, Logger, PeerInfo, PeerRouting, Startable } from '@libp2p/interface'\nimport type { RandomWalk as RandomWalkInterface } from '@libp2p/interface-internal'\n\nexport interface RandomWalkComponents {\n  peerRouting: PeerRouting\n  logger: ComponentLogger\n}\n\ninterface RandomWalkEvents {\n  'walk:peer': CustomEvent<PeerInfo>\n  'walk:error': CustomEvent<Error>\n}\n\nexport class RandomWalk extends TypedEventEmitter<RandomWalkEvents> implements RandomWalkInterface, Startable {\n  private readonly peerRouting: PeerRouting\n  private readonly log: Logger\n  private walking: boolean\n  private walkers: number\n  private shutdownController: AbortController\n  private walkController?: AbortController\n  private needNext?: DeferredPromise<void>\n\n  constructor (components: RandomWalkComponents) {\n    super()\n\n    this.log = components.logger.forComponent('libp2p:random-walk')\n    this.peerRouting = components.peerRouting\n    this.walkers = 0\n    this.walking = false\n\n    // stops any in-progress walks when the node is shut down\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/random-walk'\n\n  start (): void {\n    this.shutdownController = new AbortController()\n    setMaxListeners(Infinity, this.shutdownController.signal)\n  }\n\n  stop (): void {\n    this.shutdownController.abort()\n  }\n\n  async * walk (options?: AbortOptions): AsyncGenerator<PeerInfo> {\n    if (!this.walking) {\n      // start the query that causes walk:peer events to be emitted\n      this.startWalk()\n    }\n\n    this.walkers++\n    const signal = anySignal([this.shutdownController.signal, options?.signal])\n    setMaxListeners(Infinity, signal)\n\n    try {\n      while (true) {\n        // if another consumer has paused the query, start it again\n        this.needNext?.resolve()\n        this.needNext = pDefer()\n\n        // wait for a walk:peer or walk:error event\n        const event = await raceEvent<CustomEvent<PeerInfo>>(this, 'walk:peer', signal, {\n          errorEvent: 'walk:error'\n        })\n\n        yield event.detail\n      }\n    } finally {\n      signal.clear()\n      this.walkers--\n\n      // stop the walk if no more consumers are interested\n      if (this.walkers === 0) {\n        this.walkController?.abort()\n        this.walkController = undefined\n      }\n    }\n  }\n\n  private startWalk (): void {\n    this.walking = true\n\n    // the signal for this controller will be aborted if no more random peers\n    // are required\n    this.walkController = new AbortController()\n    setMaxListeners(Infinity, this.walkController.signal)\n\n    const signal = anySignal([this.walkController.signal, this.shutdownController.signal])\n    setMaxListeners(Infinity, signal)\n\n    const start = Date.now()\n    let found = 0\n\n    Promise.resolve().then(async () => {\n      this.log('start walk')\n\n      // find peers until no more consumers are interested\n      while (this.walkers > 0) {\n        try {\n          const data = randomBytes(32)\n          let s = Date.now()\n\n          for await (const peer of this.peerRouting.getClosestPeers(data, { signal })) {\n            if (signal.aborted) {\n              this.log('aborting walk')\n            }\n\n            signal.throwIfAborted()\n\n            this.log('found peer %p after %dms for %d walkers', peer.id, Date.now() - s, this.walkers)\n            found++\n            this.safeDispatchEvent('walk:peer', {\n              detail: peer\n            })\n\n            // if we only have one consumer, pause the query until they request\n            // another random peer or they signal they are no longer interested\n            if (this.walkers === 1 && this.needNext != null) {\n              this.log('wait for need next')\n              await raceSignal(this.needNext.promise, signal)\n            }\n\n            s = Date.now()\n          }\n\n          this.log('walk iteration for %b and %d walkers finished, found %d peers', data, this.walkers, found)\n        } catch (err) {\n          this.log.error('randomwalk errored', err)\n\n          this.safeDispatchEvent('walk:error', {\n            detail: err\n          })\n        }\n      }\n\n      this.log('no walkers left, ended walk')\n    })\n      .catch(err => {\n        this.log.error('randomwalk errored', err)\n      })\n      .finally(() => {\n        this.log('finished walk, found %d peers after %dms', found, Date.now() - start)\n        this.walking = false\n      })\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Race an event against an AbortSignal, taking care to remove any event\n * listeners that were added.\n *\n * @example Getting started\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * setTimeout(() => {\n *   // too late\n *   emitter.dispatchEvent(new CustomEvent('event'))\n * }, 1000)\n *\n * // throws an AbortError\n * const resolve = await raceEvent(emitter, 'event', controller.signal)\n * ```\n *\n * @example Aborting the promise with an error event\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   emitter.dispatchEvent(new CustomEvent('failure', {\n *     detail: new Error('Oh no!')\n *   }))\n * }, 1000)\n *\n * // throws 'Oh no!' error\n * const resolve = await raceEvent(emitter, 'success', AbortSignal.timeout(5000), {\n *   errorEvent: 'failure'\n * })\n * ```\n *\n * @example Customising the thrown AbortError\n *\n * The error message and `.code` property of the thrown `AbortError` can be\n * specified by passing options:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * setTimeout(() => {\n *   controller.abort()\n * }, 500)\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   errorMessage: 'Oh no!',\n *   errorCode: 'ERR_OH_NO'\n * })\n * ```\n *\n * @example Only resolving on specific events\n *\n * Where multiple events with the same type are emitted, a `filter` function can\n * be passed to only resolve on one of them:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws a Error: Oh no!\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt: Event) => {\n *     return evt.detail.foo === 'bar'\n *   }\n * })\n * ```\n *\n * @example Terminating early by throwing from the filter\n *\n * You can cause listening for the event to cease and all event listeners to be\n * removed by throwing from the filter:\n *\n * ```TypeScript\n * import { raceEvent } from 'race-event'\n *\n * const controller = new AbortController()\n * const emitter = new EventTarget()\n *\n * // throws Error: Cannot continue\n * const resolve = await raceEvent(emitter, 'event', controller.signal, {\n *   filter: (evt) => {\n *     if (...reasons) {\n *       throw new Error('Cannot continue')\n *     }\n *\n *     return true\n *   }\n * })\n * ```\n */\n\n/**\n * An abort error class that extends error\n */\nexport class AbortError extends Error {\n  public type: string\n  public code: string | string\n\n  constructor (message?: string, code?: string) {\n    super(message ?? 'The operation was aborted')\n    this.type = 'aborted'\n    this.name = 'AbortError'\n    this.code = code ?? 'ABORT_ERR'\n  }\n}\n\nexport interface RaceEventOptions<T> {\n  /**\n   * The message for the error thrown if the signal aborts\n   */\n  errorMessage?: string\n\n  /**\n   * The code for the error thrown if the signal aborts\n   */\n  errorCode?: string\n\n  /**\n   * The name of an event emitted on the emitter that should cause the returned\n   * promise to reject. The rejection reason will be the `.detail` field of the\n   * event.\n   */\n  errorEvent?: string\n\n  /**\n   * When multiple events with the same name may be emitted, pass a filter\n   * function here to allow ignoring ones that should not cause the returned\n   * promise to resolve.\n   */\n  filter?(evt: T): boolean\n}\n\n/**\n * Race a promise against an abort signal\n */\nexport async function raceEvent <T> (emitter: EventTarget, eventName: string, signal?: AbortSignal, opts?: RaceEventOptions<T>): Promise<T> {\n  // create the error here so we have more context in the stack trace\n  const error = new AbortError(opts?.errorMessage, opts?.errorCode)\n\n  if (signal?.aborted === true) {\n    return Promise.reject(error)\n  }\n\n  return new Promise((resolve, reject) => {\n    function removeListeners (): void {\n      signal?.removeEventListener('abort', abortListener)\n      emitter.removeEventListener(eventName, eventListener)\n\n      if (opts?.errorEvent != null) {\n        emitter.removeEventListener(opts.errorEvent, errorEventListener)\n      }\n    }\n\n    const eventListener = (evt: any): void => {\n      try {\n        if (opts?.filter?.(evt) === false) {\n          return\n        }\n      } catch (err: any) {\n        removeListeners()\n        reject(err)\n        return\n      }\n\n      removeListeners()\n      resolve(evt)\n    }\n\n    const errorEventListener = (evt: any): void => {\n      removeListeners()\n      reject(evt.detail)\n    }\n\n    const abortListener = (): void => {\n      removeListeners()\n      reject(error)\n    }\n\n    signal?.addEventListener('abort', abortListener)\n    emitter.addEventListener(eventName, eventListener)\n\n    if (opts?.errorEvent != null) {\n      emitter.addEventListener(opts.errorEvent, errorEventListener)\n    }\n  })\n}\n","import { InvalidParametersError } from '@libp2p/interface'\nimport merge from 'merge-options'\nimport * as errorsJs from './errors.js'\nimport type { IdentifyResult, Libp2pEvents, Logger, PeerUpdate, TypedEventTarget, PeerId, PeerStore, Topology } from '@libp2p/interface'\nimport type { StreamHandlerOptions, StreamHandlerRecord, Registrar, StreamHandler } from '@libp2p/interface-internal'\nimport type { ComponentLogger } from '@libp2p/logger'\n\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64\n\nexport interface RegistrarComponents {\n  peerId: PeerId\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nexport class DefaultRegistrar implements Registrar {\n  private readonly log: Logger\n  private readonly topologies: Map<string, Map<string, Topology>>\n  private readonly handlers: Map<string, StreamHandlerRecord>\n  private readonly components: RegistrarComponents\n\n  constructor (components: RegistrarComponents) {\n    this.log = components.logger.forComponent('libp2p:registrar')\n    this.topologies = new Map()\n    this.handlers = new Map()\n    this.components = components\n\n    this._onDisconnect = this._onDisconnect.bind(this)\n    this._onPeerUpdate = this._onPeerUpdate.bind(this)\n    this._onPeerIdentify = this._onPeerIdentify.bind(this)\n\n    this.components.events.addEventListener('peer:disconnect', this._onDisconnect)\n    this.components.events.addEventListener('peer:update', this._onPeerUpdate)\n    this.components.events.addEventListener('peer:identify', this._onPeerIdentify)\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/registrar'\n\n  getProtocols (): string[] {\n    return Array.from(new Set<string>([\n      ...this.handlers.keys()\n    ])).sort()\n  }\n\n  getHandler (protocol: string): StreamHandlerRecord {\n    const handler = this.handlers.get(protocol)\n\n    if (handler == null) {\n      throw new errorsJs.UnhandledProtocolError(`No handler registered for protocol ${protocol}`)\n    }\n\n    return handler\n  }\n\n  getTopologies (protocol: string): Topology[] {\n    const topologies = this.topologies.get(protocol)\n\n    if (topologies == null) {\n      return []\n    }\n\n    return [\n      ...topologies.values()\n    ]\n  }\n\n  /**\n   * Registers the `handler` for each protocol\n   */\n  async handle (protocol: string, handler: StreamHandler, opts?: StreamHandlerOptions): Promise<void> {\n    if (this.handlers.has(protocol)) {\n      throw new errorsJs.DuplicateProtocolHandlerError(`Handler already registered for protocol ${protocol}`)\n    }\n\n    const options = merge.bind({ ignoreUndefined: true })({\n      maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n      maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n    }, opts)\n\n    this.handlers.set(protocol, {\n      handler,\n      options\n    })\n\n    // Add new protocol to self protocols in the peer store\n    await this.components.peerStore.merge(this.components.peerId, {\n      protocols: [protocol]\n    })\n  }\n\n  /**\n   * Removes the handler for each protocol. The protocol\n   * will no longer be supported on streams.\n   */\n  async unhandle (protocols: string | string[]): Promise<void> {\n    const protocolList = Array.isArray(protocols) ? protocols : [protocols]\n\n    protocolList.forEach(protocol => {\n      this.handlers.delete(protocol)\n    })\n\n    // Update self protocols in the peer store\n    await this.components.peerStore.patch(this.components.peerId, {\n      protocols: this.getProtocols()\n    })\n  }\n\n  /**\n   * Register handlers for a set of multicodecs given\n   */\n  async register (protocol: string, topology: Topology): Promise<string> {\n    if (topology == null) {\n      throw new InvalidParametersError('invalid topology')\n    }\n\n    // Create topology\n    const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`\n\n    let topologies = this.topologies.get(protocol)\n\n    if (topologies == null) {\n      topologies = new Map<string, Topology>()\n      this.topologies.set(protocol, topologies)\n    }\n\n    topologies.set(id, topology)\n\n    return id\n  }\n\n  /**\n   * Unregister topology\n   */\n  unregister (id: string): void {\n    for (const [protocol, topologies] of this.topologies.entries()) {\n      if (topologies.has(id)) {\n        topologies.delete(id)\n\n        if (topologies.size === 0) {\n          this.topologies.delete(protocol)\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove a disconnected peer from the record\n   */\n  _onDisconnect (evt: CustomEvent<PeerId>): void {\n    const remotePeer = evt.detail\n\n    void this.components.peerStore.get(remotePeer)\n      .then(peer => {\n        for (const protocol of peer.protocols) {\n          const topologies = this.topologies.get(protocol)\n\n          if (topologies == null) {\n            // no topologies are interested in this protocol\n            continue\n          }\n\n          for (const topology of topologies.values()) {\n            if (topology.filter?.has(remotePeer) === false) {\n              continue\n            }\n\n            topology.filter?.remove(remotePeer)\n            topology.onDisconnect?.(remotePeer)\n          }\n        }\n      })\n      .catch(err => {\n        if (err.name === 'NotFoundError') {\n          // peer has not completed identify so they are not in the peer store\n          return\n        }\n\n        this.log.error('could not inform topologies of disconnecting peer %p', remotePeer, err)\n      })\n  }\n\n  /**\n   * When a peer is updated, if they have removed supported protocols notify any\n   * topologies interested in the removed protocols.\n   */\n  _onPeerUpdate (evt: CustomEvent<PeerUpdate>): void {\n    const { peer, previous } = evt.detail\n    const removed = (previous?.protocols ?? []).filter(protocol => !peer.protocols.includes(protocol))\n\n    for (const protocol of removed) {\n      const topologies = this.topologies.get(protocol)\n\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue\n      }\n\n      for (const topology of topologies.values()) {\n        if (topology.filter?.has(peer.id) === false) {\n          continue\n        }\n\n        topology.filter?.remove(peer.id)\n        topology.onDisconnect?.(peer.id)\n      }\n    }\n  }\n\n  /**\n   * After identify has completed and we have received the list of supported\n   * protocols, notify any topologies interested in those protocols.\n   */\n  _onPeerIdentify (evt: CustomEvent<IdentifyResult>): void {\n    const protocols = evt.detail.protocols\n    const connection = evt.detail.connection\n    const peerId = evt.detail.peerId\n\n    for (const protocol of protocols) {\n      const topologies = this.topologies.get(protocol)\n\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue\n      }\n\n      for (const topology of topologies.values()) {\n        if (connection.limits != null && topology.notifyOnLimitedConnection !== true) {\n          continue\n        }\n\n        if (topology.filter?.has(peerId) === true) {\n          continue\n        }\n\n        topology.filter?.add(peerId)\n        topology.onConnect?.(peerId, connection)\n      }\n    }\n  }\n}\n","import { FaultTolerance, InvalidParametersError, NotStartedError } from '@libp2p/interface'\nimport { trackedMap } from '@libp2p/utils/tracked-map'\nimport { CustomProgressEvent } from 'progress-events'\nimport { NoValidAddressesError, TransportUnavailableError } from './errors.js'\nimport type { Libp2pEvents, ComponentLogger, Logger, Connection, TypedEventTarget, Metrics, Startable, Listener, Transport, Upgrader } from '@libp2p/interface'\nimport type { AddressManager, TransportManager, TransportManagerDialOptions } from '@libp2p/interface-internal'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface TransportManagerInit {\n  faultTolerance?: FaultTolerance\n}\n\nexport interface DefaultTransportManagerComponents {\n  metrics?: Metrics\n  addressManager: AddressManager\n  upgrader: Upgrader\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\nexport class DefaultTransportManager implements TransportManager, Startable {\n  private readonly log: Logger\n  private readonly components: DefaultTransportManagerComponents\n  private readonly transports: Map<string, Transport>\n  private readonly listeners: Map<string, Listener[]>\n  private readonly faultTolerance: FaultTolerance\n  private started: boolean\n\n  constructor (components: DefaultTransportManagerComponents, init: TransportManagerInit = {}) {\n    this.log = components.logger.forComponent('libp2p:transports')\n    this.components = components\n    this.started = false\n    this.transports = new Map<string, Transport>()\n    this.listeners = trackedMap({\n      name: 'libp2p_transport_manager_listeners',\n      metrics: this.components.metrics\n    })\n    this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/transport-manager'\n\n  /**\n   * Adds a `Transport` to the manager\n   */\n  add (transport: Transport): void {\n    const tag = transport[Symbol.toStringTag]\n\n    if (tag == null) {\n      throw new InvalidParametersError('Transport must have a valid tag')\n    }\n\n    if (this.transports.has(tag)) {\n      throw new InvalidParametersError(`There is already a transport with the tag ${tag}`)\n    }\n\n    this.log('adding transport %s', tag)\n\n    this.transports.set(tag, transport)\n\n    if (!this.listeners.has(tag)) {\n      this.listeners.set(tag, [])\n    }\n  }\n\n  isStarted (): boolean {\n    return this.started\n  }\n\n  start (): void {\n    this.started = true\n  }\n\n  async afterStart (): Promise<void> {\n    // Listen on the provided transports for the provided addresses\n    const addrs = this.components.addressManager.getListenAddrs()\n\n    await this.listen(addrs)\n  }\n\n  /**\n   * Stops all listeners\n   */\n  async stop (): Promise<void> {\n    const tasks = []\n    for (const [key, listeners] of this.listeners) {\n      this.log('closing listeners for %s', key)\n      while (listeners.length > 0) {\n        const listener = listeners.pop()\n\n        if (listener == null) {\n          continue\n        }\n\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    this.log('all listeners closed')\n    for (const key of this.listeners.keys()) {\n      this.listeners.set(key, [])\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   */\n  async dial (ma: Multiaddr, options?: TransportManagerDialOptions): Promise<Connection> {\n    const transport = this.dialTransportForMultiaddr(ma)\n\n    if (transport == null) {\n      throw new TransportUnavailableError(`No transport available for address ${String(ma)}`)\n    }\n\n    options?.onProgress?.(new CustomProgressEvent<string>('transport-manager:selected-transport', transport[Symbol.toStringTag]))\n\n    // @ts-expect-error the transport has a typed onProgress option but we\n    // can't predict what transport implementation we selected so all we can\n    // do is pass the onProgress handler in and hope for the best\n    return transport.dial(ma, {\n      ...options,\n      upgrader: this.components.upgrader\n    })\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   */\n  getAddrs (): Multiaddr[] {\n    let addrs: Multiaddr[] = []\n    for (const listeners of this.listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances\n   */\n  getTransports (): Transport[] {\n    return Array.of(...this.transports.values())\n  }\n\n  /**\n   * Returns all the listener instances\n   */\n  getListeners (): Listener[] {\n    return Array.of(...this.listeners.values()).flat()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  dialTransportForMultiaddr (ma: Multiaddr): Transport | undefined {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.dialFilter([ma])\n\n      if (addrs.length > 0) {\n        return transport\n      }\n    }\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  listenTransportForMultiaddr (ma: Multiaddr): Transport | undefined {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.listenFilter([ma])\n\n      if (addrs.length > 0) {\n        return transport\n      }\n    }\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr\n   */\n  async listen (addrs: Multiaddr[]): Promise<void> {\n    if (!this.isStarted()) {\n      throw new NotStartedError('Not started')\n    }\n\n    if (addrs == null || addrs.length === 0) {\n      this.log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n\n    for (const [key, transport] of this.transports.entries()) {\n      const supportedAddrs = transport.listenFilter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        this.log('creating listener for %s on %a', key, addr)\n        const listener = transport.createListener({\n          upgrader: this.components.upgrader\n        })\n\n        let listeners: Listener[] = this.listeners.get(key) ?? []\n\n        if (listeners == null) {\n          listeners = []\n          this.listeners.set(key, listeners)\n        }\n\n        listeners.push(listener)\n\n        // Track listen/close events\n        listener.addEventListener('listening', () => {\n          this.components.events.safeDispatchEvent('transport:listening', {\n            detail: listener\n          })\n        })\n        listener.addEventListener('close', () => {\n          const index = listeners.findIndex(l => l === listener)\n\n          // remove the listener\n          listeners.splice(index, 1)\n\n          this.components.events.safeDispatchEvent('transport:close', {\n            detail: listener\n          })\n        })\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await Promise.allSettled(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.status === 'fulfilled')\n      if ((isListening == null) && this.faultTolerance !== FaultTolerance.NO_FATAL) {\n        throw new NoValidAddressesError(`Transport (${key}) could not listen on any available address`)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this.transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`\n      if (this.faultTolerance === FaultTolerance.FATAL_ALL) {\n        throw new NoValidAddressesError(message)\n      }\n      this.log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   */\n  async remove (key: string): Promise<void> {\n    const listeners = this.listeners.get(key) ?? []\n    this.log.trace('removing transport %s', key)\n\n    // Close any running listeners\n    const tasks = []\n    this.log.trace('closing listeners for %s', key)\n    while (listeners.length > 0) {\n      const listener = listeners.pop()\n\n      if (listener == null) {\n        continue\n      }\n\n      tasks.push(listener.close())\n    }\n    await Promise.all(tasks)\n\n    this.transports.delete(key)\n    this.listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll (): Promise<void> {\n    const tasks = []\n    for (const key of this.transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n","import { InvalidMultiaddrError, TooManyInboundProtocolStreamsError, TooManyOutboundProtocolStreamsError, LimitedConnectionError, setMaxListeners, InvalidPeerIdError } from '@libp2p/interface'\nimport * as mss from '@libp2p/multistream-select'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport { anySignal } from 'any-signal'\nimport { CustomProgressEvent } from 'progress-events'\nimport { createConnection } from './connection/index.js'\nimport { PROTOCOL_NEGOTIATION_TIMEOUT, UPGRADE_TIMEOUT } from './connection-manager/constants.js'\nimport { ConnectionDeniedError, ConnectionInterceptedError, EncryptionFailedError, MuxerUnavailableError } from './errors.js'\nimport { DEFAULT_MAX_INBOUND_STREAMS, DEFAULT_MAX_OUTBOUND_STREAMS } from './registrar.js'\nimport type { Libp2pEvents, AbortOptions, ComponentLogger, MultiaddrConnection, Connection, Stream, ConnectionProtector, NewStreamOptions, ConnectionEncrypter, SecuredConnection, ConnectionGater, TypedEventTarget, Metrics, PeerId, PeerStore, StreamMuxer, StreamMuxerFactory, Upgrader, UpgraderOptions, ConnectionLimits, SecureConnectionOptions, CounterGroup } from '@libp2p/interface'\nimport type { ConnectionManager, Registrar } from '@libp2p/interface-internal'\n\ninterface CreateConnectionOptions {\n  cryptoProtocol: string\n  direction: 'inbound' | 'outbound'\n  maConn: MultiaddrConnection\n  upgradedConn: MultiaddrConnection\n  remotePeer: PeerId\n  muxerFactory?: StreamMuxerFactory\n  limits?: ConnectionLimits\n}\n\ninterface OnStreamOptions {\n  connection: Connection\n  stream: Stream\n  protocol: string\n}\n\nexport interface CryptoResult extends SecuredConnection<MultiaddrConnection> {\n  protocol: string\n}\n\nexport interface UpgraderInit {\n  connectionEncrypters: ConnectionEncrypter[]\n  streamMuxers: StreamMuxerFactory[]\n\n  /**\n   * An amount of ms by which an inbound connection upgrade must complete\n   *\n   * @default 3000\n   */\n  inboundUpgradeTimeout?: number\n\n  /**\n   * An amount of ms by which an outbound connection upgrade must complete\n   *\n   * @default 3000\n   */\n  outboundUpgradeTimeout?: number\n\n  /**\n   * When a new incoming stream is opened on a multiplexed connection, protocol\n   * negotiation on that stream must complete within this many ms\n   *\n   * @default 2000\n   */\n  inboundStreamProtocolNegotiationTimeout?: number\n\n  /**\n   * When a new incoming stream is opened on a multiplexed connection, protocol\n   * negotiation on that stream must complete within this many ms\n   *\n   * @default 2000\n   */\n  outboundStreamProtocolNegotiationTimeout?: number\n}\n\nfunction findIncomingStreamLimit (protocol: string, registrar: Registrar): number | undefined {\n  try {\n    const { options } = registrar.getHandler(protocol)\n\n    return options.maxInboundStreams\n  } catch (err: any) {\n    if (err.name !== 'UnhandledProtocolError') {\n      throw err\n    }\n  }\n\n  return DEFAULT_MAX_INBOUND_STREAMS\n}\n\nfunction findOutgoingStreamLimit (protocol: string, registrar: Registrar, options: NewStreamOptions = {}): number {\n  try {\n    const { options } = registrar.getHandler(protocol)\n\n    if (options.maxOutboundStreams != null) {\n      return options.maxOutboundStreams\n    }\n  } catch (err: any) {\n    if (err.name !== 'UnhandledProtocolError') {\n      throw err\n    }\n  }\n\n  return options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS\n}\n\nfunction countStreams (protocol: string, direction: 'inbound' | 'outbound', connection: Connection): number {\n  let streamCount = 0\n\n  connection.streams.forEach(stream => {\n    if (stream.direction === direction && stream.protocol === protocol) {\n      streamCount++\n    }\n  })\n\n  return streamCount\n}\n\nexport interface DefaultUpgraderComponents {\n  peerId: PeerId\n  metrics?: Metrics\n  connectionManager: ConnectionManager\n  connectionGater: ConnectionGater\n  connectionProtector?: ConnectionProtector\n  registrar: Registrar\n  peerStore: PeerStore\n  events: TypedEventTarget<Libp2pEvents>\n  logger: ComponentLogger\n}\n\ntype ConnectionDeniedType = keyof Pick<ConnectionGater, 'denyOutboundConnection' | 'denyInboundEncryptedConnection' | 'denyOutboundEncryptedConnection' | 'denyInboundUpgradedConnection' | 'denyOutboundUpgradedConnection'>\n\nexport class DefaultUpgrader implements Upgrader {\n  private readonly components: DefaultUpgraderComponents\n  private readonly connectionEncrypters: Map<string, ConnectionEncrypter>\n  private readonly streamMuxers: Map<string, StreamMuxerFactory>\n  private readonly inboundUpgradeTimeout: number\n  private readonly outboundUpgradeTimeout: number\n  private readonly inboundStreamProtocolNegotiationTimeout: number\n  private readonly outboundStreamProtocolNegotiationTimeout: number\n  private readonly events: TypedEventTarget<Libp2pEvents>\n  private readonly metrics: {\n    dials?: CounterGroup<'inbound' | 'outbound'>\n    errors?: CounterGroup<'inbound' | 'outbound'>\n  }\n\n  constructor (components: DefaultUpgraderComponents, init: UpgraderInit) {\n    this.components = components\n    this.connectionEncrypters = new Map()\n\n    init.connectionEncrypters.forEach(encrypter => {\n      this.connectionEncrypters.set(encrypter.protocol, encrypter)\n    })\n\n    this.streamMuxers = new Map()\n\n    init.streamMuxers.forEach(muxer => {\n      this.streamMuxers.set(muxer.protocol, muxer)\n    })\n\n    this.inboundUpgradeTimeout = init.inboundUpgradeTimeout ?? UPGRADE_TIMEOUT\n    this.outboundUpgradeTimeout = init.outboundUpgradeTimeout ?? UPGRADE_TIMEOUT\n    this.inboundStreamProtocolNegotiationTimeout = init.inboundStreamProtocolNegotiationTimeout ?? PROTOCOL_NEGOTIATION_TIMEOUT\n    this.outboundStreamProtocolNegotiationTimeout = init.outboundStreamProtocolNegotiationTimeout ?? PROTOCOL_NEGOTIATION_TIMEOUT\n    this.events = components.events\n    this.metrics = {\n      dials: components.metrics?.registerCounterGroup('libp2p_connection_manager_dials_total'),\n      errors: components.metrics?.registerCounterGroup('libp2p_connection_manager_dial_errors_total')\n    }\n  }\n\n  readonly [Symbol.toStringTag] = '@libp2p/upgrader'\n\n  async shouldBlockConnection (connectionType: 'denyInboundConnection', maConn: MultiaddrConnection): Promise<void>\n  async shouldBlockConnection (connectionType: ConnectionDeniedType, remotePeer: PeerId, maConn: MultiaddrConnection): Promise<void>\n  async shouldBlockConnection (method: ConnectionDeniedType | 'denyInboundConnection', ...args: any[]): Promise<void> {\n    const denyOperation: any = this.components.connectionGater[method]\n\n    if (denyOperation == null) {\n      return\n    }\n\n    const result = await denyOperation.apply(this.components.connectionGater, args)\n\n    if (result === true) {\n      throw new ConnectionInterceptedError(`The multiaddr connection is blocked by gater.${method}`)\n    }\n  }\n\n  /**\n   * Upgrades an inbound connection\n   */\n  async upgradeInbound (maConn: MultiaddrConnection, opts: UpgraderOptions = {}): Promise<void> {\n    let accepted = false\n\n    try {\n      this.metrics.dials?.increment({\n        inbound: true\n      })\n\n      accepted = await this.components.connectionManager.acceptIncomingConnection(maConn)\n\n      if (!accepted) {\n        throw new ConnectionDeniedError('Connection denied')\n      }\n\n      await this.shouldBlockConnection('denyInboundConnection', maConn)\n\n      await this._performUpgrade(maConn, 'inbound', opts)\n    } catch (err) {\n      this.metrics.errors?.increment({\n        inbound: true\n      })\n\n      throw err\n    } finally {\n      if (accepted) {\n        this.components.connectionManager.afterUpgradeInbound()\n      }\n    }\n  }\n\n  /**\n   * Upgrades an outbound connection\n   */\n  async upgradeOutbound (maConn: MultiaddrConnection, opts: UpgraderOptions = {}): Promise<Connection> {\n    try {\n      this.metrics.dials?.increment({\n        outbound: true\n      })\n\n      const idStr = maConn.remoteAddr.getPeerId()\n      let remotePeerId: PeerId | undefined\n\n      if (idStr != null) {\n        remotePeerId = peerIdFromString(idStr)\n        await this.shouldBlockConnection('denyOutboundConnection', remotePeerId, maConn)\n      }\n\n      return await this._performUpgrade(maConn, 'outbound', opts)\n    } catch (err) {\n      this.metrics.errors?.increment({\n        outbound: true\n      })\n\n      throw err\n    }\n  }\n\n  private async _performUpgrade (maConn: MultiaddrConnection, direction: 'inbound' | 'outbound', opts: UpgraderOptions): Promise<Connection> {\n    let encryptedConn: MultiaddrConnection\n    let remotePeer: PeerId\n    let upgradedConn: MultiaddrConnection\n    let muxerFactory: StreamMuxerFactory | undefined\n    let cryptoProtocol\n\n    const upgradeTimeoutSignal = AbortSignal.timeout(direction === 'inbound' ? this.inboundUpgradeTimeout : this.outboundUpgradeTimeout)\n    const signal = anySignal([upgradeTimeoutSignal, opts.signal])\n    setMaxListeners(Infinity, upgradeTimeoutSignal, signal)\n    opts.signal = signal\n\n    this.components.metrics?.trackMultiaddrConnection(maConn)\n\n    maConn.log.trace('starting the %s connection upgrade', direction)\n\n    // Protect\n    let protectedConn = maConn\n\n    if (opts?.skipProtection !== true) {\n      const protector = this.components.connectionProtector\n\n      if (protector != null) {\n        maConn.log('protecting the %s connection', direction)\n        protectedConn = await protector.protect(maConn, opts)\n      }\n    }\n\n    try {\n      // Encrypt the connection\n      encryptedConn = protectedConn\n      if (opts?.skipEncryption !== true) {\n        opts?.onProgress?.(new CustomProgressEvent(`upgrader:encrypt-${direction}-connection`));\n\n        ({\n          conn: encryptedConn,\n          remotePeer,\n          protocol: cryptoProtocol\n        } = await (direction === 'inbound'\n          ? this._encryptInbound(protectedConn, {\n            ...opts,\n            signal\n          })\n          : this._encryptOutbound(protectedConn, {\n            ...opts,\n            signal\n          })\n        ))\n\n        const maConn: MultiaddrConnection = {\n          ...protectedConn,\n          ...encryptedConn\n        }\n\n        await this.shouldBlockConnection(direction === 'inbound' ? 'denyInboundEncryptedConnection' : 'denyOutboundEncryptedConnection', remotePeer, maConn)\n      } else {\n        const idStr = maConn.remoteAddr.getPeerId()\n\n        if (idStr == null) {\n          throw new InvalidMultiaddrError(`${direction} connection that skipped encryption must have a peer id`)\n        }\n\n        const remotePeerId = peerIdFromString(idStr)\n\n        cryptoProtocol = 'native'\n        remotePeer = remotePeerId\n      }\n\n      // this can happen if we dial a multiaddr without a peer id, we only find\n      // out the identity of the remote after the connection is encrypted\n      if (remotePeer.equals(this.components.peerId)) {\n        const err = new InvalidPeerIdError('Can not dial self')\n        maConn.abort(err)\n        throw err\n      }\n\n      upgradedConn = encryptedConn\n      if (opts?.muxerFactory != null) {\n        muxerFactory = opts.muxerFactory\n      } else if (this.streamMuxers.size > 0) {\n        opts?.onProgress?.(new CustomProgressEvent(`upgrader:multiplex-${direction}-connection`))\n\n        // Multiplex the connection\n        const multiplexed = await (direction === 'inbound'\n          ? this._multiplexInbound({\n            ...protectedConn,\n            ...encryptedConn\n          }, this.streamMuxers, opts)\n          : this._multiplexOutbound({\n            ...protectedConn,\n            ...encryptedConn\n          }, this.streamMuxers, opts))\n        muxerFactory = multiplexed.muxerFactory\n        upgradedConn = multiplexed.stream\n      }\n    } catch (err: any) {\n      maConn.log.error('failed to upgrade inbound connection %s %a - %e', direction === 'inbound' ? 'from' : 'to', maConn.remoteAddr, err)\n      throw err\n    } finally {\n      signal.clear()\n    }\n\n    await this.shouldBlockConnection(direction === 'inbound' ? 'denyInboundUpgradedConnection' : 'denyOutboundUpgradedConnection', remotePeer, maConn)\n\n    maConn.log('successfully upgraded %s connection', direction)\n\n    return this._createConnection({\n      cryptoProtocol,\n      direction,\n      maConn,\n      upgradedConn,\n      muxerFactory,\n      remotePeer,\n      limits: opts?.limits\n    })\n  }\n\n  /**\n   * A convenience method for generating a new `Connection`\n   */\n  _createConnection (opts: CreateConnectionOptions): Connection {\n    const {\n      cryptoProtocol,\n      direction,\n      maConn,\n      upgradedConn,\n      remotePeer,\n      muxerFactory,\n      limits\n    } = opts\n\n    let muxer: StreamMuxer | undefined\n    let newStream: ((multicodecs: string[], options?: AbortOptions) => Promise<Stream>) | undefined\n    let connection: Connection // eslint-disable-line prefer-const\n\n    if (muxerFactory != null) {\n      // Create the muxer\n      muxer = muxerFactory.createStreamMuxer({\n        direction,\n        // Run anytime a remote stream is created\n        onIncomingStream: muxedStream => {\n          if (connection == null) {\n            return\n          }\n\n          void Promise.resolve()\n            .then(async () => {\n              const protocols = this.components.registrar.getProtocols()\n              const signal = AbortSignal.timeout(this.inboundStreamProtocolNegotiationTimeout)\n              setMaxListeners(Infinity, signal)\n\n              const { stream, protocol } = await mss.handle(muxedStream, protocols, {\n                signal,\n                log: muxedStream.log,\n                yieldBytes: false\n              })\n\n              if (connection == null) {\n                return\n              }\n\n              connection.log('incoming stream opened on %s', protocol)\n\n              const incomingLimit = findIncomingStreamLimit(protocol, this.components.registrar)\n              const streamCount = countStreams(protocol, 'inbound', connection)\n\n              if (streamCount === incomingLimit) {\n                const err = new TooManyInboundProtocolStreamsError(`Too many inbound protocol streams for protocol \"${protocol}\" - limit ${incomingLimit}`)\n                muxedStream.abort(err)\n\n                throw err\n              }\n\n              // after the handshake the returned stream can have early data so override\n              // the souce/sink\n              muxedStream.source = stream.source\n              muxedStream.sink = stream.sink\n              muxedStream.protocol = protocol\n\n              // allow closing the write end of a not-yet-negotiated stream\n              if (stream.closeWrite != null) {\n                muxedStream.closeWrite = stream.closeWrite\n              }\n\n              // allow closing the read end of a not-yet-negotiated stream\n              if (stream.closeRead != null) {\n                muxedStream.closeRead = stream.closeRead\n              }\n\n              // make sure we don't try to negotiate a stream we are closing\n              if (stream.close != null) {\n                muxedStream.close = stream.close\n              }\n\n              // If a protocol stream has been successfully negotiated and is to be passed to the application,\n              // the peerstore should ensure that the peer is registered with that protocol\n              await this.components.peerStore.merge(remotePeer, {\n                protocols: [protocol]\n              })\n\n              this.components.metrics?.trackProtocolStream(muxedStream, connection)\n\n              this._onStream({ connection, stream: muxedStream, protocol })\n            })\n            .catch(async err => {\n              connection.log.error('error handling incoming stream id %s - %e', muxedStream.id, err)\n\n              if (muxedStream.timeline.close == null) {\n                await muxedStream.close()\n              }\n            })\n        }\n      })\n\n      newStream = async (protocols: string[], options: NewStreamOptions = {}): Promise<Stream> => {\n        if (muxer == null) {\n          throw new MuxerUnavailableError('Connection is not multiplexed')\n        }\n\n        connection.log.trace('starting new stream for protocols %s', protocols)\n        const muxedStream = await muxer.newStream()\n        connection.log.trace('started new stream %s for protocols %s', muxedStream.id, protocols)\n\n        try {\n          if (options.signal == null) {\n            muxedStream.log('no abort signal was passed while trying to negotiate protocols %s falling back to default timeout', protocols)\n\n            const signal = AbortSignal.timeout(this.outboundStreamProtocolNegotiationTimeout)\n            setMaxListeners(Infinity, signal)\n\n            options = {\n              ...options,\n              signal\n            }\n          }\n\n          muxedStream.log.trace('selecting protocol from protocols %s', protocols)\n\n          const {\n            stream,\n            protocol\n          } = await mss.select(muxedStream, protocols, {\n            ...options,\n            log: muxedStream.log,\n            yieldBytes: true\n          })\n\n          muxedStream.log.trace('selected protocol %s', protocol)\n\n          const outgoingLimit = findOutgoingStreamLimit(protocol, this.components.registrar, options)\n          const streamCount = countStreams(protocol, 'outbound', connection)\n\n          if (streamCount >= outgoingLimit) {\n            const err = new TooManyOutboundProtocolStreamsError(`Too many outbound protocol streams for protocol \"${protocol}\" - ${streamCount}/${outgoingLimit}`)\n            muxedStream.abort(err)\n\n            throw err\n          }\n\n          // If a protocol stream has been successfully negotiated and is to be passed to the application,\n          // the peerstore should ensure that the peer is registered with that protocol\n          await this.components.peerStore.merge(remotePeer, {\n            protocols: [protocol]\n          })\n\n          // after the handshake the returned stream can have early data so override\n          // the souce/sink\n          muxedStream.source = stream.source\n          muxedStream.sink = stream.sink\n          muxedStream.protocol = protocol\n\n          // allow closing the write end of a not-yet-negotiated stream\n          if (stream.closeWrite != null) {\n            muxedStream.closeWrite = stream.closeWrite\n          }\n\n          // allow closing the read end of a not-yet-negotiated stream\n          if (stream.closeRead != null) {\n            muxedStream.closeRead = stream.closeRead\n          }\n\n          // make sure we don't try to negotiate a stream we are closing\n          if (stream.close != null) {\n            muxedStream.close = stream.close\n          }\n\n          this.components.metrics?.trackProtocolStream(muxedStream, connection)\n\n          return muxedStream\n        } catch (err: any) {\n          connection.log.error('could not create new outbound stream on connection %s %a for protocols %s - %e', direction === 'inbound' ? 'from' : 'to', opts.maConn.remoteAddr, protocols, err)\n\n          if (muxedStream.timeline.close == null) {\n            muxedStream.abort(err)\n          }\n\n          throw err\n        }\n      }\n\n      // Pipe all data through the muxer\n      void Promise.all([\n        muxer.sink(upgradedConn.source),\n        upgradedConn.sink(muxer.source)\n      ]).catch(err => {\n        connection.log.error('error piping data through muxer - %e', err)\n      })\n    }\n\n    const _timeline = maConn.timeline\n    maConn.timeline = new Proxy(_timeline, {\n      set: (...args) => {\n        if (args[1] === 'close' && args[2] != null && _timeline.close == null) {\n          // Wait for close to finish before notifying of the closure\n          (async () => {\n            try {\n              if (connection.status === 'open') {\n                await connection.close()\n              }\n            } catch (err: any) {\n              connection.log.error('error closing connection after timeline close %e', err)\n            } finally {\n              this.events.safeDispatchEvent('connection:close', {\n                detail: connection\n              })\n            }\n          })().catch(err => {\n            connection.log.error('error thrown while dispatching connection:close event %e', err)\n          })\n        }\n\n        return Reflect.set(...args)\n      }\n    })\n    maConn.timeline.upgraded = Date.now()\n\n    const errConnectionNotMultiplexed = (): any => {\n      throw new MuxerUnavailableError('Connection is not multiplexed')\n    }\n\n    // Create the connection\n    connection = createConnection({\n      remoteAddr: maConn.remoteAddr,\n      remotePeer,\n      status: 'open',\n      direction,\n      timeline: maConn.timeline,\n      multiplexer: muxer?.protocol,\n      encryption: cryptoProtocol,\n      limits,\n      logger: this.components.logger,\n      newStream: newStream ?? errConnectionNotMultiplexed,\n      getStreams: () => {\n        return muxer?.streams ?? []\n      },\n      close: async (options?: AbortOptions) => {\n        // ensure remaining streams are closed gracefully\n        await muxer?.close(options)\n\n        // close the underlying transport\n        await maConn.close(options)\n      },\n      abort: (err) => {\n        maConn.abort(err)\n\n        // ensure remaining streams are aborted\n        muxer?.abort(err)\n      }\n    })\n\n    this.events.safeDispatchEvent('connection:open', {\n      detail: connection\n    })\n\n    // @ts-expect-error nah\n    connection.__maConnTimeline = _timeline\n\n    return connection\n  }\n\n  /**\n   * Routes incoming streams to the correct handler\n   */\n  _onStream (opts: OnStreamOptions): void {\n    const { connection, stream, protocol } = opts\n    const { handler, options } = this.components.registrar.getHandler(protocol)\n\n    if (connection.limits != null && options.runOnLimitedConnection !== true) {\n      throw new LimitedConnectionError('Cannot open protocol stream on limited connection')\n    }\n\n    handler({ connection, stream })\n  }\n\n  /**\n   * Attempts to encrypt the incoming `connection` with the provided `cryptos`\n   */\n  async _encryptInbound (connection: MultiaddrConnection, options?: AbortOptions): Promise<CryptoResult> {\n    const protocols = Array.from(this.connectionEncrypters.keys())\n\n    try {\n      const { stream, protocol } = await mss.handle(connection, protocols, {\n        ...options,\n        log: connection.log\n      })\n      const encrypter = this.connectionEncrypters.get(protocol)\n\n      if (encrypter == null) {\n        throw new EncryptionFailedError(`no crypto module found for ${protocol}`)\n      }\n\n      connection.log('encrypting inbound connection to %a using %s', connection.remoteAddr, protocol)\n\n      return {\n        ...await encrypter.secureInbound(stream, options),\n        protocol\n      }\n    } catch (err: any) {\n      connection.log.error('encrypting inbound connection from %a failed', connection.remoteAddr, err)\n      throw new EncryptionFailedError(err.message)\n    }\n  }\n\n  /**\n   * Attempts to encrypt the given `connection` with the provided connection encrypters.\n   * The first `ConnectionEncrypter` module to succeed will be used\n   */\n  async _encryptOutbound (connection: MultiaddrConnection, options: SecureConnectionOptions): Promise<CryptoResult> {\n    const protocols = Array.from(this.connectionEncrypters.keys())\n\n    try {\n      connection.log.trace('selecting encrypter from %s', protocols)\n\n      const { stream, protocol } = await mss.select(connection, protocols, {\n        ...options,\n        log: connection.log,\n        yieldBytes: true\n      })\n      const encrypter = this.connectionEncrypters.get(protocol)\n\n      if (encrypter == null) {\n        throw new EncryptionFailedError(`no crypto module found for ${protocol}`)\n      }\n\n      connection.log('encrypting outbound connection to %a using %s', connection.remoteAddr, protocol)\n\n      return {\n        ...await encrypter.secureOutbound(stream, options),\n        protocol\n      }\n    } catch (err: any) {\n      connection.log.error('encrypting outbound connection to %a failed', connection.remoteAddr, err)\n      throw new EncryptionFailedError(err.message)\n    }\n  }\n\n  /**\n   * Selects one of the given muxers via multistream-select. That\n   * muxer will be used for all future streams on the connection.\n   */\n  async _multiplexOutbound (connection: MultiaddrConnection, muxers: Map<string, StreamMuxerFactory>, options: AbortOptions): Promise<{ stream: MultiaddrConnection, muxerFactory?: StreamMuxerFactory }> {\n    const protocols = Array.from(muxers.keys())\n    connection.log('outbound selecting muxer %s', protocols)\n    try {\n      connection.log.trace('selecting stream muxer from %s', protocols)\n\n      const {\n        stream,\n        protocol\n      } = await mss.select(connection, protocols, {\n        ...options,\n        log: connection.log,\n        yieldBytes: true\n      })\n\n      connection.log('selected %s as muxer protocol', protocol)\n      const muxerFactory = muxers.get(protocol)\n\n      return { stream, muxerFactory }\n    } catch (err: any) {\n      connection.log.error('error multiplexing outbound connection', err)\n      throw new MuxerUnavailableError(String(err))\n    }\n  }\n\n  /**\n   * Registers support for one of the given muxers via multistream-select. The\n   * selected muxer will be used for all future streams on the connection.\n   */\n  async _multiplexInbound (connection: MultiaddrConnection, muxers: Map<string, StreamMuxerFactory>, options: AbortOptions): Promise<{ stream: MultiaddrConnection, muxerFactory?: StreamMuxerFactory }> {\n    const protocols = Array.from(muxers.keys())\n    connection.log('inbound handling muxers %s', protocols)\n    try {\n      const { stream, protocol } = await mss.handle(connection, protocols, {\n        ...options,\n        log: connection.log\n      })\n      const muxerFactory = muxers.get(protocol)\n\n      return { stream, muxerFactory }\n    } catch (err: any) {\n      connection.log.error('error multiplexing inbound connection', err)\n      throw new MuxerUnavailableError(String(err))\n    }\n  }\n}\n","import { connectionSymbol, setMaxListeners, LimitedConnectionError, ConnectionClosedError, ConnectionClosingError } from '@libp2p/interface'\nimport type { AbortOptions, Logger, ComponentLogger, Direction, Connection, Stream, ConnectionTimeline, ConnectionStatus, NewStreamOptions, PeerId, ConnectionLimits } from '@libp2p/interface'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst CLOSE_TIMEOUT = 500\n\ninterface ConnectionInit {\n  remoteAddr: Multiaddr\n  remotePeer: PeerId\n  newStream(protocols: string[], options?: AbortOptions): Promise<Stream>\n  close(options?: AbortOptions): Promise<void>\n  abort(err: Error): void\n  getStreams(): Stream[]\n  status: ConnectionStatus\n  direction: Direction\n  timeline: ConnectionTimeline\n  multiplexer?: string\n  encryption?: string\n  limits?: ConnectionLimits\n  logger: ComponentLogger\n}\n\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nexport class ConnectionImpl implements Connection {\n  /**\n   * Connection identifier.\n   */\n  public readonly id: string\n\n  /**\n   * Observed multiaddr of the remote peer\n   */\n  public readonly remoteAddr: Multiaddr\n\n  /**\n   * Remote peer id\n   */\n  public readonly remotePeer: PeerId\n\n  public direction: Direction\n  public timeline: ConnectionTimeline\n  public multiplexer?: string\n  public encryption?: string\n  public status: ConnectionStatus\n  public limits?: ConnectionLimits\n  public readonly log: Logger\n\n  /**\n   * User provided tags\n   *\n   */\n  public tags: string[]\n\n  /**\n   * Reference to the new stream function of the multiplexer\n   */\n  private readonly _newStream: (protocols: string[], options?: NewStreamOptions) => Promise<Stream>\n\n  /**\n   * Reference to the close function of the raw connection\n   */\n  private readonly _close: (options?: AbortOptions) => Promise<void>\n\n  private readonly _abort: (err: Error) => void\n\n  /**\n   * Reference to the getStreams function of the muxer\n   */\n  private readonly _getStreams: () => Stream[]\n\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   */\n  constructor (init: ConnectionInit) {\n    const { remoteAddr, remotePeer, newStream, close, abort, getStreams } = init\n\n    this.id = `${(parseInt(String(Math.random() * 1e9))).toString(36)}${Date.now()}`\n    this.remoteAddr = remoteAddr\n    this.remotePeer = remotePeer\n    this.direction = init.direction\n    this.status = 'open'\n    this.timeline = init.timeline\n    this.multiplexer = init.multiplexer\n    this.encryption = init.encryption\n    this.limits = init.limits\n    this.log = init.logger.forComponent(`libp2p:connection:${this.direction}:${this.id}`)\n\n    if (this.remoteAddr.getPeerId() == null) {\n      this.remoteAddr = this.remoteAddr.encapsulate(`/p2p/${this.remotePeer}`)\n    }\n\n    this._newStream = newStream\n    this._close = close\n    this._abort = abort\n    this._getStreams = getStreams\n    this.tags = []\n  }\n\n  readonly [Symbol.toStringTag] = 'Connection'\n\n  readonly [connectionSymbol] = true\n\n  /**\n   * Get all the streams of the muxer\n   */\n  get streams (): Stream[] {\n    return this._getStreams()\n  }\n\n  /**\n   * Create a new stream from this connection\n   */\n  async newStream (protocols: string | string[], options?: NewStreamOptions): Promise<Stream> {\n    if (this.status === 'closing') {\n      throw new ConnectionClosingError('the connection is being closed')\n    }\n\n    if (this.status === 'closed') {\n      throw new ConnectionClosedError('the connection is closed')\n    }\n\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols]\n    }\n\n    if (this.limits != null && options?.runOnLimitedConnection !== true) {\n      throw new LimitedConnectionError('Cannot open protocol stream on limited connection')\n    }\n\n    const stream = await this._newStream(protocols, options)\n\n    stream.direction = 'outbound'\n\n    return stream\n  }\n\n  /**\n   * Close the connection\n   */\n  async close (options: AbortOptions = {}): Promise<void> {\n    if (this.status === 'closed' || this.status === 'closing') {\n      return\n    }\n\n    this.log('closing connection to %a', this.remoteAddr)\n\n    this.status = 'closing'\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(CLOSE_TIMEOUT)\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      this.log.trace('closing underlying transport')\n\n      // close raw connection\n      await this._close(options)\n\n      this.log.trace('updating timeline with close time')\n\n      this.status = 'closed'\n      this.timeline.close = Date.now()\n    } catch (err: any) {\n      this.log.error('error encountered during graceful close of connection to %a', this.remoteAddr, err)\n      this.abort(err)\n    }\n  }\n\n  abort (err: Error): void {\n    if (this.status === 'closed') {\n      return\n    }\n\n    this.log.error('aborting connection to %a due to error', this.remoteAddr, err)\n\n    this.status = 'closing'\n\n    // Abort raw connection\n    this._abort(err)\n\n    this.status = 'closed'\n    this.timeline.close = Date.now()\n  }\n}\n\nexport function createConnection (init: ConnectionInit): Connection {\n  return new ConnectionImpl(init)\n}\n","export const version = '2.5.0'\nexport const name = 'js-libp2p'\n","import { identify, identifyPush } from '@libp2p/identify'\nimport { bootstrap } from \"@libp2p/bootstrap\";\nimport { tcp } from '@libp2p/tcp'\nimport { webSockets } from '@libp2p/websockets'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { gossipsub } from '@chainsafe/libp2p-gossipsub'\nimport { Libp2pOptions } from 'libp2p'\nimport { dataDir } from '../datadir'\nimport bootstrapConfig from './bootstrap.json'\n\n\nconsole.log(\"bootstrapConfig.addresses: \", bootstrapConfig.addresses);\n/**\n * A basic Libp2p configuration for Node.js nodes.\n */\nconst libp2pOptions: Libp2pOptions = {\n  peerStore: {\n    persistence: true,\n    threshold: 5\n  },\n  peerDiscovery: [\n    bootstrap({\n      list: bootstrapConfig.addresses\n    }),\n  ],\n  connectionManager: {\n    autoDial: true // automatically dial stored peers\n  },\n  addresses: {\n    listen: ['/ip4/0.0.0.0/tcp/0', '/ip4/0.0.0.0/tcp/0/ws']\n  },\n  transports: [\n    tcp(),\n    webSockets()\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  services: {\n    identify: identify(),\n    identifyPush: identifyPush(),\n    pubsub: gossipsub({ allowPublishToZeroTopicPeers: true })\n  }\n}\n\nexport { libp2pOptions }\n","import { publicKeyFromProtobuf } from '@libp2p/crypto/keys'\nimport { serviceCapabilities } from '@libp2p/interface'\nimport { peerIdFromPublicKey } from '@libp2p/peer-id'\nimport { decode } from 'it-length-prefixed'\nimport { lpStream, type LengthPrefixedStream } from 'it-length-prefixed-stream'\nimport { duplexPair } from 'it-pair/duplex'\nimport { pipe } from 'it-pipe'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js'\nimport { defaultCrypto } from './crypto/index.js'\nimport { wrapCrypto, type ICryptoInterface } from './crypto.js'\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js'\nimport { type MetricsRegistry, registerMetrics } from './metrics.js'\nimport { performHandshakeInitiator, performHandshakeResponder } from './performHandshake.js'\nimport { decryptStream, encryptStream } from './streaming.js'\nimport type { NoiseComponents } from './index.js'\nimport type { NoiseExtensions } from './proto/payload.js'\nimport type { HandshakeResult, ICrypto, INoiseConnection, KeyPair } from './types.js'\nimport type { MultiaddrConnection, SecuredConnection, PeerId, PrivateKey, PublicKey, AbortOptions } from '@libp2p/interface'\nimport type { Duplex } from 'it-stream-types'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseInit {\n  /**\n   * x25519 private key, reuse for faster handshakes\n   */\n  staticNoiseKey?: Uint8Array\n  extensions?: NoiseExtensions\n  crypto?: ICryptoInterface\n  prologueBytes?: Uint8Array\n}\n\nexport class Noise implements INoiseConnection {\n  public protocol = '/noise'\n  public crypto: ICrypto\n\n  private readonly prologue: Uint8Array\n  private readonly staticKey: KeyPair\n  private readonly extensions?: NoiseExtensions\n  private readonly metrics?: MetricsRegistry\n  private readonly components: NoiseComponents\n\n  constructor (components: NoiseComponents, init: NoiseInit = {}) {\n    const { staticNoiseKey, extensions, crypto, prologueBytes } = init\n    const { metrics } = components\n\n    this.components = components\n    const _crypto = crypto ?? defaultCrypto\n    this.crypto = wrapCrypto(_crypto)\n    this.extensions = extensions\n    this.metrics = metrics ? registerMetrics(metrics) : undefined\n\n    if (staticNoiseKey) {\n      // accepts x25519 private key of length 32\n      this.staticKey = _crypto.generateX25519KeyPairFromSeed(staticNoiseKey)\n    } else {\n      this.staticKey = _crypto.generateX25519KeyPair()\n    }\n    this.prologue = prologueBytes ?? uint8ArrayAlloc(0)\n  }\n\n  readonly [Symbol.toStringTag] = '@chainsafe/libp2p-noise'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/connection-encryption',\n    '@chainsafe/libp2p-noise'\n  ]\n\n  /**\n   * Encrypt outgoing data to the remote party (handshake as initiator)\n   *\n   * @param connection - streaming iterable duplex that will be encrypted\n   * @param options\n   * @param options.remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer\n   * @param options.signal - Used to abort the operation\n   */\n  public async secureOutbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (connection: Stream, options?: { remotePeer?: PeerId, signal?: AbortSignal }): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    const handshake = await this.performHandshakeInitiator(\n      wrappedConnection,\n      this.components.privateKey,\n      options?.remotePeer?.publicKey,\n      options\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    const publicKey = publicKeyFromProtobuf(handshake.payload.identityKey)\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: peerIdFromPublicKey(publicKey)\n    }\n  }\n\n  /**\n   * Decrypt incoming data (handshake as responder).\n   *\n   * @param connection - streaming iterable duplex that will be encrypted\n   * @param options\n   * @param options.remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer\n   * @param options.signal - Used to abort the operation\n   */\n  public async secureInbound <Stream extends Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>> = MultiaddrConnection> (connection: Stream, options?: { remotePeer?: PeerId, signal?: AbortSignal }): Promise<SecuredConnection<Stream, NoiseExtensions>> {\n    const wrappedConnection = lpStream(\n      connection,\n      {\n        lengthEncoder: uint16BEEncode,\n        lengthDecoder: uint16BEDecode,\n        maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n      }\n    )\n\n    const handshake = await this.performHandshakeResponder(\n      wrappedConnection,\n      this.components.privateKey,\n      options?.remotePeer?.publicKey,\n      options\n    )\n    const conn = await this.createSecureConnection(wrappedConnection, handshake)\n\n    connection.source = conn.source\n    connection.sink = conn.sink\n\n    const publicKey = publicKeyFromProtobuf(handshake.payload.identityKey)\n\n    return {\n      conn: connection,\n      remoteExtensions: handshake.payload.extensions,\n      remotePeer: peerIdFromPublicKey(publicKey)\n    }\n  }\n\n  /**\n   * Perform XX handshake as initiator.\n   */\n  private async performHandshakeInitiator (\n    connection: LengthPrefixedStream,\n    // TODO: pass private key in noise constructor via Components\n    privateKey: PrivateKey,\n    remoteIdentityKey?: PublicKey,\n    options?: AbortOptions\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    try {\n      result = await performHandshakeInitiator({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: this.extensions\n      }, options)\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  /**\n   * Perform XX handshake as responder.\n   */\n  private async performHandshakeResponder (\n    connection: LengthPrefixedStream,\n    privateKey: PrivateKey,\n    remoteIdentityKey?: PublicKey,\n    options?: AbortOptions\n  ): Promise<HandshakeResult> {\n    let result: HandshakeResult\n    try {\n      result = await performHandshakeResponder({\n        connection,\n        privateKey,\n        remoteIdentityKey,\n        log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),\n        crypto: this.crypto,\n        prologue: this.prologue,\n        s: this.staticKey,\n        extensions: this.extensions\n      }, options)\n      this.metrics?.xxHandshakeSuccesses.increment()\n    } catch (e: unknown) {\n      this.metrics?.xxHandshakeErrors.increment()\n      throw e\n    }\n\n    return result\n  }\n\n  private async createSecureConnection (\n    connection: LengthPrefixedStream<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>>,\n    handshake: HandshakeResult\n  ): Promise<Duplex<AsyncGenerator<Uint8Array | Uint8ArrayList>>> {\n    // Create encryption box/unbox wrapper\n    const [secure, user] = duplexPair<Uint8Array | Uint8ArrayList>()\n    const network = connection.unwrap()\n\n    await pipe(\n      secure, // write to wrapper\n      encryptStream(handshake, this.metrics), // encrypt data + prefix with message length\n      network, // send to the remote peer\n      (source) => decode(source, { lengthDecoder: uint16BEDecode }), // read message length prefix\n      decryptStream(handshake, this.metrics), // decrypt the incoming data\n      secure // pipe to the wrapper\n    )\n\n    return user\n  }\n}\n","export function isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n","import * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport { isAsyncIterable } from './utils.js'\nimport type { LengthEncoderFunction } from './index.js'\nimport type { Source } from 'it-stream-types'\n\ninterface EncoderOptions {\n  lengthEncoder?: LengthEncoderFunction\n}\n\nconst defaultEncoder: LengthEncoderFunction = (length) => {\n  const lengthLength = varint.encodingLength(length)\n  const lengthBuf = allocUnsafe(lengthLength)\n\n  varint.encode(length, lengthBuf)\n\n  defaultEncoder.bytes = lengthLength\n\n  return lengthBuf\n}\ndefaultEncoder.bytes = 0\n\nexport function encode (source: Iterable<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): Generator<Uint8Array, void, undefined>\nexport function encode (source: Source<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): AsyncGenerator<Uint8Array, void, undefined>\nexport function encode (source: Source<Uint8ArrayList | Uint8Array>, options?: EncoderOptions): Generator<Uint8Array, void, undefined> | AsyncGenerator<Uint8Array, void, undefined> {\n  options = options ?? {}\n\n  const encodeLength = options.lengthEncoder ?? defaultEncoder\n\n  function * maybeYield (chunk: Uint8Array | Uint8ArrayList): Generator<Uint8Array, void, undefined> {\n    // length + data\n    const length = encodeLength(chunk.byteLength)\n\n    // yield only Uint8Arrays\n    if (length instanceof Uint8Array) {\n      yield length\n    } else {\n      yield * length\n    }\n\n    // yield only Uint8Arrays\n    if (chunk instanceof Uint8Array) {\n      yield chunk\n    } else {\n      yield * chunk\n    }\n  }\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const chunk of source) {\n        yield * maybeYield(chunk)\n      }\n    })()\n  }\n\n  return (function * () {\n    for (const chunk of source) {\n      yield * maybeYield(chunk)\n    }\n  })()\n}\n\nencode.single = (chunk: Uint8ArrayList | Uint8Array, options?: EncoderOptions) => {\n  options = options ?? {}\n  const encodeLength = options.lengthEncoder ?? defaultEncoder\n\n  return new Uint8ArrayList(\n    encodeLength(chunk.byteLength),\n    chunk\n  )\n}\n","/**\n * The reported length of the next data message was not a positive integer\n */\nexport class InvalidMessageLengthError extends Error {\n  name = 'InvalidMessageLengthError'\n  code = 'ERR_INVALID_MSG_LENGTH'\n}\n\n/**\n * The reported length of the next data message was larger than the configured\n * max allowable value\n */\nexport class InvalidDataLengthError extends Error {\n  name = 'InvalidDataLengthError'\n  code = 'ERR_MSG_DATA_TOO_LONG'\n}\n\n/**\n * The varint used to specify the length of the next data message contained more\n * bytes than the configured max allowable value\n */\nexport class InvalidDataLengthLengthError extends Error {\n  name = 'InvalidDataLengthLengthError'\n  code = 'ERR_MSG_LENGTH_TOO_LONG'\n}\n\n/**\n * The incoming stream ended before the expected number of bytes were read\n */\nexport class UnexpectedEOFError extends Error {\n  name = 'UnexpectedEOFError'\n  code = 'ERR_UNEXPECTED_EOF'\n}\n","/* eslint max-depth: [\"error\", 6] */\n\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { InvalidDataLengthError, InvalidDataLengthLengthError, InvalidMessageLengthError, UnexpectedEOFError } from './errors.js'\nimport { isAsyncIterable } from './utils.js'\nimport type { LengthDecoderFunction } from './index.js'\nimport type { Reader } from 'it-reader'\nimport type { Source } from 'it-stream-types'\n\nexport interface ReadState {\n  dataLength: number\n}\n\nexport interface DecoderOptions {\n  lengthDecoder?: LengthDecoderFunction\n  onData?(data: Uint8ArrayList): void\n  onLength?(length: number): void\n  maxLengthLength?: number\n  maxDataLength?: number\n}\n\nexport interface ReadResult {\n  mode: string\n  chunk?: Uint8ArrayList\n  buffer: Uint8ArrayList\n  state?: ReadState\n  data?: Uint8ArrayList\n}\n\n// Maximum length of the length section of the message\nexport const MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nexport const MAX_DATA_LENGTH = 1024 * 1024 * 4\n\nenum ReadMode {\n  LENGTH,\n  DATA\n}\n\nconst defaultDecoder: LengthDecoderFunction = (buf) => {\n  const length = varint.decode(buf)\n  defaultDecoder.bytes = varint.encodingLength(length)\n\n  return length\n}\ndefaultDecoder.bytes = 0\n\nexport function decode (source: Iterable<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): Generator<Uint8ArrayList, void, unknown>\nexport function decode (source: Source<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): AsyncGenerator<Uint8ArrayList, void, unknown>\nexport function decode (source: Source<Uint8ArrayList | Uint8Array>, options?: DecoderOptions): Generator<Uint8ArrayList, void, unknown> | AsyncGenerator<Uint8ArrayList, void, unknown> {\n  const buffer = new Uint8ArrayList()\n  let mode = ReadMode.LENGTH\n  let dataLength = -1\n\n  const lengthDecoder = options?.lengthDecoder ?? defaultDecoder\n  const maxLengthLength = options?.maxLengthLength ?? MAX_LENGTH_LENGTH\n  const maxDataLength = options?.maxDataLength ?? MAX_DATA_LENGTH\n\n  function * maybeYield (): Generator<Uint8ArrayList> {\n    while (buffer.byteLength > 0) {\n      if (mode === ReadMode.LENGTH) {\n        // read length, ignore errors for short reads\n        try {\n          dataLength = lengthDecoder(buffer)\n\n          if (dataLength < 0) {\n            throw new InvalidMessageLengthError('Invalid message length')\n          }\n\n          if (dataLength > maxDataLength) {\n            throw new InvalidDataLengthError('Message length too long')\n          }\n\n          const dataLengthLength = lengthDecoder.bytes\n          buffer.consume(dataLengthLength)\n\n          if (options?.onLength != null) {\n            options.onLength(dataLength)\n          }\n\n          mode = ReadMode.DATA\n        } catch (err: any) {\n          if (err instanceof RangeError) {\n            if (buffer.byteLength > maxLengthLength) {\n              throw new InvalidDataLengthLengthError('Message length length too long')\n            }\n\n            break\n          }\n\n          throw err\n        }\n      }\n\n      if (mode === ReadMode.DATA) {\n        if (buffer.byteLength < dataLength) {\n          // not enough data, wait for more\n          break\n        }\n\n        const data = buffer.sublist(0, dataLength)\n        buffer.consume(dataLength)\n\n        if (options?.onData != null) {\n          options.onData(data)\n        }\n\n        yield data\n\n        mode = ReadMode.LENGTH\n      }\n    }\n  }\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const buf of source) {\n        buffer.append(buf)\n\n        yield * maybeYield()\n      }\n\n      if (buffer.byteLength > 0) {\n        throw new UnexpectedEOFError('Unexpected end of input')\n      }\n    })()\n  }\n\n  return (function * () {\n    for (const buf of source) {\n      buffer.append(buf)\n\n      yield * maybeYield()\n    }\n\n    if (buffer.byteLength > 0) {\n      throw new UnexpectedEOFError('Unexpected end of input')\n    }\n  })()\n}\n\ndecode.fromReader = (reader: Reader, options?: DecoderOptions) => {\n  let byteLength = 1 // Read single byte chunks until the length is known\n\n  const varByteSource = (async function * () {\n    while (true) {\n      try {\n        const { done, value } = await reader.next(byteLength)\n\n        if (done === true) {\n          return\n        }\n\n        if (value != null) {\n          yield value\n        }\n      } catch (err: any) {\n        if (err.code === 'ERR_UNDER_READ') {\n          return { done: true, value: null }\n        }\n        throw err\n      } finally {\n        // Reset the byteLength so we continue to check for varints\n        byteLength = 1\n      }\n    }\n  }())\n\n  /**\n   * Once the length has been parsed, read chunk for that length\n   */\n  const onLength = (l: number): void => { byteLength = l }\n  return decode(varByteSource, {\n    ...(options ?? {}),\n    onLength\n  })\n}\n","/**\n * The reported length of the next data message was not a positive integer\n */\nexport class InvalidMessageLengthError extends Error {\n  name = 'InvalidMessageLengthError'\n  code = 'ERR_INVALID_MSG_LENGTH'\n}\n\n/**\n * The reported length of the next data message was larger than the configured\n * max allowable value\n */\nexport class InvalidDataLengthError extends Error {\n  name = 'InvalidDataLengthError'\n  code = 'ERR_MSG_DATA_TOO_LONG'\n}\n\n/**\n * The varint used to specify the length of the next data message contained more\n * bytes than the configured max allowable value\n */\nexport class InvalidDataLengthLengthError extends Error {\n  name = 'InvalidDataLengthLengthError'\n  code = 'ERR_MSG_LENGTH_TOO_LONG'\n}\n","/**\n * @packageDocumentation\n *\n * This module makes it easy to send and receive length-prefixed byte arrays over streams.\n *\n * @example\n *\n * ```typescript\n * import { lpStream } from 'it-length-prefixed-stream'\n *\n * const stream = lpStream(duplex)\n *\n * // read the next length-prefixed chunk\n * const bytes = await stream.read()\n *\n * // write a length-prefixed chunk\n * await stream.write(Uint8Array.from([0, 1, 2, 3, 4]))\n *\n * // write several chunks, all individually length-prefixed\n * await stream.writeV([\n *   Uint8Array.from([0, 1, 2, 3, 4]),\n *   Uint8Array.from([5, 6, 7, 8, 9])\n * ])\n * ```\n */\nimport { byteStream, type ByteStreamOpts } from 'it-byte-stream'\nimport * as varint from 'uint8-varint'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { InvalidDataLengthError, InvalidDataLengthLengthError, InvalidMessageLengthError } from './errors.js'\nimport type { Duplex } from 'it-stream-types'\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nexport interface LengthPrefixedStream <Stream = unknown> {\n  /**\n   * Read the next length-prefixed number of bytes from the stream\n   */\n  read(options?: AbortOptions): Promise<Uint8ArrayList>\n\n  /**\n   * Write the passed bytes to the stream prefixed by their length\n   */\n  write(input: Uint8Array | Uint8ArrayList, options?: AbortOptions): Promise<void>\n\n  /**\n   * Write passed list of bytes, prefix by their individual lengths to the stream as a single write\n   */\n  writeV(input: Array<Uint8Array | Uint8ArrayList>, options?: AbortOptions): Promise<void>\n\n  /**\n   * Returns the underlying stream\n   */\n  unwrap(): Stream\n}\n\nexport interface LengthPrefixedStreamOpts extends ByteStreamOpts {\n  // encoding opts\n  lengthEncoder (value: number): Uint8ArrayList | Uint8Array\n\n  // decoding opts\n  lengthDecoder (data: Uint8ArrayList): number\n  maxLengthLength: number\n  maxDataLength: number\n}\n\nexport function lpStream <Stream extends Duplex<any, any, any>> (duplex: Stream, opts: Partial<LengthPrefixedStreamOpts> = {}): LengthPrefixedStream<Stream> {\n  const bytes = byteStream(duplex, opts)\n\n  if (opts.maxDataLength != null && opts.maxLengthLength == null) {\n    // if max data length is set but max length length is not, calculate the\n    // max length length needed to encode max data length\n    opts.maxLengthLength = varint.encodingLength(opts.maxDataLength)\n  }\n\n  const decodeLength = opts?.lengthDecoder ?? varint.decode\n  const encodeLength = opts?.lengthEncoder ?? varint.encode\n\n  const W: LengthPrefixedStream<Stream> = {\n    read: async (options?: AbortOptions) => {\n      let dataLength: number = -1\n      const lengthBuffer = new Uint8ArrayList()\n\n      while (true) {\n        // read one byte at a time until we can decode a varint\n        lengthBuffer.append(await bytes.read(1, options))\n\n        try {\n          dataLength = decodeLength(lengthBuffer)\n        } catch (err) {\n          if (err instanceof RangeError) {\n            continue\n          }\n\n          throw err\n        }\n\n        if (dataLength < 0) {\n          throw new InvalidMessageLengthError('Invalid message length')\n        }\n\n        if (opts?.maxLengthLength != null && lengthBuffer.byteLength > opts.maxLengthLength) {\n          throw new InvalidDataLengthLengthError('message length length too long')\n        }\n\n        if (dataLength > -1) {\n          break\n        }\n      }\n\n      if (opts?.maxDataLength != null && dataLength > opts.maxDataLength) {\n        throw new InvalidDataLengthError('message length too long')\n      }\n\n      return bytes.read(dataLength, options)\n    },\n    write: async (data, options?: AbortOptions) => {\n      // encode, write\n      await bytes.write(new Uint8ArrayList(encodeLength(data.byteLength), data), options)\n    },\n    writeV: async (data, options?: AbortOptions) => {\n      const list = new Uint8ArrayList(\n        ...data.flatMap(buf => ([encodeLength(buf.byteLength), buf]))\n      )\n\n      // encode, write\n      await bytes.write(list, options)\n    },\n    unwrap: () => {\n      return bytes.unwrap()\n    }\n  }\n\n  return W\n}\n","import defer from 'p-defer'\nimport type { Source, Duplex } from 'it-stream-types'\n\n/**\n * A pair of streams where one drains from the other\n */\nexport function pair <T> (): Duplex<AsyncGenerator<T>, Source<T>, Promise<void>> {\n  const deferred = defer<Source<T>>()\n  let piped = false\n\n  return {\n    sink: async source => {\n      if (piped) {\n        throw new Error('already piped')\n      }\n\n      piped = true\n      deferred.resolve(source)\n    },\n    source: (async function * () {\n      const source = await deferred.promise\n\n      yield * source\n    }())\n  }\n}\n","import { pair } from './index.js'\nimport type { Duplex, Source } from 'it-stream-types'\n\n/**\n * Two duplex streams that are attached to each other\n */\nexport function duplexPair <T> (): [Duplex<AsyncGenerator<T>, Source<T>, Promise<void>>, Duplex<AsyncGenerator<T>, Source<T>, Promise<void>>] {\n  const a = pair<T>()\n  const b = pair<T>()\n  return [\n    {\n      source: a.source,\n      sink: b.sink\n    },\n    {\n      source: b.source,\n      sink: a.sink\n    }\n  ]\n}\n","import { pushable } from 'it-pushable'\nimport merge from 'it-merge'\nimport type { Duplex, Transform, Sink } from 'it-stream-types'\n\ninterface SourceFn<A = any> { (): A }\n\ntype PipeSource<A = any> =\n  Iterable<A> |\n  AsyncIterable<A> |\n  SourceFn<A> |\n  Duplex<A, any, any>\n\ntype PipeTransform<A = any, B = any> =\n  Transform<A, B> |\n  Duplex<B, A>\n\ntype PipeSink<A = any, B = any> =\n  Sink<A, B> |\n  Duplex<any, A, B>\n\ntype PipeOutput<A> =\n  A extends Sink<any> ? ReturnType<A> :\n    A extends Duplex<any, any, any> ? ReturnType<A['sink']> :\n      never\n\n// single item pipe output includes pipe source types\ntype SingleItemPipeOutput<A> =\n  A extends Iterable<any> ? A :\n    A extends AsyncIterable<any> ? A :\n      A extends SourceFn ? ReturnType<A> :\n        A extends Duplex<any, any, any> ? A['source'] :\n          PipeOutput<A>\n\ntype PipeFnInput<A> =\n  A extends Iterable<any> ? A :\n    A extends AsyncIterable<any> ? A :\n      A extends SourceFn ? ReturnType<A> :\n        A extends Transform<any, any> ? ReturnType<A> :\n          A extends Duplex<any, any, any> ? A['source'] :\n            never\n\n// one item, just a pass-through\nexport function pipe<\n  A extends PipeSource\n> (\n  source: A\n): SingleItemPipeOutput<A>\n\n// two items, source to sink\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeSink<PipeFnInput<A>>\n> (\n  source: A,\n  sink: B\n): PipeOutput<B>\n\n// three items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeSink<PipeFnInput<B>>\n> (\n  source: A,\n  transform1: B,\n  sink: C\n): PipeOutput<C>\n\n// many items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeSink<PipeFnInput<C>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  sink: D\n): PipeOutput<D>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeSink<PipeFnInput<D>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  sink: E\n): PipeOutput<E>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeSink<PipeFnInput<E>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  sink: F\n): PipeOutput<F>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeSink<PipeFnInput<F>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  sink: G\n): PipeOutput<G>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeTransform<PipeFnInput<F>>,\n  H extends PipeSink<PipeFnInput<G>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  transform6: G,\n  sink: H\n): PipeOutput<H>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeTransform<PipeFnInput<F>>,\n  H extends PipeTransform<PipeFnInput<G>>,\n  I extends PipeSink<PipeFnInput<H>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  transform6: G,\n  transform7: H,\n  sink: I\n): PipeOutput<I>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeTransform<PipeFnInput<F>>,\n  H extends PipeTransform<PipeFnInput<G>>,\n  I extends PipeTransform<PipeFnInput<H>>,\n  J extends PipeSink<PipeFnInput<I>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  transform6: G,\n  transform7: H,\n  transform8: I,\n  sink: J\n): PipeOutput<J>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeTransform<PipeFnInput<F>>,\n  H extends PipeTransform<PipeFnInput<G>>,\n  I extends PipeTransform<PipeFnInput<H>>,\n  J extends PipeTransform<PipeFnInput<I>>,\n  K extends PipeSink<PipeFnInput<J>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  transform6: G,\n  transform7: H,\n  transform8: I,\n  transform9: J,\n  sink: K\n): PipeOutput<K>\n\n// lots of items, source to sink with transform(s) in between\nexport function pipe<\n  A extends PipeSource,\n  B extends PipeTransform<PipeFnInput<A>>,\n  C extends PipeTransform<PipeFnInput<B>>,\n  D extends PipeTransform<PipeFnInput<C>>,\n  E extends PipeTransform<PipeFnInput<D>>,\n  F extends PipeTransform<PipeFnInput<E>>,\n  G extends PipeTransform<PipeFnInput<F>>,\n  H extends PipeTransform<PipeFnInput<G>>,\n  I extends PipeTransform<PipeFnInput<H>>,\n  J extends PipeTransform<PipeFnInput<I>>,\n  K extends PipeTransform<PipeFnInput<J>>,\n  L extends PipeSink<PipeFnInput<K>>\n> (\n  source: A,\n  transform1: B,\n  transform2: C,\n  transform3: D,\n  transform4: E,\n  transform5: F,\n  transform6: G,\n  transform7: H,\n  transform8: I,\n  transform9: J,\n  transform10: K,\n  sink: L\n): PipeOutput<L>\n\nexport function pipe (first: any, ...rest: any[]): any {\n  if (first == null) {\n    throw new Error('Empty pipeline')\n  }\n\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(first)) {\n    const duplex = first\n    first = () => duplex.source\n  // Iterable at start: wrap in function\n  } else if (isIterable(first) || isAsyncIterable(first)) {\n    const source = first\n    first = () => source\n  }\n\n  const fns = [first, ...rest]\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (let i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i])\n      }\n    }\n  }\n\n  return rawPipe(...fns)\n}\n\nexport const rawPipe = (...fns: any): any => {\n  let res\n  while (fns.length > 0) {\n    res = fns.shift()(res)\n  }\n  return res\n}\n\nconst isAsyncIterable = (obj: any): obj is AsyncIterable<unknown> => {\n  return obj?.[Symbol.asyncIterator] != null\n}\n\nconst isIterable = (obj: any): obj is Iterable<unknown> => {\n  return obj?.[Symbol.iterator] != null\n}\n\nconst isDuplex = (obj: any): obj is Duplex => {\n  if (obj == null) {\n    return false\n  }\n\n  return obj.sink != null && obj.source != null\n}\n\nconst duplexPipelineFn = (duplex: Duplex<any, any, any>) => {\n  return (source: any) => {\n    const p = duplex.sink(source)\n\n    if (p?.then != null) {\n      const stream = pushable<any>({\n        objectMode: true\n      })\n      p.then(() => {\n        stream.end()\n      }, (err: Error) => {\n        stream.end(err)\n      })\n\n      let sourceWrap: () => Iterable<any> | AsyncIterable<any>\n      const source = duplex.source\n\n      if (isAsyncIterable(source)) {\n        sourceWrap = async function * () {\n          yield * source\n          stream.end()\n        }\n      } else if (isIterable(source)) {\n        sourceWrap = function * () {\n          yield * source\n          stream.end()\n        }\n      } else {\n        throw new Error('Unknown duplex source type - must be Iterable or AsyncIterable')\n      }\n\n      return merge(stream, sourceWrap())\n    }\n\n    return duplex.source\n  }\n}\n","export const NOISE_MSG_MAX_LENGTH_BYTES = 65535\nexport const NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = NOISE_MSG_MAX_LENGTH_BYTES - 16\n\nexport const DUMP_SESSION_KEYS = Boolean(globalThis.process?.env?.DUMP_SESSION_KEYS)\n","import crypto from 'node:crypto'\nimport { newInstance, ChaCha20Poly1305 } from '@chainsafe/as-chacha20poly1305'\nimport { digest } from '@chainsafe/as-sha256'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { isElectronMain } from 'wherearewe'\nimport { pureJsCrypto } from './js.js'\nimport type { ICryptoInterface } from '../crypto.js'\nimport type { KeyPair } from '../types.js'\n\nconst ctx = newInstance()\nconst asImpl = new ChaCha20Poly1305(ctx)\nconst CHACHA_POLY1305 = 'chacha20-poly1305'\nconst PKCS8_PREFIX = Buffer.from([0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x04, 0x22, 0x04, 0x20])\nconst X25519_PREFIX = Buffer.from([0x30, 0x2a, 0x30, 0x05, 0x06, 0x03, 0x2b, 0x65, 0x6e, 0x03, 0x21, 0x00])\nconst nodeCrypto: Pick<ICryptoInterface, 'hashSHA256' | 'chaCha20Poly1305Encrypt' | 'chaCha20Poly1305Decrypt'> = {\n  hashSHA256 (data) {\n    const hash = crypto.createHash('sha256')\n\n    if (data instanceof Uint8Array) {\n      return hash.update(data).digest()\n    }\n\n    for (const buf of data) {\n      hash.update(buf)\n    }\n\n    return hash.digest()\n  },\n\n  chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n    const cipher = crypto.createCipheriv(CHACHA_POLY1305, k, nonce, {\n      authTagLength: 16\n    })\n    cipher.setAAD(ad, { plaintextLength: plaintext.byteLength })\n\n    if (plaintext instanceof Uint8Array) {\n      const updated = cipher.update(plaintext)\n      const final = cipher.final()\n      const tag = cipher.getAuthTag()\n\n      return Buffer.concat([updated, final, tag], updated.byteLength + final.byteLength + tag.byteLength)\n    }\n\n    const output = new Uint8ArrayList()\n\n    for (const buf of plaintext) {\n      output.append(cipher.update(buf))\n    }\n\n    const final = cipher.final()\n\n    if (final.byteLength > 0) {\n      output.append(final)\n    }\n\n    output.append(cipher.getAuthTag())\n\n    return output\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, _dst) {\n    const authTag = ciphertext.subarray(ciphertext.length - 16)\n    const decipher = crypto.createDecipheriv(CHACHA_POLY1305, k, nonce, {\n      authTagLength: 16\n    })\n\n    let text: Uint8Array | Uint8ArrayList\n\n    if (ciphertext instanceof Uint8Array) {\n      text = ciphertext.subarray(0, ciphertext.length - 16)\n    } else {\n      text = ciphertext.sublist(0, ciphertext.length - 16)\n    }\n\n    decipher.setAAD(ad, {\n      plaintextLength: text.byteLength\n    })\n    decipher.setAuthTag(authTag)\n\n    if (text instanceof Uint8Array) {\n      const output = decipher.update(text)\n      const final = decipher.final()\n\n      if (final.byteLength > 0) {\n        return Buffer.concat([output, final], output.byteLength + final.byteLength)\n      }\n\n      return output\n    }\n\n    const output = new Uint8ArrayList()\n\n    for (const buf of text) {\n      output.append(decipher.update(buf))\n    }\n\n    const final = decipher.final()\n\n    if (final.byteLength > 0) {\n      output.append(final)\n    }\n\n    return output\n  }\n}\n\nconst asCrypto: Pick<ICryptoInterface, 'hashSHA256' | 'chaCha20Poly1305Encrypt' | 'chaCha20Poly1305Decrypt'> = {\n  hashSHA256 (data) {\n    return digest(data.subarray())\n  },\n  chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n    return asImpl.seal(k, nonce, plaintext.subarray(), ad)\n  },\n  chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {\n    const plaintext = asImpl.open(k, nonce, ciphertext.subarray(), ad, dst)\n    if (!plaintext) {\n      throw new Error('Invalid chacha20poly1305 decryption')\n    }\n    return plaintext\n  }\n}\n\n// benchmarks show that for chacha20poly1305\n// the as implementation is faster for smaller payloads(<1200)\n// and the node implementation is faster for larger payloads\nexport const defaultCrypto: ICryptoInterface = {\n  ...pureJsCrypto,\n  hashSHA256 (data) {\n    return nodeCrypto.hashSHA256(data)\n  },\n  chaCha20Poly1305Encrypt (plaintext, nonce, ad, k) {\n    if (plaintext.byteLength < 1200) {\n      return asCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k)\n    }\n    return nodeCrypto.chaCha20Poly1305Encrypt(plaintext, nonce, ad, k)\n  },\n  chaCha20Poly1305Decrypt (ciphertext, nonce, ad, k, dst) {\n    if (ciphertext.byteLength < 1200) {\n      return asCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst)\n    }\n    return nodeCrypto.chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst)\n  },\n  generateX25519KeyPair (): KeyPair {\n    const { publicKey, privateKey } = crypto.generateKeyPairSync('x25519', {\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'der'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'der'\n      }\n    })\n\n    return {\n      publicKey: publicKey.subarray(X25519_PREFIX.length),\n      privateKey: privateKey.subarray(PKCS8_PREFIX.length)\n    }\n  },\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const privateKey = crypto.createPrivateKey({\n      key: Buffer.concat([\n        PKCS8_PREFIX,\n        seed\n      ], PKCS8_PREFIX.byteLength + seed.byteLength),\n      type: 'pkcs8',\n      format: 'der'\n    })\n\n    const publicKey = crypto.createPublicKey(privateKey)\n      .export({\n        type: 'spki',\n        format: 'der'\n      }).subarray(X25519_PREFIX.length)\n\n    return {\n      publicKey,\n      privateKey: seed\n    }\n  },\n  generateX25519SharedKey (privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array {\n    if (publicKey instanceof Uint8Array) {\n      publicKey = Buffer.concat([\n        X25519_PREFIX,\n        publicKey\n      ], X25519_PREFIX.byteLength + publicKey.byteLength)\n    } else {\n      publicKey = new Uint8ArrayList(X25519_PREFIX, publicKey).subarray()\n    }\n\n    if (privateKey instanceof Uint8Array) {\n      privateKey = Buffer.concat([\n        PKCS8_PREFIX,\n        privateKey\n      ], PKCS8_PREFIX.byteLength + privateKey.byteLength)\n    } else {\n      privateKey = new Uint8ArrayList(PKCS8_PREFIX, privateKey).subarray()\n    }\n\n    return crypto.diffieHellman({\n      publicKey: crypto.createPublicKey({\n        key: Buffer.from(publicKey, publicKey.byteOffset, publicKey.byteLength),\n        type: 'spki',\n        format: 'der'\n      }),\n      privateKey: crypto.createPrivateKey({\n        key: Buffer.from(privateKey, privateKey.byteOffset, privateKey.byteLength),\n        type: 'pkcs8',\n        format: 'der'\n      })\n    })\n  }\n}\n\n// no chacha20-poly1305 in electron https://github.com/electron/electron/issues/24024\nif (isElectronMain) {\n  defaultCrypto.chaCha20Poly1305Encrypt = asCrypto.chaCha20Poly1305Encrypt\n  defaultCrypto.chaCha20Poly1305Decrypt = asCrypto.chaCha20Poly1305Decrypt\n}\n",null,null,null,null,null,"import detectElectron from 'is-electron'\n\nexport const isEnvWithDom = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\nexport const isElectron = detectElectron()\n\n/**\n * Detects browser main thread  **NOT** web worker or service worker\n */\nexport const isBrowser = isEnvWithDom && !isElectron\nexport const isElectronMain = isElectron && !isEnvWithDom\nexport const isElectronRenderer = isElectron && isEnvWithDom\nexport const isNode = typeof globalThis.process !== 'undefined' && typeof globalThis.process.release !== 'undefined' && globalThis.process.release.name === 'node' && !isElectron\n// @ts-ignore\n// eslint-disable-next-line no-undef\nexport const isWebWorker = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\n\n// defeat bundlers replacing process.env.NODE_ENV with \"development\" or whatever\nexport const isTest = typeof globalThis.process !== 'undefined' && typeof globalThis.process.env !== 'undefined' && globalThis.process.env['NODE' + (() => '_')() + 'ENV'] === 'test'\nexport const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('hash must be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\nimport { bytes as abytes, isBytes } from './_assert.js';\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u16 = (arr: TypedArray) =>\n  new Uint16Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 2));\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// big-endian hardware is rare. Just in case someone still decides to run ciphers:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`string expected, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  else if (isBytes(data)) data = copyBytes(data);\n  else throw new Error(`Uint8Array expected, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts: T2\n): T1 & T2 {\n  if (opts == null || typeof opts !== 'object') throw new Error('options must be defined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n}\n\n// This will allow to re-use with composable things like packed & base encoders\n// Also, we probably can make tags composable\nexport type Cipher = {\n  encrypt(plaintext: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array): Uint8Array;\n};\n\nexport type AsyncCipher = {\n  encrypt(plaintext: Uint8Array): Promise<Uint8Array>;\n  decrypt(ciphertext: Uint8Array): Promise<Uint8Array>;\n};\n\nexport type CipherWithOutput = Cipher & {\n  encrypt(plaintext: Uint8Array, output?: Uint8Array): Uint8Array;\n  decrypt(ciphertext: Uint8Array, output?: Uint8Array): Uint8Array;\n};\n\n// Params is outside return type, so it is accessible before calling constructor\n// If function support multiple nonceLength's, we return best one\nexport type CipherParams = { blockSize: number; nonceLength?: number; tagLength?: number };\nexport type CipherCons<T extends any[]> = (key: Uint8Array, ...args: T) => Cipher;\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport const wrapCipher = <C extends CipherCons<any>, P extends CipherParams>(\n  params: P,\n  c: C\n): C & P => {\n  Object.assign(c, params);\n  return c as C & P;\n};\n\nexport type XorStream = (\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  output?: Uint8Array,\n  counter?: number\n) => Uint8Array;\n\n// Polyfill for Safari 14\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\nexport function u64Lengths(ciphertext: Uint8Array, AAD?: Uint8Array) {\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\n  setBigUint64(view, 8, BigInt(ciphertext.length), true);\n  return num;\n}\n\n// Is byte array aligned to 4 byte offset (u32)?\nexport function isAligned32(bytes: Uint8Array) {\n  return bytes.byteOffset % 4 === 0;\n}\n\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nexport function copyBytes(bytes: Uint8Array) {\n  return Uint8Array.from(bytes);\n}\n\nexport function clean(...arrays: TypedArray[]) {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n","// Basic utils for ARX (add-rotate-xor) salsa and chacha ciphers.\nimport { bool as abool, bytes as abytes, number as anumber } from './_assert.js';\nimport { XorStream, checkOpts, clean, copyBytes, u32 } from './utils.js';\n\n/*\nRFC8439 requires multi-step cipher stream, where\nauthKey starts with counter: 0, actual msg with counter: 1.\n\nFor this, we need a way to re-use nonce / counter:\n\n    const counter = new Uint8Array(4);\n    chacha(..., counter, ...); // counter is now 1\n    chacha(..., counter, ...); // counter is now 2\n\nThis is complicated:\n\n- 32-bit counters are enough, no need for 64-bit: max ArrayBuffer size in JS is 4GB\n- Original papers don't allow mutating counters\n- Counter overflow is undefined [^1]\n- Idea A: allow providing (nonce | counter) instead of just nonce, re-use it\n- Caveat: Cannot be re-used through all cases:\n- * chacha has (counter | nonce)\n- * xchacha has (nonce16 | counter | nonce16)\n- Idea B: separate nonce / counter and provide separate API for counter re-use\n- Caveat: there are different counter sizes depending on an algorithm.\n- salsa & chacha also differ in structures of key & sigma:\n  salsa20:      s[0] | k(4) | s[1] | nonce(2) | ctr(2) | s[2] | k(4) | s[3]\n  chacha:       s(4) | k(8) | ctr(1) | nonce(3)\n  chacha20orig: s(4) | k(8) | ctr(2) | nonce(2)\n- Idea C: helper method such as `setSalsaState(key, nonce, sigma, data)`\n- Caveat: we can't re-use counter array\n\nxchacha [^2] uses the subkey and remaining 8 byte nonce with ChaCha20 as normal\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\n\n[^1]: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\n[^2]: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\n*/\n\n// We can't make top-level var depend on utils.utf8ToBytes\n// because it's not present in all envs. Creating a similar fn here\nconst _utf8ToBytes = (str: string) => Uint8Array.from(str.split('').map((c) => c.charCodeAt(0)));\nconst sigma16 = _utf8ToBytes('expand 16-byte k');\nconst sigma32 = _utf8ToBytes('expand 32-byte k');\nconst sigma16_32 = u32(sigma16);\nconst sigma32_32 = u32(sigma32);\nexport const sigma = sigma32_32.slice();\n\nexport function rotl(a: number, b: number): number {\n  return (a << b) | (a >>> (32 - b));\n}\n\nexport type CipherCoreFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  output: Uint32Array,\n  counter: number,\n  rounds?: number\n) => void;\n\nexport type ExtendNonceFn = (\n  sigma: Uint32Array,\n  key: Uint32Array,\n  input: Uint32Array,\n  output: Uint32Array\n) => void;\n\nexport type CipherOpts = {\n  allowShortKeys?: boolean; // Original salsa / chacha allow 16-byte keys\n  extendNonceFn?: ExtendNonceFn;\n  counterLength?: number;\n  counterRight?: boolean; // right: nonce|counter; left: counter|nonce\n  rounds?: number;\n};\n\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(b: Uint8Array) {\n  return b.byteOffset % 4 === 0;\n}\n\n// Salsa and Chacha block length is always 512-bit\nconst BLOCK_LEN = 64;\nconst BLOCK_LEN32 = 16;\n\n// new Uint32Array([2**32])   // => Uint32Array(1) [ 0 ]\n// new Uint32Array([2**32-1]) // => Uint32Array(1) [ 4294967295 ]\nconst MAX_COUNTER = 2 ** 32 - 1;\n\nconst U32_EMPTY = new Uint32Array();\nfunction runCipher(\n  core: CipherCoreFn,\n  sigma: Uint32Array,\n  key: Uint32Array,\n  nonce: Uint32Array,\n  data: Uint8Array,\n  output: Uint8Array,\n  counter: number,\n  rounds: number\n): void {\n  const len = data.length;\n  const block = new Uint8Array(BLOCK_LEN);\n  const b32 = u32(block);\n  // Make sure that buffers aligned to 4 bytes\n  const isAligned = isAligned32(data) && isAligned32(output);\n  const d32 = isAligned ? u32(data) : U32_EMPTY;\n  const o32 = isAligned ? u32(output) : U32_EMPTY;\n  for (let pos = 0; pos < len; counter++) {\n    core(sigma, key, nonce, b32, counter, rounds);\n    if (counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    const take = Math.min(BLOCK_LEN, len - pos);\n    // aligned to 4 bytes\n    if (isAligned && take === BLOCK_LEN) {\n      const pos32 = pos / 4;\n      if (pos % 4 !== 0) throw new Error('arx: invalid block position');\n      for (let j = 0, posj: number; j < BLOCK_LEN32; j++) {\n        posj = pos32 + j;\n        o32[posj] = d32[posj] ^ b32[j];\n      }\n      pos += BLOCK_LEN;\n      continue;\n    }\n    for (let j = 0, posj; j < take; j++) {\n      posj = pos + j;\n      output[posj] = data[posj] ^ block[j];\n    }\n    pos += take;\n  }\n}\n\nexport function createCipher(core: CipherCoreFn, opts: CipherOpts): XorStream {\n  const { allowShortKeys, extendNonceFn, counterLength, counterRight, rounds } = checkOpts(\n    { allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 },\n    opts\n  );\n  if (typeof core !== 'function') throw new Error('core must be a function');\n  anumber(counterLength);\n  anumber(rounds);\n  abool(counterRight);\n  abool(allowShortKeys);\n  return (\n    key: Uint8Array,\n    nonce: Uint8Array,\n    data: Uint8Array,\n    output?: Uint8Array,\n    counter = 0\n  ): Uint8Array => {\n    abytes(key);\n    abytes(nonce);\n    abytes(data);\n    const len = data.length;\n    if (output === undefined) output = new Uint8Array(len);\n    abytes(output);\n    anumber(counter);\n    if (counter < 0 || counter >= MAX_COUNTER) throw new Error('arx: counter overflow');\n    if (output.length < len)\n      throw new Error(`arx: output (${output.length}) is shorter than data (${len})`);\n    const toClean = [];\n\n    // Key & sigma\n    // key=16 -> sigma16, k=key|key\n    // key=32 -> sigma32, k=key\n    let l = key.length,\n      k: Uint8Array,\n      sigma: Uint32Array;\n    if (l === 32) {\n      toClean.push((k = copyBytes(key)));\n      sigma = sigma32_32;\n    } else if (l === 16 && allowShortKeys) {\n      k = new Uint8Array(32);\n      k.set(key);\n      k.set(key, 16);\n      sigma = sigma16_32;\n      toClean.push(k);\n    } else {\n      throw new Error(`arx: invalid 32-byte key, got length=${l}`);\n    }\n\n    // Nonce\n    // salsa20:      8   (8-byte counter)\n    // chacha20orig: 8   (8-byte counter)\n    // chacha20:     12  (4-byte counter)\n    // xsalsa20:     24  (16 -> hsalsa,  8 -> old nonce)\n    // xchacha20:    24  (16 -> hchacha, 8 -> old nonce)\n    // Align nonce to 4 bytes\n    if (!isAligned32(nonce)) toClean.push((nonce = copyBytes(nonce)));\n\n    const k32 = u32(k);\n    // hsalsa & hchacha: handle extended nonce\n    if (extendNonceFn) {\n      if (nonce.length !== 24) throw new Error(`arx: extended nonce must be 24 bytes`);\n      extendNonceFn(sigma, k32, u32(nonce.subarray(0, 16)), k32);\n      nonce = nonce.subarray(16);\n    }\n\n    // Handle nonce counter\n    const nonceNcLen = 16 - counterLength;\n    if (nonceNcLen !== nonce.length)\n      throw new Error(`arx: nonce must be ${nonceNcLen} or 16 bytes`);\n\n    // Pad counter when nonce is 64 bit\n    if (nonceNcLen !== 12) {\n      const nc = new Uint8Array(12);\n      nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\n      nonce = nc;\n      toClean.push(nonce);\n    }\n    const n32 = u32(nonce);\n    runCipher(core, sigma, k32, n32, data, output, counter, rounds);\n    clean(...toClean);\n    return output;\n  };\n}\n","import { bytes as abytes, exists as aexists, output as aoutput } from './_assert.js';\nimport { Hash, Input, clean, toBytes } from './utils.js';\n\n// Poly1305 is a fast and parallel secret-key message-authentication code.\n// https://cr.yp.to/mac.html, https://cr.yp.to/mac/poly1305-20050329.pdf\n// https://datatracker.ietf.org/doc/html/rfc8439\n\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\nconst u8to16 = (a: Uint8Array, i: number) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\nclass Poly1305 implements Hash<Poly1305> {\n  readonly blockLen = 16;\n  readonly outputLen = 16;\n  private buffer = new Uint8Array(16);\n  private r = new Uint16Array(10);\n  private h = new Uint16Array(10);\n  private pad = new Uint16Array(8);\n  private pos = 0;\n  protected finished = false;\n\n  constructor(key: Input) {\n    key = toBytes(key);\n    abytes(key, 32);\n    const t0 = u8to16(key, 0);\n    const t1 = u8to16(key, 2);\n    const t2 = u8to16(key, 4);\n    const t3 = u8to16(key, 6);\n    const t4 = u8to16(key, 8);\n    const t5 = u8to16(key, 10);\n    const t6 = u8to16(key, 12);\n    const t7 = u8to16(key, 14);\n\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\n    this.r[0] = t0 & 0x1fff;\n    this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\n    this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\n    this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\n    this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\n    this.r[5] = (t4 >>> 1) & 0x1ffe;\n    this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\n    this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\n    this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\n    this.r[9] = (t7 >>> 5) & 0x007f;\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\n  }\n\n  private process(data: Uint8Array, offset: number, isLast = false) {\n    const hibit = isLast ? 0 : 1 << 11;\n    const { h, r } = this;\n    const r0 = r[0];\n    const r1 = r[1];\n    const r2 = r[2];\n    const r3 = r[3];\n    const r4 = r[4];\n    const r5 = r[5];\n    const r6 = r[6];\n    const r7 = r[7];\n    const r8 = r[8];\n    const r9 = r[9];\n\n    const t0 = u8to16(data, offset + 0);\n    const t1 = u8to16(data, offset + 2);\n    const t2 = u8to16(data, offset + 4);\n    const t3 = u8to16(data, offset + 6);\n    const t4 = u8to16(data, offset + 8);\n    const t5 = u8to16(data, offset + 10);\n    const t6 = u8to16(data, offset + 12);\n    const t7 = u8to16(data, offset + 14);\n\n    let h0 = h[0] + (t0 & 0x1fff);\n    let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\n    let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\n    let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\n    let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\n    let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\n    let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\n    let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\n    let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\n    let h9 = h[9] + ((t7 >>> 5) | hibit);\n\n    let c = 0;\n\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\n    c = d0 >>> 13;\n    d0 &= 0x1fff;\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\n    c += d0 >>> 13;\n    d0 &= 0x1fff;\n\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\n    c = d1 >>> 13;\n    d1 &= 0x1fff;\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\n    c += d1 >>> 13;\n    d1 &= 0x1fff;\n\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\n    c = d2 >>> 13;\n    d2 &= 0x1fff;\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\n    c += d2 >>> 13;\n    d2 &= 0x1fff;\n\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\n    c = d3 >>> 13;\n    d3 &= 0x1fff;\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\n    c += d3 >>> 13;\n    d3 &= 0x1fff;\n\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\n    c = d4 >>> 13;\n    d4 &= 0x1fff;\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\n    c += d4 >>> 13;\n    d4 &= 0x1fff;\n\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\n    c = d5 >>> 13;\n    d5 &= 0x1fff;\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\n    c += d5 >>> 13;\n    d5 &= 0x1fff;\n\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\n    c = d6 >>> 13;\n    d6 &= 0x1fff;\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\n    c += d6 >>> 13;\n    d6 &= 0x1fff;\n\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\n    c = d7 >>> 13;\n    d7 &= 0x1fff;\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\n    c += d7 >>> 13;\n    d7 &= 0x1fff;\n\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\n    c = d8 >>> 13;\n    d8 &= 0x1fff;\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\n    c += d8 >>> 13;\n    d8 &= 0x1fff;\n\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\n    c = d9 >>> 13;\n    d9 &= 0x1fff;\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\n    c += d9 >>> 13;\n    d9 &= 0x1fff;\n\n    c = ((c << 2) + c) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = c >>> 13;\n    d1 += c;\n\n    h[0] = d0;\n    h[1] = d1;\n    h[2] = d2;\n    h[3] = d3;\n    h[4] = d4;\n    h[5] = d5;\n    h[6] = d6;\n    h[7] = d7;\n    h[8] = d8;\n    h[9] = d9;\n  }\n\n  private finalize() {\n    const { h, pad } = this;\n    const g = new Uint16Array(10);\n    let c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    for (let i = 2; i < 10; i++) {\n      h[i] += c;\n      c = h[i] >>> 13;\n      h[i] &= 0x1fff;\n    }\n    h[0] += c * 5;\n    c = h[0] >>> 13;\n    h[0] &= 0x1fff;\n    h[1] += c;\n    c = h[1] >>> 13;\n    h[1] &= 0x1fff;\n    h[2] += c;\n\n    g[0] = h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n    for (let i = 1; i < 10; i++) {\n      g[i] = h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n    g[9] -= 1 << 13;\n\n    let mask = (c ^ 1) - 1;\n    for (let i = 0; i < 10; i++) g[i] &= mask;\n    mask = ~mask;\n    for (let i = 0; i < 10; i++) h[i] = (h[i] & mask) | g[i];\n    h[0] = (h[0] | (h[1] << 13)) & 0xffff;\n    h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\n    h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\n    h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\n    h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\n    h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\n    h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\n    h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\n\n    let f = h[0] + pad[0];\n    h[0] = f & 0xffff;\n    for (let i = 1; i < 8; i++) {\n      f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\n      h[i] = f & 0xffff;\n    }\n    clean(g);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input\n      if (take === blockLen) {\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(buffer, 0, false);\n        this.pos = 0;\n      }\n    }\n    return this;\n  }\n  destroy() {\n    clean(this.h, this.r, this.buffer, this.pad);\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    const { buffer, h } = this;\n    let { pos } = this;\n    if (pos) {\n      buffer[pos++] = 1;\n      for (; pos < 16; pos++) buffer[pos] = 0;\n      this.process(buffer, 0, true);\n    }\n    this.finalize();\n    let opos = 0;\n    for (let i = 0; i < 8; i++) {\n      out[opos++] = h[i] >>> 0;\n      out[opos++] = h[i] >>> 8;\n    }\n    return out;\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n}\n\nexport type CHash = ReturnType<typeof wrapConstructorWithKey>;\nexport function wrapConstructorWithKey<H extends Hash<H>>(hashCons: (key: Input) => Hash<H>) {\n  const hashC = (msg: Input, key: Input): Uint8Array => hashCons(key).update(toBytes(msg)).digest();\n  const tmp = hashCons(new Uint8Array(32));\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (key: Input) => hashCons(key);\n  return hashC;\n}\n\nexport const poly1305 = wrapConstructorWithKey((key) => new Poly1305(key));\n","// prettier-ignore\nimport { createCipher, rotl } from './_arx.js';\nimport { bytes as abytes } from './_assert.js';\nimport { poly1305 } from './_poly1305.js';\nimport {\n  CipherWithOutput,\n  XorStream,\n  clean,\n  createView,\n  equalBytes,\n  setBigUint64,\n  wrapCipher,\n} from './utils.js';\n\n// ChaCha20 stream cipher was released in 2008. ChaCha aims to increase\n// the diffusion per round, but had slightly less cryptanalysis.\n// https://cr.yp.to/chacha.html, http://cr.yp.to/chacha/chacha-20080128.pdf\n\n/**\n * ChaCha core function.\n */\n// prettier-ignore\nfunction chachaCore(\n  s: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\n): void {\n  let y00 = s[0], y01 = s[1], y02 = s[2], y03 = s[3], // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\n    y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3],   // Key      Key     Key     Key\n    y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7],   // Key      Key     Key     Key\n    y12 = cnt, y13 = n[0], y14 = n[1], y15 = n[2];    // Counter  Counter\tNonce   Nonce\n  // Save state to temporary variables\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n    x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n    x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n    x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  for (let r = 0; r < rounds; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  // Write output\n  let oi = 0;\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n/**\n * hchacha helper method, used primarily in xchacha, to hash\n * key and nonce into key' and nonce'.\n * Same as chachaCore, but there doesn't seem to be a way to move the block\n * out without 25% performance hit.\n */\n// prettier-ignore\nexport function hchacha(\n  s: Uint32Array, k: Uint32Array, i: Uint32Array, o32: Uint32Array\n) {\n  let x00 = s[0], x01 = s[1], x02 = s[2], x03 = s[3],\n    x04 = k[0], x05 = k[1], x06 = k[2], x07 = k[3],\n    x08 = k[4], x09 = k[5], x10 = k[6], x11 = k[7],\n    x12 = i[0], x13 = i[1], x14 = i[2], x15 = i[3];\n  for (let r = 0; r < 20; r += 2) {\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\n\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\n\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\n\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\n\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\n\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\n\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\n\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\n  }\n  let oi = 0;\n  o32[oi++] = x00; o32[oi++] = x01;\n  o32[oi++] = x02; o32[oi++] = x03;\n  o32[oi++] = x12; o32[oi++] = x13;\n  o32[oi++] = x14; o32[oi++] = x15;\n}\n/**\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\n */\nexport const chacha20orig = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  allowShortKeys: true,\n});\n/**\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  allowShortKeys: false,\n});\n\n/**\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n */\nexport const xchacha20 = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 8,\n  extendNonceFn: hchacha,\n  allowShortKeys: false,\n});\n\n/**\n * Reduced 8-round chacha, described in original paper.\n */\nexport const chacha8 = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 8,\n});\n\n/**\n * Reduced 12-round chacha, described in original paper.\n */\nexport const chacha12 = /* @__PURE__ */ createCipher(chachaCore, {\n  counterRight: false,\n  counterLength: 4,\n  rounds: 12,\n});\n\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\n// Pad to digest size with zeros\nconst updatePadded = (h: ReturnType<typeof poly1305.create>, msg: Uint8Array) => {\n  h.update(msg);\n  const left = msg.length % 16;\n  if (left) h.update(ZEROS16.subarray(left));\n};\n\nconst ZEROS32 = /* @__PURE__ */ new Uint8Array(32);\nfunction computeTag(\n  fn: XorStream,\n  key: Uint8Array,\n  nonce: Uint8Array,\n  data: Uint8Array,\n  AAD?: Uint8Array\n): Uint8Array {\n  const authKey = fn(key, nonce, ZEROS32);\n  const h = poly1305.create(authKey);\n  if (AAD) updatePadded(h, AAD);\n  updatePadded(h, data);\n  const num = new Uint8Array(16);\n  const view = createView(num);\n  setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\n  setBigUint64(view, 8, BigInt(data.length), true);\n  h.update(num);\n  const res = h.digest();\n  clean(authKey, num);\n  return res;\n}\n\n/**\n * AEAD algorithm from RFC 8439.\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\n * We could have composed them similar to:\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\n * But it's hard because of authKey:\n * In salsa20, authKey changes position in salsa stream.\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\n */\nexport const _poly1305_aead =\n  (xorStream: XorStream) =>\n  (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): CipherWithOutput => {\n    const tagLength = 16;\n    abytes(key, 32);\n    abytes(nonce);\n    return {\n      encrypt(plaintext: Uint8Array, output?: Uint8Array) {\n        const plength = plaintext.length;\n        const clength = plength + tagLength;\n        if (output) {\n          abytes(output, clength);\n        } else {\n          output = new Uint8Array(clength);\n        }\n        xorStream(key, nonce, plaintext, output, 1);\n        const tag = computeTag(xorStream, key, nonce, output.subarray(0, -tagLength), AAD);\n        output.set(tag, plength); // append tag\n        clean(tag);\n        return output;\n      },\n      decrypt(ciphertext: Uint8Array, output?: Uint8Array) {\n        const clength = ciphertext.length;\n        const plength = clength - tagLength;\n        if (clength < tagLength)\n          throw new Error(`encrypted data must be at least ${tagLength} bytes`);\n        if (output) {\n          abytes(output, plength);\n        } else {\n          output = new Uint8Array(plength);\n        }\n        const data = ciphertext.subarray(0, -tagLength);\n        const passedTag = ciphertext.subarray(-tagLength);\n        const tag = computeTag(xorStream, key, nonce, data, AAD);\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\n        xorStream(key, nonce, data, output, 1);\n        clean(tag);\n        return output;\n      },\n    };\n  };\n\n/**\n * ChaCha20-Poly1305 from RFC 8439.\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\n */\nexport const chacha20poly1305 = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 12, tagLength: 16 },\n  _poly1305_aead(chacha20)\n);\n/**\n * XChaCha20-Poly1305 extended-nonce chacha.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\n */\nexport const xchacha20poly1305 = /* @__PURE__ */ wrapCipher(\n  { blockSize: 64, nonceLength: 24, tagLength: 16 },\n  _poly1305_aead(xchacha20)\n);\n","/**\n * Assertion helpers\n * @module\n */\n\nfunction anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n// copied from utils\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\nexport type Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction ahash(h: Hash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\nfunction aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, abytes, ahash, aexists, aoutput };\n","// We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n// Falls back to Node.js built-in crypto for Node.js <=v14\n// See utils.ts for details.\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto: any =\n  nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? (nc.webcrypto as any)\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n      ? nc\n      : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray): Uint8Array =>\n  new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray): Uint32Array =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray): DataView =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport const rotr = (word: number, shift: number): number =>\n  (word << (32 - shift)) | (word >>> shift);\n/** The rotate left (circular left shift) operation for uint32 */\nexport const rotl = (word: number, shift: number): number =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport const byteSwap = (word: number): number =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n/** Conditionally byte swap if on a big-endian platform */\nexport const byteSwapIfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): void {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async (): Promise<void> => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\nexport type CHashO = ReturnType<typeof wrapConstructorWithOpts>;\nexport type CHashXO = ReturnType<typeof wrapXOFConstructorWithOpts>;\n\nexport function wrapConstructor<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Merkle-Damgard hash utils.\n * @module\n */\n\n/**\n * Polyfill for Safari 14\n */\nexport function setBigUint64(\n  view: DataView,\n  byteOffset: number,\n  value: bigint,\n  isLE: boolean\n): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number): number => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number): number => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest(): Uint8Array {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n =/* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order: bigint): <T>(f: IField<T>, x: T) => T {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>): (x: T) => boolean {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport {\n  aInRange,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(u: bigint, scalar: bigint): bigint {\n    aInRange('u', u, _0n, P);\n    aInRange('scalar', scalar, _0n, P);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = scalar;\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen) {\n      let valid = '' + montgomeryBytes + ' or ' + fieldLen;\n      throw new Error('invalid scalar, expected ' + valid + ' bytes, got ' + len);\n    }\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n","/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { AffinePoint, Group } from './abstract/curve.js';\nimport { CurveFn, ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport {\n  createHasher,\n  expand_message_xmd,\n  htfBasicOpts,\n  HTFMethod,\n} from './abstract/hash-to-curve.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { CurveFn as XCurveFn, montgomery } from './abstract/montgomery.js';\nimport { pippenger } from './abstract/curve.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = /* @__PURE__ */ BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _5n = BigInt(5), _8n = BigInt(8);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  // prettier-ignore\n  const _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP: string[] = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = /* @__PURE__ */ (() => Field(ED25519_P, undefined, true))();\n\nconst ed25519Defaults = /* @__PURE__ */ (() =>\n  ({\n    // Param: a\n    a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n    // d is equal to -121665/121666 over finite field.\n    // Negative number is P - number, and division is invert(number, P)\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n    Fp,\n    // Subgroup order: how many points curve has\n    // 2n**252n + 27742317777372353535851937790883648493n;\n    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n    // Cofactor\n    h: _8n,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n    hash: sha512,\n    randomBytes,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio,\n  }) as const)();\n\n/**\n * ed25519 curve with EdDSA signatures.\n * @example\n * import { ed25519 } from '@noble/curves/ed25519';\n * const priv = ed25519.utils.randomPrivateKey();\n * const pub = ed25519.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = ed25519.sign(msg, priv);\n * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n */\nexport const ed25519: CurveFn = /* @__PURE__ */ (() => twistedEdwards(ed25519Defaults))();\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards({\n    ...ed25519Defaults,\n    domain: ed25519_domain,\n  }))();\nexport const ed25519ph: CurveFn = /* @__PURE__ */ (() =>\n  twistedEdwards(\n    Object.assign({}, ed25519Defaults, {\n      domain: ed25519_domain,\n      prehash: sha512,\n    })\n  ))();\n\n/**\n * ECDH using curve25519 aka x25519.\n * @example\n * import { x25519 } from '@noble/curves/ed25519';\n * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n * x25519.getPublicKey(x25519.utils.randomPrivateKey());\n */\nexport const x25519: XCurveFn = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, _3n, P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery: typeof edwardsToMontgomeryPub = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = /* @__PURE__ */ (() => (Fp.ORDER + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = /* @__PURE__ */ (() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\nconst ELL2_C3 = /* @__PURE__ */ (() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  const ELL2_C4 = (Fp.ORDER - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n  const ELL2_J = BigInt(486662);\n\n  let tv1 = Fp.sqr(u);          //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);     //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);         //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J);//  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);        //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);            //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);            //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1);    //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);            //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2);    //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);             //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1);    //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = /* @__PURE__ */ (() => FpSqrtEven(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = /* @__PURE__ */ BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = /* @__PURE__ */ BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = /* @__PURE__ */ BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = /* @__PURE__ */ BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = /* @__PURE__ */ BigInt(\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n);\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>): RistPoint {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  static msm(points: RistPoint[], scalars: bigint[]): RistPoint {\n    const Fn = Field(ed25519.CURVE.n, ed25519.CURVE.nBitLength);\n    return pippenger(RistPoint, Fn, points, scalars);\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint: typeof RistPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts): RistPoint => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255: (msg: Uint8Array, options: htfBasicOpts) => RistPoint =\n  hashToRistretto255; // legacy\n","import { ahash, abytes, aexists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import { ahash, anumber } from './_assert.js';\nimport { CHash, Input, toBytes } from './utils.js';\nimport { hmac } from './hmac.js';\n\n/**\n * HKDF (RFC 5869): extract + expand in one step.\n * See https://soatok.blog/2021/11/17/understanding-hkdf/.\n * @module\n */\n\n/**\n * HKDF-extract from spec. Less important part. `HKDF-Extract(IKM, salt) -> PRK`\n * Arguments position differs from spec (IKM is first one, since it is not optional)\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n */\nexport function extract(hash: CHash, ikm: Input, salt?: Input): Uint8Array {\n  ahash(hash);\n  // NOTE: some libraries treat zero-length array as 'not provided';\n  // we don't, since we have undefined as 'not provided'\n  // https://github.com/RustCrypto/KDFs/issues/15\n  if (salt === undefined) salt = new Uint8Array(hash.outputLen);\n  return hmac(hash, toBytes(salt), toBytes(ikm));\n}\n\nconst HKDF_COUNTER = /* @__PURE__ */ new Uint8Array([0]);\nconst EMPTY_BUFFER = /* @__PURE__ */ new Uint8Array();\n\n/**\n * HKDF-expand from the spec. The most important part. `HKDF-Expand(PRK, info, L) -> OKM`\n * @param hash - hash function that would be used (e.g. sha256)\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n */\nexport function expand(hash: CHash, prk: Input, info?: Input, length: number = 32): Uint8Array {\n  ahash(hash);\n  anumber(length);\n  if (length > 255 * hash.outputLen) throw new Error('Length should be <= 255*HashLen');\n  const blocks = Math.ceil(length / hash.outputLen);\n  if (info === undefined) info = EMPTY_BUFFER;\n  // first L(ength) octets of T\n  const okm = new Uint8Array(blocks * hash.outputLen);\n  // Re-use HMAC instance between blocks\n  const HMAC = hmac.create(hash, prk);\n  const HMACTmp = HMAC._cloneInto();\n  const T = new Uint8Array(HMAC.outputLen);\n  for (let counter = 0; counter < blocks; counter++) {\n    HKDF_COUNTER[0] = counter + 1;\n    // T(0) = empty string (zero length)\n    // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\n    HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\n      .update(info)\n      .update(HKDF_COUNTER)\n      .digestInto(T);\n    okm.set(T, hash.outputLen * counter);\n    HMAC._cloneInto(HMACTmp);\n  }\n  HMAC.destroy();\n  HMACTmp.destroy();\n  T.fill(0);\n  HKDF_COUNTER.fill(0);\n  return okm.slice(0, length);\n}\n\n/**\n * HKDF (RFC 5869): derive keys from an initial input.\n * Combines hkdf_extract + hkdf_expand in one step\n * @param hash - hash function that would be used (e.g. sha256)\n * @param ikm - input keying material, the initial key\n * @param salt - optional salt value (a non-secret random value)\n * @param info - optional context and application specific information (can be a zero-length string)\n * @param length - length of output keying material in bytes\n * @example\n * import { hkdf } from '@noble/hashes/hkdf';\n * import { sha256 } from '@noble/hashes/sha2';\n * import { randomBytes } from '@noble/hashes/utils';\n * const inputKey = randomBytes(32);\n * const salt = randomBytes(32);\n * const info = 'application-key';\n * const hk1 = hkdf(sha256, inputKey, salt, info, 32);\n */\nexport const hkdf = (\n  hash: CHash,\n  ikm: Input,\n  salt: Input | undefined,\n  info: Input | undefined,\n  length: number\n): Uint8Array => expand(hash, extract(hash, ikm, salt), info, length);\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor, CHash } from './utils.js';\n\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  protected A: number = SHA256_IV[0] | 0;\n  protected B: number = SHA256_IV[1] | 0;\n  protected C: number = SHA256_IV[2] | 0;\n  protected D: number = SHA256_IV[3] | 0;\n  protected E: number = SHA256_IV[4] | 0;\n  protected F: number = SHA256_IV[5] | 0;\n  protected G: number = SHA256_IV[6] | 0;\n  protected H: number = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ): void {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean(): void {\n    SHA256_W.fill(0);\n  }\n  destroy(): void {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */\nclass SHA224 extends SHA256 {\n  protected A = 0xc1059ed8 | 0;\n  protected B = 0x367cd507 | 0;\n  protected C = 0x3070dd17 | 0;\n  protected D = 0xf70e5939 | 0;\n  protected E = 0xffc00b31 | 0;\n  protected F = 0x68581511 | 0;\n  protected G = 0x64f98fa7 | 0;\n  protected H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/** SHA2-256 hash function */\nexport const sha256: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/** SHA2-224 hash function */\nexport const sha224: CHash = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { chacha20poly1305 } from '@noble/ciphers/chacha'\nimport { x25519 } from '@noble/curves/ed25519'\nimport { extract, expand } from '@noble/hashes/hkdf'\nimport { sha256 } from '@noble/hashes/sha256'\nimport type { ICryptoInterface } from '../crypto.js'\nimport type { KeyPair } from '../types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport const pureJsCrypto: ICryptoInterface = {\n  hashSHA256 (data: Uint8Array | Uint8ArrayList): Uint8Array {\n    return sha256(data.subarray())\n  },\n\n  getHKDF (ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array] {\n    const prk = extract(sha256, ikm, ck)\n    const okmU8Array = expand(sha256, prk, undefined, 96)\n    const okm = okmU8Array\n\n    const k1 = okm.subarray(0, 32)\n    const k2 = okm.subarray(32, 64)\n    const k3 = okm.subarray(64, 96)\n\n    return [k1, k2, k3]\n  },\n\n  generateX25519KeyPair (): KeyPair {\n    const secretKey = x25519.utils.randomPrivateKey()\n    const publicKey = x25519.getPublicKey(secretKey)\n\n    return {\n      publicKey,\n      privateKey: secretKey\n    }\n  },\n\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const publicKey = x25519.getPublicKey(seed)\n\n    return {\n      publicKey,\n      privateKey: seed\n    }\n  },\n\n  generateX25519SharedKey (privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array {\n    return x25519.getSharedSecret(privateKey.subarray(), publicKey.subarray())\n  },\n\n  chaCha20Poly1305Encrypt (plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).encrypt(plaintext.subarray())\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8Array {\n    return chacha20poly1305(k, nonce, ad).decrypt(ciphertext.subarray(), dst)\n  }\n}\n","import type { ICrypto, KeyPair } from './types.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/** Underlying crypto implementation, meant to be overridable */\nexport interface ICryptoInterface {\n  hashSHA256(data: Uint8Array | Uint8ArrayList): Uint8Array\n\n  getHKDF(ck: Uint8Array, ikm: Uint8Array): [Uint8Array, Uint8Array, Uint8Array]\n\n  generateX25519KeyPair(): KeyPair\n  generateX25519KeyPairFromSeed(seed: Uint8Array): KeyPair\n  generateX25519SharedKey(privateKey: Uint8Array | Uint8ArrayList, publicKey: Uint8Array | Uint8ArrayList): Uint8Array\n\n  chaCha20Poly1305Encrypt(plaintext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array): Uint8ArrayList | Uint8Array\n  chaCha20Poly1305Decrypt(ciphertext: Uint8Array | Uint8ArrayList, nonce: Uint8Array, ad: Uint8Array, k: Uint8Array, dst?: Uint8Array): Uint8ArrayList | Uint8Array\n}\n\nexport function wrapCrypto (crypto: ICryptoInterface): ICrypto {\n  return {\n    generateKeypair: crypto.generateX25519KeyPair,\n    dh: (keypair, publicKey) => crypto.generateX25519SharedKey(keypair.privateKey, publicKey).subarray(0, 32),\n    encrypt: crypto.chaCha20Poly1305Encrypt,\n    decrypt: crypto.chaCha20Poly1305Decrypt,\n    hash: crypto.hashSHA256,\n    hkdf: crypto.getHKDF\n  }\n}\n","import { type Uint8ArrayList } from 'uint8arraylist'\nimport { allocUnsafe as uint8ArrayAllocUnsafe } from 'uint8arrays/alloc'\nimport type { LengthDecoderFunction } from 'it-length-prefixed'\n\nexport const uint16BEEncode = (value: number): Uint8Array => {\n  const target = uint8ArrayAllocUnsafe(2)\n  target[0] = value >> 8\n  target[1] = value\n  return target\n}\nuint16BEEncode.bytes = 2\n\nexport const uint16BEDecode: LengthDecoderFunction = (data: Uint8Array | Uint8ArrayList): number => {\n  if (data.length < 2) throw RangeError('Could not decode int16BE')\n\n  if (data instanceof Uint8Array) {\n    let value = 0\n    value += data[0] << 8\n    value += data[1]\n    return value\n  }\n\n  return data.getUint16(0)\n}\nuint16BEDecode.bytes = 2\n","import type { Counter, Metrics } from '@libp2p/interface'\n\nexport type MetricsRegistry = Record<string, Counter>\n\nexport function registerMetrics (metrics: Metrics): MetricsRegistry {\n  return {\n    xxHandshakeSuccesses: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_successes_total', {\n        help: 'Total count of noise xxHandshakes successes_'\n      }),\n\n    xxHandshakeErrors: metrics.registerCounter(\n      'libp2p_noise_xxhandshake_error_total', {\n        help: 'Total count of noise xxHandshakes errors'\n      }),\n\n    encryptedPackets: metrics.registerCounter(\n      'libp2p_noise_encrypted_packets_total', {\n        help: 'Total count of noise encrypted packets successfully'\n      }),\n\n    decryptedPackets: metrics.registerCounter(\n      'libp2p_noise_decrypted_packets_total', {\n        help: 'Total count of noise decrypted packets'\n      }),\n\n    decryptErrors: metrics.registerCounter(\n      'libp2p_noise_decrypt_errors_total', {\n        help: 'Total count of noise decrypt errors'\n      })\n  }\n}\n","import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { DUMP_SESSION_KEYS } from './constants.js'\nimport type { CipherState } from './protocol.js'\nimport type { KeyPair } from './types.js'\nimport type { Logger } from '@libp2p/interface'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport function logLocalStaticKeys (s: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (s) {\n    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local static keys.')\n  }\n}\n\nexport function logLocalEphemeralKeys (e: KeyPair | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (e) {\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`)\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`)\n  } else {\n    keyLogger('Missing local ephemeral keys.')\n  }\n}\n\nexport function logRemoteStaticKey (rs: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (rs) {\n    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote static public key.')\n  }\n}\n\nexport function logRemoteEphemeralKey (re: Uint8Array | Uint8ArrayList | undefined, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  if (re) {\n    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re.subarray(), 'hex')}`)\n  } else {\n    keyLogger('Missing remote ephemeral keys.')\n  }\n}\n\nexport function logCipherState (cs1: CipherState, cs2: CipherState, keyLogger: Logger): void {\n  if (!keyLogger.enabled || !DUMP_SESSION_KEYS) {\n    return\n  }\n\n  keyLogger(`CIPHER_STATE_1 ${cs1.n.getUint64()} ${cs1.k && uint8ArrayToString(cs1.k, 'hex')}`)\n  keyLogger(`CIPHER_STATE_2 ${cs2.n.getUint64()} ${cs2.k && uint8ArrayToString(cs2.k, 'hex')}`)\n}\n","export class InvalidCryptoExchangeError extends Error {\n  public code: string\n\n  constructor (message = 'Invalid crypto exchange') {\n    super(message)\n    this.code = InvalidCryptoExchangeError.code\n  }\n\n  static readonly code = 'ERR_INVALID_CRYPTO_EXCHANGE'\n}\n","import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\n\nexport const MIN_NONCE = 0\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff\n\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed'\n\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n  private n: number\n  private readonly bytes: Uint8Array\n  private readonly view: DataView\n\n  constructor (n = MIN_NONCE) {\n    this.n = n\n    this.bytes = uint8ArrayAlloc(12)\n    this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength)\n    this.view.setUint32(4, n, true)\n  }\n\n  increment (): void {\n    this.n++\n    // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n    this.view.setUint32(4, this.n, true)\n  }\n\n  getBytes (): Uint8Array {\n    return this.bytes\n  }\n\n  getUint64 (): number {\n    return this.n\n  }\n\n  assertValue (): void {\n    if (this.n > MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE)\n    }\n  }\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport { InvalidCryptoExchangeError } from './errors.js'\nimport { Nonce } from './nonce.js'\nimport type { ICipherState, ISymmetricState, IHandshakeState, KeyPair, ICrypto } from './types.js'\n\n// Code in this file is a direct translation of a subset of the noise protocol https://noiseprotocol.org/noise.html,\n// agnostic to libp2p's usage of noise\n\nexport const ZEROLEN = uint8ArrayAlloc(0)\n\ninterface ICipherStateWithKey extends ICipherState {\n  k: Uint8Array\n}\n\nexport class CipherState implements ICipherState {\n  public k?: Uint8Array\n  public n: Nonce\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, k: Uint8Array | undefined = undefined, n = 0) {\n    this.crypto = crypto\n    this.k = k\n    this.n = new Nonce(n)\n  }\n\n  public hasKey (): this is ICipherStateWithKey {\n    return Boolean(this.k)\n  }\n\n  public encryptWithAd (ad: Uint8Array, plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return plaintext\n    }\n\n    this.n.assertValue()\n    const e = this.crypto.encrypt(plaintext, this.n.getBytes(), ad, this.k)\n    this.n.increment()\n\n    return e\n  }\n\n  public decryptWithAd (ad: Uint8Array, ciphertext: Uint8Array | Uint8ArrayList, dst?: Uint8Array): Uint8Array | Uint8ArrayList {\n    if (!this.hasKey()) {\n      return ciphertext\n    }\n\n    this.n.assertValue()\n    const plaintext = this.crypto.decrypt(ciphertext, this.n.getBytes(), ad, this.k, dst)\n    this.n.increment()\n\n    return plaintext\n  }\n}\n\nexport class SymmetricState implements ISymmetricState {\n  public cs: CipherState\n  public ck: Uint8Array\n  public h: Uint8Array\n  private readonly crypto: ICrypto\n\n  constructor (crypto: ICrypto, protocolName: string) {\n    this.crypto = crypto\n\n    const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8')\n    this.h = hashProtocolName(crypto, protocolNameBytes)\n\n    this.ck = this.h\n    this.cs = new CipherState(crypto)\n  }\n\n  public mixKey (ikm: Uint8Array): void {\n    const [ck, tempK] = this.crypto.hkdf(this.ck, ikm)\n    this.ck = ck\n    this.cs = new CipherState(this.crypto, tempK)\n  }\n\n  public mixHash (data: Uint8Array | Uint8ArrayList): void {\n    this.h = this.crypto.hash(new Uint8ArrayList(this.h, data))\n  }\n\n  public encryptAndHash (plaintext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const ciphertext = this.cs.encryptWithAd(this.h, plaintext)\n    this.mixHash(ciphertext)\n    return ciphertext\n  }\n\n  public decryptAndHash (ciphertext: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const plaintext = this.cs.decryptWithAd(this.h, ciphertext)\n    this.mixHash(ciphertext)\n    return plaintext\n  }\n\n  public split (): [CipherState, CipherState] {\n    const [tempK1, tempK2] = this.crypto.hkdf(this.ck, ZEROLEN)\n    return [new CipherState(this.crypto, tempK1), new CipherState(this.crypto, tempK2)]\n  }\n}\n\n// const MESSAGE_PATTERNS = ['e', 's', 'ee', 'es', 'se', 'ss'] as const\n// type MessagePattern = Array<typeof MESSAGE_PATTERNS[number]>\n\nexport interface HandshakeStateInit {\n  crypto: ICrypto\n  protocolName: string\n  initiator: boolean\n  prologue: Uint8Array\n  s?: KeyPair\n  e?: KeyPair\n  rs?: Uint8Array | Uint8ArrayList\n  re?: Uint8Array | Uint8ArrayList\n}\n\nexport abstract class AbstractHandshakeState implements IHandshakeState {\n  public ss: SymmetricState\n  public s?: KeyPair\n  public e?: KeyPair\n  public rs?: Uint8Array | Uint8ArrayList\n  public re?: Uint8Array | Uint8ArrayList\n  public initiator: boolean\n  protected readonly crypto: ICrypto\n\n  constructor (init: HandshakeStateInit) {\n    const { crypto, protocolName, prologue, initiator, s, e, rs, re } = init\n    this.crypto = crypto\n    this.ss = new SymmetricState(crypto, protocolName)\n    this.ss.mixHash(prologue)\n    this.initiator = initiator\n    this.s = s\n    this.e = e\n    this.rs = rs\n    this.re = re\n  }\n\n  protected writeE (): Uint8Array {\n    if (this.e) {\n      throw new Error('ephemeral keypair is already set')\n    }\n    const e = this.crypto.generateKeypair()\n    this.ss.mixHash(e.publicKey)\n    this.e = e\n    return e.publicKey\n  }\n\n  protected writeS (): Uint8Array | Uint8ArrayList {\n    if (!this.s) {\n      throw new Error('static keypair is not set')\n    }\n    return this.ss.encryptAndHash(this.s.publicKey)\n  }\n\n  protected writeEE (): void {\n    if (!this.e) {\n      throw new Error('ephemeral keypair is not set')\n    }\n    if (!this.re) {\n      throw new Error('remote ephemeral public key is not set')\n    }\n    this.ss.mixKey(this.crypto.dh(this.e, this.re))\n  }\n\n  protected writeES (): void {\n    if (this.initiator) {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    } else {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    }\n  }\n\n  protected writeSE (): void {\n    if (this.initiator) {\n      if (!this.s) {\n        throw new Error('static keypair is not set')\n      }\n      if (!this.re) {\n        throw new Error('remote ephemeral public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.s, this.re))\n    } else {\n      if (!this.e) {\n        throw new Error('ephemeral keypair is not set')\n      }\n      if (!this.rs) {\n        throw new Error('remote static public key is not set')\n      }\n      this.ss.mixKey(this.crypto.dh(this.e, this.rs))\n    }\n  }\n\n  protected readE (message: Uint8ArrayList, offset = 0): void {\n    if (this.re) {\n      throw new Error('remote ephemeral public key is already set')\n    }\n    if (message.byteLength < offset + 32) {\n      throw new Error('message is not long enough')\n    }\n    this.re = message.sublist(offset, offset + 32)\n    this.ss.mixHash(this.re)\n  }\n\n  protected readS (message: Uint8ArrayList, offset = 0): number {\n    if (this.rs) {\n      throw new Error('remote static public key is already set')\n    }\n    const cipherLength = 32 + (this.ss.cs.hasKey() ? 16 : 0)\n    if (message.byteLength < offset + cipherLength) {\n      throw new Error('message is not long enough')\n    }\n    const temp = message.sublist(offset, offset + cipherLength)\n    this.rs = this.ss.decryptAndHash(temp)\n    return cipherLength\n  }\n\n  protected readEE (): void {\n    this.writeEE()\n  }\n\n  protected readES (): void {\n    this.writeES()\n  }\n\n  protected readSE (): void {\n    this.writeSE()\n  }\n}\n\n/**\n * A IHandshakeState that's optimized for the XX pattern\n */\nexport class XXHandshakeState extends AbstractHandshakeState {\n  // e\n  writeMessageA (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    return new Uint8ArrayList(this.writeE(), this.ss.encryptAndHash(payload))\n  }\n\n  // e, ee, s, es\n  writeMessageB (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const e = this.writeE()\n    this.writeEE()\n    const encS = this.writeS()\n    this.writeES()\n\n    return new Uint8ArrayList(e, encS, this.ss.encryptAndHash(payload))\n  }\n\n  // s, se\n  writeMessageC (payload: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    const encS = this.writeS()\n    this.writeSE()\n\n    return new Uint8ArrayList(encS, this.ss.encryptAndHash(payload))\n  }\n\n  // e\n  readMessageA (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n\n      return this.ss.decryptAndHash(message.sublist(32))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 0 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // e, ee, s, es\n  readMessageB (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      this.readE(message)\n      this.readEE()\n      const consumed = this.readS(message, 32)\n      this.readES()\n\n      return this.ss.decryptAndHash(message.sublist(32 + consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 1 validation fail: ${(e as Error).message}`)\n    }\n  }\n\n  // s, se\n  readMessageC (message: Uint8ArrayList): Uint8Array | Uint8ArrayList {\n    try {\n      const consumed = this.readS(message)\n      this.readSE()\n\n      return this.ss.decryptAndHash(message.sublist(consumed))\n    } catch (e) {\n      throw new InvalidCryptoExchangeError(`handshake stage 2 validation fail: ${(e as Error).message}`)\n    }\n  }\n}\n\nfunction hashProtocolName (crypto: ICrypto, protocolName: Uint8Array): Uint8Array {\n  if (protocolName.length <= 32) {\n    const h = uint8ArrayAlloc(32)\n    h.set(protocolName)\n    return h\n  } else {\n    return crypto.hash(protocolName)\n  }\n}\n","import { publicKeyFromProtobuf, publicKeyToProtobuf } from '@libp2p/crypto/keys'\nimport { UnexpectedPeerError, type PrivateKey, type PublicKey } from '@libp2p/interface'\nimport { type Uint8ArrayList } from 'uint8arraylist'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { type NoiseExtensions, NoiseHandshakePayload } from './proto/payload.js'\n\nexport async function createHandshakePayload (\n  privateKey: PrivateKey,\n  staticPublicKey: Uint8Array | Uint8ArrayList,\n  extensions?: NoiseExtensions\n): Promise<Uint8Array | Uint8ArrayList> {\n  const identitySig = await privateKey.sign(getSignaturePayload(staticPublicKey))\n\n  return NoiseHandshakePayload.encode({\n    identityKey: publicKeyToProtobuf(privateKey.publicKey),\n    identitySig,\n    extensions\n  })\n}\n\nexport async function decodeHandshakePayload (\n  payloadBytes: Uint8Array | Uint8ArrayList,\n  remoteStaticKey?: Uint8Array | Uint8ArrayList,\n  remoteIdentityKey?: PublicKey\n): Promise<NoiseHandshakePayload> {\n  try {\n    const payload = NoiseHandshakePayload.decode(payloadBytes)\n    const publicKey = publicKeyFromProtobuf(payload.identityKey)\n\n    if (remoteIdentityKey?.equals(publicKey) === false) {\n      throw new Error(`Payload identity key ${publicKey} does not match expected remote identity key ${remoteIdentityKey}`)\n    }\n\n    if (!remoteStaticKey) {\n      throw new Error('Remote static does not exist')\n    }\n\n    const signaturePayload = getSignaturePayload(remoteStaticKey)\n\n    if (!(await publicKey.verify(signaturePayload, payload.identitySig))) {\n      throw new Error('Invalid payload signature')\n    }\n\n    return payload\n  } catch (e) {\n    throw new UnexpectedPeerError((e as Error).message)\n  }\n}\n\nexport function getSignaturePayload (publicKey: Uint8Array | Uint8ArrayList): Uint8Array | Uint8ArrayList {\n  const prefix = uint8ArrayFromString('noise-libp2p-static-key:')\n\n  if (publicKey instanceof Uint8Array) {\n    return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length)\n  }\n\n  publicKey.prepend(prefix)\n\n  return publicKey\n}\n","const f32 = new Float32Array([-0])\nconst f8b = new Uint8Array(f32.buffer)\n\n/**\n * Writes a 32 bit float to a buffer using little endian byte order\n */\nexport function writeFloatLE (val: number, buf: Uint8Array, pos: number): void {\n  f32[0] = val\n  buf[pos] = f8b[0]\n  buf[pos + 1] = f8b[1]\n  buf[pos + 2] = f8b[2]\n  buf[pos + 3] = f8b[3]\n}\n\n/**\n * Writes a 32 bit float to a buffer using big endian byte order\n */\nexport function writeFloatBE (val: number, buf: Uint8Array, pos: number): void {\n  f32[0] = val\n  buf[pos] = f8b[3]\n  buf[pos + 1] = f8b[2]\n  buf[pos + 2] = f8b[1]\n  buf[pos + 3] = f8b[0]\n}\n\n/**\n * Reads a 32 bit float from a buffer using little endian byte order\n */\nexport function readFloatLE (buf: Uint8Array, pos: number): number {\n  f8b[0] = buf[pos]\n  f8b[1] = buf[pos + 1]\n  f8b[2] = buf[pos + 2]\n  f8b[3] = buf[pos + 3]\n  return f32[0]\n}\n\n/**\n * Reads a 32 bit float from a buffer using big endian byte order\n */\nexport function readFloatBE (buf: Uint8Array, pos: number): number {\n  f8b[3] = buf[pos]\n  f8b[2] = buf[pos + 1]\n  f8b[1] = buf[pos + 2]\n  f8b[0] = buf[pos + 3]\n  return f32[0]\n}\n\nconst f64 = new Float64Array([-0])\nconst d8b = new Uint8Array(f64.buffer)\n\n/**\n * Writes a 64 bit double to a buffer using little endian byte order\n */\nexport function writeDoubleLE (val: number, buf: Uint8Array, pos: number): void {\n  f64[0] = val\n  buf[pos] = d8b[0]\n  buf[pos + 1] = d8b[1]\n  buf[pos + 2] = d8b[2]\n  buf[pos + 3] = d8b[3]\n  buf[pos + 4] = d8b[4]\n  buf[pos + 5] = d8b[5]\n  buf[pos + 6] = d8b[6]\n  buf[pos + 7] = d8b[7]\n}\n\n/**\n * Writes a 64 bit double to a buffer using big endian byte order\n */\nexport function writeDoubleBE (val: number, buf: Uint8Array, pos: number): void {\n  f64[0] = val\n  buf[pos] = d8b[7]\n  buf[pos + 1] = d8b[6]\n  buf[pos + 2] = d8b[5]\n  buf[pos + 3] = d8b[4]\n  buf[pos + 4] = d8b[3]\n  buf[pos + 5] = d8b[2]\n  buf[pos + 6] = d8b[1]\n  buf[pos + 7] = d8b[0]\n}\n\n/**\n * Reads a 64 bit double from a buffer using little endian byte order\n */\nexport function readDoubleLE (buf: Uint8Array, pos: number): number {\n  d8b[0] = buf[pos]\n  d8b[1] = buf[pos + 1]\n  d8b[2] = buf[pos + 2]\n  d8b[3] = buf[pos + 3]\n  d8b[4] = buf[pos + 4]\n  d8b[5] = buf[pos + 5]\n  d8b[6] = buf[pos + 6]\n  d8b[7] = buf[pos + 7]\n  return f64[0]\n}\n\n/**\n * Reads a 64 bit double from a buffer using big endian byte order\n */\nexport function readDoubleBE (buf: Uint8Array, pos: number): number {\n  d8b[7] = buf[pos]\n  d8b[6] = buf[pos + 1]\n  d8b[5] = buf[pos + 2]\n  d8b[4] = buf[pos + 3]\n  d8b[3] = buf[pos + 4]\n  d8b[2] = buf[pos + 5]\n  d8b[1] = buf[pos + 6]\n  d8b[0] = buf[pos + 7]\n  return f64[0]\n}\n","// the largest BigInt we can safely downcast to a Number\nconst MAX_SAFE_NUMBER_INTEGER = BigInt(Number.MAX_SAFE_INTEGER)\nconst MIN_SAFE_NUMBER_INTEGER = BigInt(Number.MIN_SAFE_INTEGER)\n\n/**\n * Constructs new long bits.\n *\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @function Object() { [native code] }\n * @param {number} lo - Low 32 bits, unsigned\n * @param {number} hi - High 32 bits, unsigned\n */\nexport class LongBits {\n  public lo: number\n  public hi: number\n\n  constructor (lo: number, hi: number) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits\n     */\n    this.lo = lo | 0\n\n    /**\n     * High bits\n     */\n    this.hi = hi | 0\n  }\n\n  /**\n   * Converts this long bits to a possibly unsafe JavaScript number\n   */\n  toNumber (unsigned: boolean = false): number {\n    if (!unsigned && (this.hi >>> 31) > 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n      return -(lo + hi * 4294967296)\n    }\n    return this.lo + this.hi * 4294967296\n  }\n\n  /**\n   * Converts this long bits to a bigint\n   */\n  toBigInt (unsigned: boolean = false): bigint {\n    if (unsigned) {\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n    }\n\n    if ((this.hi >>> 31) !== 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n      return -(BigInt(lo) + (BigInt(hi) << 32n))\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n  }\n\n  /**\n   * Converts this long bits to a string\n   */\n  toString (unsigned: boolean = false): string {\n    return this.toBigInt(unsigned).toString()\n  }\n\n  /**\n   * Zig-zag encodes this long bits\n   */\n  zzEncode (): this {\n    const mask = this.hi >> 31\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0\n    this.lo = (this.lo << 1 ^ mask) >>> 0\n    return this\n  }\n\n  /**\n   * Zig-zag decodes this long bits\n   */\n  zzDecode (): this {\n    const mask = -(this.lo & 1)\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0\n    return this\n  }\n\n  /**\n   * Calculates the length of this longbits when encoded as a varint.\n   */\n  length (): number {\n    const part0 = this.lo\n    const part1 = (this.lo >>> 28 | this.hi << 4) >>> 0\n    const part2 = this.hi >>> 24\n    return part2 === 0\n      ? part1 === 0\n        ? part0 < 16384\n          ? part0 < 128 ? 1 : 2\n          : part0 < 2097152 ? 3 : 4\n        : part1 < 16384\n          ? part1 < 128 ? 5 : 6\n          : part1 < 2097152 ? 7 : 8\n      : part2 < 128 ? 9 : 10\n  }\n\n  /**\n   * Constructs new long bits from the specified number\n   */\n  static fromBigInt (value: bigint): LongBits {\n    if (value === 0n) {\n      return zero\n    }\n\n    if (value < MAX_SAFE_NUMBER_INTEGER && value > MIN_SAFE_NUMBER_INTEGER) {\n      return this.fromNumber(Number(value))\n    }\n\n    const negative = value < 0n\n\n    if (negative) {\n      value = -value\n    }\n\n    let hi = value >> 32n\n    let lo = value - (hi << 32n)\n\n    if (negative) {\n      hi = ~hi | 0n\n      lo = ~lo | 0n\n\n      if (++lo > TWO_32) {\n        lo = 0n\n        if (++hi > TWO_32) { hi = 0n }\n      }\n    }\n\n    return new LongBits(Number(lo), Number(hi))\n  }\n\n  /**\n   * Constructs new long bits from the specified number\n   */\n  static fromNumber (value: number): LongBits {\n    if (value === 0) { return zero }\n    const sign = value < 0\n    if (sign) { value = -value }\n    let lo = value >>> 0\n    let hi = (value - lo) / 4294967296 >>> 0\n    if (sign) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n      if (++lo > 4294967295) {\n        lo = 0\n        if (++hi > 4294967295) { hi = 0 }\n      }\n    }\n    return new LongBits(lo, hi)\n  }\n\n  /**\n   * Constructs new long bits from a number, long or string\n   */\n  static from (value: bigint | number | string | { low: number, high: number }): LongBits {\n    if (typeof value === 'number') {\n      return LongBits.fromNumber(value)\n    }\n    if (typeof value === 'bigint') {\n      return LongBits.fromBigInt(value)\n    }\n    if (typeof value === 'string') {\n      return LongBits.fromBigInt(BigInt(value))\n    }\n    return value.low != null || value.high != null ? new LongBits(value.low >>> 0, value.high >>> 0) : zero\n  }\n}\n\nconst zero = new LongBits(0, 0)\nzero.toBigInt = function () { return 0n }\nzero.zzEncode = zero.zzDecode = function () { return this }\nzero.length = function () { return 1 }\n\nconst TWO_32 = 4294967296n\n","/**\n * Calculates the UTF8 byte length of a string\n */\nexport function length (string: string): number {\n  let len = 0\n  let c = 0\n  for (let i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i)\n\n    if (c < 128) {\n      len += 1\n    } else if (c < 2048) {\n      len += 2\n    } else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i\n      len += 4\n    } else {\n      len += 3\n    }\n  }\n\n  return len\n}\n\n/**\n * Reads UTF8 bytes as a string\n */\nexport function read (buffer: Uint8Array, start: number, end: number): string {\n  const len = end - start\n\n  if (len < 1) {\n    return ''\n  }\n\n  let parts: string[] | undefined\n  const chunk: number[] = []\n  let i = 0 // char offset\n  let t: number // temporary\n\n  while (start < end) {\n    t = buffer[start++]\n\n    if (t < 128) {\n      chunk[i++] = t\n    } else if (t > 191 && t < 224) {\n      chunk[i++] = (t & 31) << 6 | buffer[start++] & 63\n    } else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000\n      chunk[i++] = 0xD800 + (t >> 10)\n      chunk[i++] = 0xDC00 + (t & 1023)\n    } else {\n      chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63\n    }\n\n    if (i > 8191) {\n      (parts ?? (parts = [])).push(String.fromCharCode.apply(String, chunk))\n      i = 0\n    }\n  }\n\n  if (parts != null) {\n    if (i > 0) {\n      parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)))\n    }\n\n    return parts.join('')\n  }\n\n  return String.fromCharCode.apply(String, chunk.slice(0, i))\n}\n\n/**\n * Writes a string as UTF8 bytes\n */\nexport function write (string: string, buffer: Uint8Array, offset: number): number {\n  const start = offset\n  let c1 // character 1\n  let c2 // character 2\n\n  for (let i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i)\n\n    if (c1 < 128) {\n      buffer[offset++] = c1\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192\n      buffer[offset++] = c1 & 63 | 128\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF)\n      ++i\n      buffer[offset++] = c1 >> 18 | 240\n      buffer[offset++] = c1 >> 12 & 63 | 128\n      buffer[offset++] = c1 >> 6 & 63 | 128\n      buffer[offset++] = c1 & 63 | 128\n    } else {\n      buffer[offset++] = c1 >> 12 | 224\n      buffer[offset++] = c1 >> 6 & 63 | 128\n      buffer[offset++] = c1 & 63 | 128\n    }\n  }\n\n  return offset - start\n}\n","import { decodeUint8Array, encodingLength } from 'uint8-varint'\nimport { readFloatLE, readDoubleLE } from './float.js'\nimport { LongBits } from './longbits.js'\nimport * as utf8 from './utf8.js'\nimport type { Reader } from '../index.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\n/* istanbul ignore next */\nfunction indexOutOfRange (reader: Reader, writeLength?: number): RangeError {\n  return RangeError(`index out of range: ${reader.pos} + ${writeLength ?? 1} > ${reader.len}`)\n}\n\nfunction readFixed32End (buf: Uint8Array, end: number): number { // note that this uses `end`, not `pos`\n  return (buf[end - 4] |\n        buf[end - 3] << 8 |\n        buf[end - 2] << 16 |\n        buf[end - 1] << 24) >>> 0\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n */\nexport class Uint8ArrayReader implements Reader {\n  public buf: Uint8Array\n  public pos: number\n  public len: number\n\n  public _slice = Uint8Array.prototype.subarray\n\n  constructor (buffer: Uint8Array) {\n    /**\n     * Read buffer\n     */\n    this.buf = buffer\n\n    /**\n     * Read buffer position\n     */\n    this.pos = 0\n\n    /**\n     * Read buffer length\n     */\n    this.len = buffer.length\n  }\n\n  /**\n   * Reads a varint as an unsigned 32 bit value\n   */\n  uint32 (): number {\n    let value = 4294967295\n\n    value = (this.buf[this.pos] & 127) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value\n\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len\n      throw indexOutOfRange(this, 10)\n    }\n\n    return value\n  }\n\n  /**\n   * Reads a varint as a signed 32 bit value\n   */\n  int32 (): number {\n    return this.uint32() | 0\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value\n   */\n  sint32 (): number {\n    const value = this.uint32()\n    return value >>> 1 ^ -(value & 1) | 0\n  }\n\n  /**\n   * Reads a varint as a boolean\n   */\n  bool (): boolean {\n    return this.uint32() !== 0\n  }\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer\n   */\n  fixed32 (): number {\n    if (this.pos + 4 > this.len) { throw indexOutOfRange(this, 4) }\n\n    const res = readFixed32End(this.buf, this.pos += 4)\n\n    return res\n  }\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer\n   */\n  sfixed32 (): number {\n    if (this.pos + 4 > this.len) {\n      throw indexOutOfRange(this, 4)\n    }\n\n    const res = readFixed32End(this.buf, this.pos += 4) | 0\n\n    return res\n  }\n\n  /**\n   * Reads a float (32 bit) as a number\n   */\n  float (): number {\n    if (this.pos + 4 > this.len) {\n      throw indexOutOfRange(this, 4)\n    }\n\n    const value = readFloatLE(this.buf, this.pos)\n    this.pos += 4\n    return value\n  }\n\n  /**\n   * Reads a double (64 bit float) as a number\n   */\n  double (): number {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) { throw indexOutOfRange(this, 4) }\n\n    const value = readDoubleLE(this.buf, this.pos)\n    this.pos += 8\n    return value\n  }\n\n  /**\n   * Reads a sequence of bytes preceded by its length as a varint\n   */\n  bytes (): Uint8Array {\n    const length = this.uint32()\n    const start = this.pos\n    const end = this.pos + length\n\n    /* istanbul ignore if */\n    if (end > this.len) {\n      throw indexOutOfRange(this, length)\n    }\n\n    this.pos += length\n\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n      ? new Uint8Array(0)\n      : this.buf.subarray(start, end)\n  }\n\n  /**\n   * Reads a string preceded by its byte length as a varint\n   */\n  string (): string {\n    const bytes = this.bytes()\n    return utf8.read(bytes, 0, bytes.length)\n  }\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varint\n   */\n  skip (length?: number): this {\n    if (typeof length === 'number') {\n      /* istanbul ignore if */\n      if (this.pos + length > this.len) { throw indexOutOfRange(this, length) }\n      this.pos += length\n    } else {\n      do {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) {\n          throw indexOutOfRange(this)\n        }\n      } while ((this.buf[this.pos++] & 128) !== 0)\n    }\n    return this\n  }\n\n  /**\n   * Skips the next element of the specified wire type\n   */\n  skipType (wireType: number): this {\n    switch (wireType) {\n      case 0:\n        this.skip()\n        break\n      case 1:\n        this.skip(8)\n        break\n      case 2:\n        this.skip(this.uint32())\n        break\n      case 3:\n        while ((wireType = this.uint32() & 7) !== 4) {\n          this.skipType(wireType)\n        }\n        break\n      case 5:\n        this.skip(4)\n        break\n\n        /* istanbul ignore next */\n      default:\n        throw Error(`invalid wire type ${wireType} at offset ${this.pos}`)\n    }\n    return this\n  }\n\n  private readLongVarint (): LongBits {\n    // tends to deopt with local vars for octet etc.\n    const bits = new LongBits(0, 0)\n    let i = 0\n    if (this.len - this.pos > 4) { // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n      // 5th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0\n      if (this.buf[this.pos++] < 128) { return bits }\n      i = 0\n    } else {\n      for (; i < 3; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) { throw indexOutOfRange(this) }\n        // 1st..3th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n      // 4th\n      bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0\n      return bits\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n    } else {\n      for (; i < 5; ++i) {\n        if (this.pos >= this.len) {\n          throw indexOutOfRange(this)\n        }\n\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0\n        if (this.buf[this.pos++] < 128) { return bits }\n      }\n    }\n\n    throw Error('invalid varint encoding')\n  }\n\n  private readFixed64 (): LongBits {\n    if (this.pos + 8 > this.len) {\n      throw indexOutOfRange(this, 8)\n    }\n\n    const lo = readFixed32End(this.buf, this.pos += 4)\n    const hi = readFixed32End(this.buf, this.pos += 4)\n\n    return new LongBits(lo, hi)\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value\n   */\n  int64 (): bigint {\n    return this.readLongVarint().toBigInt()\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value returned as a possibly unsafe\n   * JavaScript number\n   */\n  int64Number (): number {\n    return this.readLongVarint().toNumber()\n  }\n\n  /**\n   * Reads a varint as a signed 64 bit value returned as a string\n   */\n  int64String (): string {\n    return this.readLongVarint().toString()\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value\n   */\n  uint64 (): bigint {\n    return this.readLongVarint().toBigInt(true)\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value returned as a possibly unsafe\n   * JavaScript number\n   */\n  uint64Number (): number {\n    const value = decodeUint8Array(this.buf, this.pos)\n    this.pos += encodingLength(value)\n    return value\n  }\n\n  /**\n   * Reads a varint as an unsigned 64 bit value returned as a string\n   */\n  uint64String (): string {\n    return this.readLongVarint().toString(true)\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value\n   */\n  sint64 (): bigint {\n    return this.readLongVarint().zzDecode().toBigInt()\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n   * possibly unsafe JavaScript number\n   */\n  sint64Number (): number {\n    return this.readLongVarint().zzDecode().toNumber()\n  }\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value returned as a\n   * string\n   */\n  sint64String (): string {\n    return this.readLongVarint().zzDecode().toString()\n  }\n\n  /**\n   * Reads fixed 64 bits\n   */\n  fixed64 (): bigint {\n    return this.readFixed64().toBigInt()\n  }\n\n  /**\n   * Reads fixed 64 bits returned as a possibly unsafe JavaScript number\n   */\n  fixed64Number (): number {\n    return this.readFixed64().toNumber()\n  }\n\n  /**\n   * Reads fixed 64 bits returned as a string\n   */\n  fixed64String (): string {\n    return this.readFixed64().toString()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits\n   */\n  sfixed64 (): bigint {\n    return this.readFixed64().toBigInt()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits returned as a possibly unsafe\n   * JavaScript number\n   */\n  sfixed64Number (): number {\n    return this.readFixed64().toNumber()\n  }\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits returned as a string\n   */\n  sfixed64String (): string {\n    return this.readFixed64().toString()\n  }\n}\n\nexport function createReader (buf: Uint8Array | Uint8ArrayList): Reader {\n  return new Uint8ArrayReader(buf instanceof Uint8Array ? buf : buf.subarray())\n}\n","import { createReader } from './utils/reader.js'\nimport type { Codec, DecodeOptions } from './codec.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport function decodeMessage <T> (buf: Uint8Array | Uint8ArrayList, codec: Pick<Codec<T>, 'decode'>, opts?: DecodeOptions<T>): T {\n  const reader = createReader(buf)\n\n  return codec.decode(reader, undefined, opts)\n}\n","import { allocUnsafe } from 'uint8arrays/alloc'\n\n/**\n * A general purpose buffer pool\n */\nexport default function pool (size?: number): (size: number) => Uint8Array {\n  const SIZE = size ?? 8192\n  const MAX = SIZE >>> 1\n  let slab: Uint8Array\n  let offset = SIZE\n  return function poolAlloc (size: number) {\n    if (size < 1 || size > MAX) {\n      return allocUnsafe(size)\n    }\n\n    if (offset + size > SIZE) {\n      slab = allocUnsafe(SIZE)\n      offset = 0\n    }\n\n    const buf = slab.subarray(offset, offset += size)\n\n    if ((offset & 7) !== 0) {\n      // align to 32 bit\n      offset = (offset | 7) + 1\n    }\n\n    return buf\n  }\n}\n","import { encodeUint8Array, encodingLength } from 'uint8-varint'\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { writeFloatLE, writeDoubleLE } from './float.js'\nimport { LongBits } from './longbits.js'\nimport pool from './pool.js'\nimport * as utf8 from './utf8.js'\nimport type { Writer } from '../index.js'\n\ninterface WriterOperation<T> {\n  (val: T, buf: Uint8Array, pos: number): any\n}\n\n/**\n * Constructs a new writer operation instance.\n *\n * @classdesc Scheduled writer operation\n */\nclass Op<T> {\n  /**\n   * Function to call\n   */\n  public fn: WriterOperation<T>\n\n  /**\n   * Value byte length\n   */\n  public len: number\n\n  /**\n   * Next operation\n   */\n  public next?: Op<any>\n\n  /**\n   * Value to write\n   */\n  public val: T\n\n  constructor (fn: WriterOperation<T>, len: number, val: T) {\n    this.fn = fn\n    this.len = len\n    this.next = undefined\n    this.val = val // type varies\n  }\n}\n\n/* istanbul ignore next */\nfunction noop (): void {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance\n */\nclass State {\n  /**\n   * Current head\n   */\n  public head: Op<any>\n\n  /**\n   * Current tail\n   */\n  public tail: Op<any>\n\n  /**\n   * Current buffer length\n   */\n  public len: number\n\n  /**\n   * Next state\n   */\n  public next?: State\n\n  constructor (writer: Uint8ArrayWriter) {\n    this.head = writer.head\n    this.tail = writer.tail\n    this.len = writer.len\n    this.next = writer.states\n  }\n}\n\nconst bufferPool = pool()\n\n/**\n * Allocates a buffer of the specified size\n */\nfunction alloc (size: number): Uint8Array {\n  if (globalThis.Buffer != null) {\n    return allocUnsafe(size)\n  }\n\n  return bufferPool(size)\n}\n\n/**\n * When a value is written, the writer calculates its byte length and puts it into a linked\n * list of operations to perform when finish() is called. This both allows us to allocate\n * buffers of the exact required size and reduces the amount of work we have to do compared\n * to first calculating over objects and then encoding over objects. In our case, the encoding\n * part is just a linked list walk calling operations with already prepared values.\n */\nclass Uint8ArrayWriter implements Writer {\n  /**\n   * Current length\n   */\n  public len: number\n\n  /**\n   * Operations head\n   */\n  public head: Op<any>\n\n  /**\n   * Operations tail\n   */\n  public tail: Op<any>\n\n  /**\n   * Linked forked states\n   */\n  public states?: any\n\n  constructor () {\n    this.len = 0\n    this.head = new Op(noop, 0, 0)\n    this.tail = this.head\n    this.states = null\n  }\n\n  /**\n   * Pushes a new operation to the queue\n   */\n  _push (fn: WriterOperation<any>, len: number, val: any): this {\n    this.tail = this.tail.next = new Op(fn, len, val)\n    this.len += len\n\n    return this\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as a varint\n   */\n  uint32 (value: number): this {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n      (value = value >>> 0) <\n                128\n        ? 1\n        : value < 16384\n          ? 2\n          : value < 2097152\n            ? 3\n            : value < 268435456\n              ? 4\n              : 5,\n      value)).len\n    return this\n  }\n\n  /**\n   * Writes a signed 32 bit value as a varint`\n   */\n  int32 (value: number): this {\n    return value < 0\n      ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n      : this.uint32(value)\n  }\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded\n   */\n  sint32 (value: number): this {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value)\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64Number (value: number): this {\n    return this._push(encodeUint8Array, encodingLength(value), value)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64String (value: string): this {\n    return this.uint64(BigInt(value))\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64 (value: bigint): this {\n    return this.uint64(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64Number (value: number): this {\n    return this.uint64Number(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64String (value: string): this {\n    return this.uint64String(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value).zzEncode()\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64Number (value: number): this {\n    const bits = LongBits.fromNumber(value).zzEncode()\n    return this._push(writeVarint64, bits.length(), bits)\n  }\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64String (value: string): this {\n    return this.sint64(BigInt(value))\n  }\n\n  /**\n   * Writes a boolish value as a varint\n   */\n  bool (value: boolean): this {\n    return this._push(writeByte, 1, value ? 1 : 0)\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits\n   */\n  fixed32 (value: number): this {\n    return this._push(writeFixed32, 4, value >>> 0)\n  }\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits\n   */\n  sfixed32 (value: number): this {\n    return this.fixed32(value)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64 (value: bigint): this {\n    const bits = LongBits.fromBigInt(value)\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64Number (value: number): this {\n    const bits = LongBits.fromNumber(value)\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi)\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64String (value: string): this {\n    return this.fixed64(BigInt(value))\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64 (value: bigint): this {\n    return this.fixed64(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64Number (value: number): this {\n    return this.fixed64Number(value)\n  }\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64String (value: string): this {\n    return this.fixed64String(value)\n  }\n\n  /**\n   * Writes a float (32 bit)\n   */\n  float (value: number): this {\n    return this._push(writeFloatLE, 4, value)\n  }\n\n  /**\n   * Writes a double (64 bit float).\n   *\n   * @function\n   * @param {number} value - Value to write\n   * @returns {Writer} `this`\n   */\n  double (value: number): this {\n    return this._push(writeDoubleLE, 8, value)\n  }\n\n  /**\n   * Writes a sequence of bytes\n   */\n  bytes (value: Uint8Array): this {\n    const len = value.length >>> 0\n\n    if (len === 0) {\n      return this._push(writeByte, 1, 0)\n    }\n\n    return this.uint32(len)._push(writeBytes, len, value)\n  }\n\n  /**\n   * Writes a string\n   */\n  string (value: string): this {\n    const len = utf8.length(value)\n    return len !== 0\n      ? this.uint32(len)._push(utf8.write, len, value)\n      : this._push(writeByte, 1, 0)\n  }\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   */\n  fork (): this {\n    this.states = new State(this)\n    this.head = this.tail = new Op(noop, 0, 0)\n    this.len = 0\n    return this\n  }\n\n  /**\n   * Resets this instance to the last state\n   */\n  reset (): this {\n    if (this.states != null) {\n      this.head = this.states.head\n      this.tail = this.states.tail\n      this.len = this.states.len\n      this.states = this.states.next\n    } else {\n      this.head = this.tail = new Op(noop, 0, 0)\n      this.len = 0\n    }\n    return this\n  }\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   */\n  ldelim (): this {\n    const head = this.head\n    const tail = this.tail\n    const len = this.len\n    this.reset().uint32(len)\n    if (len !== 0) {\n      this.tail.next = head.next // skip noop\n      this.tail = tail\n      this.len += len\n    }\n    return this\n  }\n\n  /**\n   * Finishes the write operation\n   */\n  finish (): Uint8Array {\n    let head = this.head.next // skip noop\n    const buf = alloc(this.len)\n    let pos = 0\n    while (head != null) {\n      head.fn(head.val, buf, pos)\n      pos += head.len\n      head = head.next\n    }\n    // this.head = this.tail = null;\n    return buf\n  }\n}\n\nfunction writeByte (val: number, buf: Uint8Array, pos: number): void {\n  buf[pos] = val & 255\n}\n\nfunction writeVarint32 (val: number, buf: Uint8Array, pos: number): void {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128\n    val >>>= 7\n  }\n  buf[pos] = val\n}\n\n/**\n * Constructs a new varint writer operation instance.\n *\n * @classdesc Scheduled varint writer operation\n */\nclass VarintOp extends Op<number> {\n  public next?: Op<any>\n\n  constructor (len: number, val: number) {\n    super(writeVarint32, len, val)\n    this.next = undefined\n  }\n}\n\nfunction writeVarint64 (val: LongBits, buf: Uint8Array, pos: number): void {\n  while (val.hi !== 0) {\n    buf[pos++] = val.lo & 127 | 128\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0\n    val.hi >>>= 7\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128\n    val.lo = val.lo >>> 7\n  }\n  buf[pos++] = val.lo\n}\n\nfunction writeFixed32 (val: number, buf: Uint8Array, pos: number): void {\n  buf[pos] = val & 255\n  buf[pos + 1] = val >>> 8 & 255\n  buf[pos + 2] = val >>> 16 & 255\n  buf[pos + 3] = val >>> 24\n}\n\nfunction writeBytes (val: Uint8Array, buf: Uint8Array, pos: number): void {\n  buf.set(val, pos)\n}\n\nif (globalThis.Buffer != null) {\n  Uint8ArrayWriter.prototype.bytes = function (value: Uint8Array) {\n    const len = value.length >>> 0\n\n    this.uint32(len)\n\n    if (len > 0) {\n      this._push(writeBytesBuffer, len, value)\n    }\n\n    return this\n  }\n\n  Uint8ArrayWriter.prototype.string = function (value: string) {\n    const len = globalThis.Buffer.byteLength(value)\n\n    this.uint32(len)\n\n    if (len > 0) {\n      this._push(writeStringBuffer, len, value)\n    }\n\n    return this\n  }\n}\n\nfunction writeBytesBuffer (val: Uint8Array, buf: Uint8Array, pos: number): void {\n  buf.set(val, pos) // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n  // also works for plain array values\n}\n\nfunction writeStringBuffer (val: string, buf: Uint8Array, pos: number): void {\n  if (val.length < 40) {\n    // plain js is faster for short strings (probably due to redundant assertions)\n    utf8.write(val, buf, pos)\n    // @ts-expect-error buf isn't a Uint8Array?\n  } else if (buf.utf8Write != null) {\n    // @ts-expect-error buf isn't a Uint8Array?\n    buf.utf8Write(val, pos)\n  } else {\n    buf.set(uint8ArrayFromString(val), pos)\n  }\n}\n\n/**\n * Creates a new writer\n */\nexport function createWriter (): Writer {\n  return new Uint8ArrayWriter()\n}\n","import { createWriter } from './utils/writer.js'\nimport type { Codec } from './codec.js'\n\nexport function encodeMessage <T> (message: Partial<T>, codec: Pick<Codec<T>, 'encode'>): Uint8Array {\n  const w = createWriter()\n\n  codec.encode(message, w, {\n    lengthDelimited: false\n  })\n\n  return w.finish()\n}\n","import type { Writer, Reader } from './index.js'\n\n// https://developers.google.com/protocol-buffers/docs/encoding#structure\nexport enum CODEC_TYPES {\n  VARINT = 0,\n  BIT64,\n  LENGTH_DELIMITED,\n  START_GROUP,\n  END_GROUP,\n  BIT32\n}\n\nexport interface EncodeOptions {\n  lengthDelimited?: boolean\n  writeDefaults?: boolean\n}\n\nexport interface EncodeFunction<T> {\n  (value: Partial<T>, writer: Writer, opts?: EncodeOptions): void\n}\n\n// protobuf types that contain multiple values\ntype CollectionTypes = any[] | Map<any, any>\n\n// protobuf types that are not collections or messages\ntype PrimitiveTypes = boolean | number | string | bigint | Uint8Array\n\n// recursive array/map field length limits\ntype CollectionLimits <T> = {\n  [K in keyof T]: T[K] extends CollectionTypes ? number :\n    T[K] extends PrimitiveTypes ? never : Limits<T[K]>\n}\n\n// recursive array member array/map field length limits\ntype ArrayElementLimits <T> = {\n  [K in keyof T as `${string & K}$`]: T[K] extends Array<infer ElementType> ?\n      (ElementType extends PrimitiveTypes ? never : Limits<ElementType>) :\n      (T[K] extends PrimitiveTypes ? never : Limits<T[K]>)\n}\n\n// recursive map value array/map field length limits\ntype MapValueLimits <T> = {\n  [K in keyof T as `${string & K}$value`]: T[K] extends Map<any, infer MapValueType> ?\n      (MapValueType extends PrimitiveTypes ? never : Limits<MapValueType>) :\n      (T[K] extends PrimitiveTypes ? never : Limits<T[K]>)\n}\n\n// union of collection and array elements\ntype Limits<T> = Partial<CollectionLimits<T> & ArrayElementLimits<T> & MapValueLimits<T>>\n\nexport interface DecodeOptions<T> {\n  /**\n   * Runtime-specified limits for lengths of repeated/map fields\n   */\n  limits?: Limits<T>\n}\n\nexport interface DecodeFunction<T> {\n  (reader: Reader, length?: number, opts?: DecodeOptions<T>): T\n}\n\nexport interface Codec<T> {\n  name: string\n  type: CODEC_TYPES\n  encode: EncodeFunction<T>\n  decode: DecodeFunction<T>\n}\n\nexport function createCodec <T> (name: string, type: CODEC_TYPES, encode: EncodeFunction<T>, decode: DecodeFunction<T>): Codec<T> {\n  return {\n    name,\n    type,\n    encode,\n    decode\n  }\n}\n","import { createCodec, CODEC_TYPES, type EncodeFunction, type DecodeFunction, type Codec } from '../codec.js'\n\nexport interface Factory<A, T> {\n  new (obj: A): T\n}\n\nexport function message <T> (encode: EncodeFunction<T>, decode: DecodeFunction<T>): Codec<T> {\n  return createCodec('message', CODEC_TYPES.LENGTH_DELIMITED, encode, decode)\n}\n","/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { type Codec, decodeMessage, encodeMessage, message } from 'protons-runtime'\nimport { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface NoiseExtensions {\n  webtransportCerthashes: Uint8Array[]\n}\n\nexport namespace NoiseExtensions {\n  let _codec: Codec<NoiseExtensions>\n\n  export const codec = (): Codec<NoiseExtensions> => {\n    if (_codec == null) {\n      _codec = message<NoiseExtensions>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.webtransportCerthashes != null) {\n          for (const value of obj.webtransportCerthashes) {\n            w.uint32(10)\n            w.bytes(value)\n          }\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {\n          webtransportCerthashes: []\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.webtransportCerthashes.push(reader.bytes())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseExtensions>): Uint8Array => {\n    return encodeMessage(obj, NoiseExtensions.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): NoiseExtensions => {\n    return decodeMessage(buf, NoiseExtensions.codec())\n  }\n}\n\nexport interface NoiseHandshakePayload {\n  identityKey: Uint8Array\n  identitySig: Uint8Array\n  extensions?: NoiseExtensions\n}\n\nexport namespace NoiseHandshakePayload {\n  let _codec: Codec<NoiseHandshakePayload>\n\n  export const codec = (): Codec<NoiseHandshakePayload> => {\n    if (_codec == null) {\n      _codec = message<NoiseHandshakePayload>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.identityKey != null && obj.identityKey.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.identityKey)\n        }\n\n        if ((obj.identitySig != null && obj.identitySig.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.identitySig)\n        }\n\n        if (obj.extensions != null) {\n          w.uint32(34)\n          NoiseExtensions.codec().encode(obj.extensions, w)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {\n          identityKey: uint8ArrayAlloc(0),\n          identitySig: uint8ArrayAlloc(0)\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1: {\n              obj.identityKey = reader.bytes()\n              break\n            }\n            case 2: {\n              obj.identitySig = reader.bytes()\n              break\n            }\n            case 4: {\n              obj.extensions = NoiseExtensions.codec().decode(reader, reader.uint32())\n              break\n            }\n            default: {\n              reader.skipType(tag & 7)\n              break\n            }\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<NoiseHandshakePayload>): Uint8Array => {\n    return encodeMessage(obj, NoiseHandshakePayload.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): NoiseHandshakePayload => {\n    return decodeMessage(buf, NoiseHandshakePayload.codec())\n  }\n}\n","import {\n  logLocalStaticKeys,\n  logLocalEphemeralKeys,\n  logRemoteEphemeralKey,\n  logRemoteStaticKey,\n  logCipherState\n} from './logger.js'\nimport { ZEROLEN, XXHandshakeState } from './protocol.js'\nimport { createHandshakePayload, decodeHandshakePayload } from './utils.js'\nimport type { HandshakeResult, HandshakeParams } from './types.js'\nimport type { AbortOptions } from '@libp2p/interface'\n\nexport async function performHandshakeInitiator (init: HandshakeParams, options?: AbortOptions): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: true,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Initiator starting to send first message.')\n  await connection.write(xx.writeMessageA(ZEROLEN), options)\n  log.trace('Stage 0 - Initiator finished sending first message.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 1 - Initiator waiting to receive first message from responder...')\n  const plaintext = xx.readMessageB(await connection.read(options))\n  log.trace('Stage 1 - Initiator received the message.')\n  logRemoteEphemeralKey(xx.re, log)\n  logRemoteStaticKey(xx.rs, log)\n\n  log.trace(\"Initiator going to check remote's signature...\")\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n  log.trace('All good with the signature!')\n\n  log.trace('Stage 2 - Initiator sending third handshake message.')\n  await connection.write(xx.writeMessageC(payload), options)\n  log.trace('Stage 2 - Initiator sent message with signed payload.')\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs1.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs2.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n\nexport async function performHandshakeResponder (init: HandshakeParams, options?: AbortOptions): Promise<HandshakeResult> {\n  const { log, connection, crypto, privateKey, prologue, s, remoteIdentityKey, extensions } = init\n\n  const payload = await createHandshakePayload(privateKey, s.publicKey, extensions)\n  const xx = new XXHandshakeState({\n    crypto,\n    protocolName: 'Noise_XX_25519_ChaChaPoly_SHA256',\n    initiator: false,\n    prologue,\n    s\n  })\n\n  logLocalStaticKeys(xx.s, log)\n  log.trace('Stage 0 - Responder waiting to receive first message.')\n  xx.readMessageA(await connection.read(options))\n  log.trace('Stage 0 - Responder received first message.')\n  logRemoteEphemeralKey(xx.re, log)\n\n  log.trace('Stage 1 - Responder sending out first message with signed payload and static key.')\n  await connection.write(xx.writeMessageB(payload), options)\n  log.trace('Stage 1 - Responder sent the second handshake message with signed payload.')\n  logLocalEphemeralKeys(xx.e, log)\n\n  log.trace('Stage 2 - Responder waiting for third handshake message...')\n  const plaintext = xx.readMessageC(await connection.read(options))\n  log.trace('Stage 2 - Responder received the message, finished handshake.')\n  const receivedPayload = await decodeHandshakePayload(plaintext, xx.rs, remoteIdentityKey)\n\n  const [cs1, cs2] = xx.ss.split()\n  logCipherState(cs1, cs2, log)\n\n  return {\n    payload: receivedPayload,\n    encrypt: (plaintext) => cs2.encryptWithAd(ZEROLEN, plaintext),\n    decrypt: (ciphertext, dst) => cs1.decryptWithAd(ZEROLEN, ciphertext, dst)\n  }\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from './constants.js'\nimport { uint16BEEncode } from './encoder.js'\nimport type { MetricsRegistry } from './metrics.js'\nimport type { HandshakeResult } from './types.js'\nimport type { Transform } from 'it-stream-types'\n\nconst CHACHA_TAG_LENGTH = 16\n\n// Returns generator that encrypts payload from the user\nexport function encryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        let data: Uint8Array | Uint8ArrayList\n\n        if (chunk instanceof Uint8Array) {\n          data = handshake.encrypt(chunk.subarray(i, end))\n        } else {\n          data = handshake.encrypt(chunk.sublist(i, end))\n        }\n\n        metrics?.encryptedPackets.increment()\n\n        yield new Uint8ArrayList(uint16BEEncode(data.byteLength), data)\n      }\n    }\n  }\n}\n\n// Decrypt received payload to the user\nexport function decryptStream (handshake: HandshakeResult, metrics?: MetricsRegistry): Transform<AsyncGenerator<Uint8ArrayList>, AsyncGenerator<Uint8Array | Uint8ArrayList>> {\n  return async function * (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES\n        if (end > chunk.length) {\n          end = chunk.length\n        }\n\n        if (end - CHACHA_TAG_LENGTH < i) {\n          throw new Error('Invalid chunk')\n        }\n\n        const encrypted = chunk.sublist(i, end)\n        // memory allocation is not cheap so reuse the encrypted Uint8Array\n        // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n        // this is ok because chacha20 reads bytes one by one and don't reread after that\n        // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n        const dst = chunk.subarray(i, end - CHACHA_TAG_LENGTH)\n        try {\n          const plaintext = handshake.decrypt(encrypted, dst)\n          metrics?.decryptedPackets.increment()\n          yield plaintext\n        } catch (e) {\n          metrics?.decryptErrors.increment()\n          throw e\n        }\n      }\n    }\n  }\n}\n","/**\n * @packageDocumentation\n *\n * This repository contains TypeScript implementation of noise protocol, an encryption protocol used in libp2p.\n *\n * ## Usage\n *\n * Install with `yarn add @chainsafe/libp2p-noise` or `npm i @chainsafe/libp2p-noise`.\n *\n * Example of using default noise configuration and passing it to the libp2p config:\n *\n * ```ts\n * import {createLibp2p} from \"libp2p\"\n * import {noise} from \"@chainsafe/libp2p-noise\"\n *\n * //custom noise configuration, pass it instead of `noise()`\n * //x25519 private key\n * const n = noise({ staticNoiseKey });\n *\n * const libp2p = await createLibp2p({\n *   connectionEncrypters: [noise()],\n *   //... other options\n * })\n * ```\n *\n * See the [NoiseInit](https://github.com/ChainSafe/js-libp2p-noise/blob/master/src/noise.ts#L22-L30) interface for noise configuration options.\n *\n * ## API\n *\n * This module exposes an implementation of the [ConnectionEncrypter](https://libp2p.github.io/js-libp2p/interfaces/_libp2p_interface.ConnectionEncrypter.html) interface.\n *\n * ## Bring your own crypto\n *\n * You can provide a custom crypto implementation (instead of the default, based on [@noble](https://paulmillr.com/noble/)) by adding a `crypto` field to the init argument passed to the `Noise` factory.\n *\n * The implementation must conform to the `ICryptoInterface`, defined in <https://github.com/ChainSafe/js-libp2p-noise/blob/master/src/crypto.ts>\n */\n\nimport { Noise } from './noise.js'\nimport type { NoiseInit } from './noise.js'\nimport type { NoiseExtensions } from './proto/payload.js'\nimport type { ComponentLogger, ConnectionEncrypter, Metrics, PeerId, PrivateKey } from '@libp2p/interface'\nexport type { ICryptoInterface } from './crypto.js'\nexport { pureJsCrypto } from './crypto/js.js'\n\nexport interface NoiseComponents {\n  peerId: PeerId\n  privateKey: PrivateKey\n  logger: ComponentLogger\n  metrics?: Metrics\n}\n\nexport function noise (init: NoiseInit = {}): (components: NoiseComponents) => ConnectionEncrypter<NoiseExtensions> {\n  return (components: NoiseComponents) => new Noise(components, init)\n}\n","import { InvalidParametersError, MuxerClosedError, TooManyOutboundProtocolStreamsError, serviceCapabilities, setMaxListeners } from '@libp2p/interface'\nimport { getIterator } from 'get-iterator'\nimport { pushable, type Pushable } from 'it-pushable'\nimport { Uint8ArrayList } from 'uint8arraylist'\nimport { type Config, defaultConfig, verifyConfig } from './config.js'\nimport { PROTOCOL_ERRORS } from './constants.js'\nimport { Decoder } from './decode.js'\nimport { encodeHeader } from './encode.js'\nimport { InvalidFrameError, NotMatchingPingError, UnrequestedPingError } from './errors.js'\nimport { Flag, type FrameHeader, FrameType, GoAwayCode } from './frame.js'\nimport { StreamState, YamuxStream } from './stream.js'\nimport type { YamuxMuxerComponents } from './index.js'\nimport type { AbortOptions, ComponentLogger, Logger, Stream, StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface'\nimport type { Sink, Source } from 'it-stream-types'\n\nconst YAMUX_PROTOCOL_ID = '/yamux/1.0.0'\nconst CLOSE_TIMEOUT = 500\n\nexport interface YamuxMuxerInit extends StreamMuxerInit, Partial<Config> {\n}\n\nexport class Yamux implements StreamMuxerFactory {\n  protocol = YAMUX_PROTOCOL_ID\n  private readonly _components: YamuxMuxerComponents\n  private readonly _init: YamuxMuxerInit\n\n  constructor (components: YamuxMuxerComponents, init: YamuxMuxerInit = {}) {\n    this._components = components\n    this._init = init\n  }\n\n  readonly [Symbol.toStringTag] = '@chainsafe/libp2p-yamux'\n\n  readonly [serviceCapabilities]: string[] = [\n    '@libp2p/stream-multiplexing'\n  ]\n\n  createStreamMuxer (init?: YamuxMuxerInit): YamuxMuxer {\n    return new YamuxMuxer(this._components, {\n      ...this._init,\n      ...init\n    })\n  }\n}\n\nexport interface CloseOptions extends AbortOptions {\n  reason?: GoAwayCode\n}\n\nexport class YamuxMuxer implements StreamMuxer {\n  protocol = YAMUX_PROTOCOL_ID\n  source: Pushable<Uint8ArrayList | Uint8Array>\n  sink: Sink<Source<Uint8ArrayList | Uint8Array>, Promise<void>>\n\n  private readonly config: Config\n  private readonly log?: Logger\n  private readonly logger: ComponentLogger\n\n  /** Used to close the muxer from either the sink or source */\n  private readonly closeController: AbortController\n\n  /** The next stream id to be used when initiating a new stream */\n  private nextStreamID: number\n  /** Primary stream mapping, streamID => stream */\n  private readonly _streams: Map<number, YamuxStream>\n\n  /** The next ping id to be used when pinging */\n  private nextPingID: number\n  /** Tracking info for the currently active ping */\n  private activePing?: { id: number, promise: Promise<void>, resolve(): void }\n  /** Round trip time */\n  private rtt: number\n\n  /** True if client, false if server */\n  private readonly client: boolean\n\n  private localGoAway?: GoAwayCode\n  private remoteGoAway?: GoAwayCode\n\n  /** Number of tracked inbound streams */\n  private numInboundStreams: number\n  /** Number of tracked outbound streams */\n  private numOutboundStreams: number\n\n  private readonly onIncomingStream?: (stream: Stream) => void\n  private readonly onStreamEnd?: (stream: Stream) => void\n\n  constructor (components: YamuxMuxerComponents, init: YamuxMuxerInit) {\n    this.client = init.direction === 'outbound'\n    this.config = { ...defaultConfig, ...init }\n    this.logger = components.logger\n    this.log = this.logger.forComponent('libp2p:yamux')\n    verifyConfig(this.config)\n\n    this.closeController = new AbortController()\n    setMaxListeners(Infinity, this.closeController.signal)\n\n    this.onIncomingStream = init.onIncomingStream\n    this.onStreamEnd = init.onStreamEnd\n\n    this._streams = new Map()\n\n    this.source = pushable({\n      onEnd: (): void => {\n        this.log?.trace('muxer source ended')\n\n        this._streams.forEach(stream => {\n          stream.destroy()\n        })\n      }\n    })\n\n    this.sink = async (source: Source<Uint8ArrayList | Uint8Array>): Promise<void> => {\n      const shutDownListener = (): void => {\n        const iterator = getIterator(source)\n\n        if (iterator.return != null) {\n          const res = iterator.return()\n\n          if (isPromise(res)) {\n            res.catch(err => {\n              this.log?.('could not cause sink source to return', err)\n            })\n          }\n        }\n      }\n\n      let reason, error\n      try {\n        const decoder = new Decoder(source)\n\n        try {\n          this.closeController.signal.addEventListener('abort', shutDownListener)\n\n          for await (const frame of decoder.emitFrames()) {\n            await this.handleFrame(frame.header, frame.readData)\n          }\n        } finally {\n          this.closeController.signal.removeEventListener('abort', shutDownListener)\n        }\n\n        reason = GoAwayCode.NormalTermination\n      } catch (err: any) {\n        // either a protocol or internal error\n        if (PROTOCOL_ERRORS.has(err.name)) {\n          this.log?.error('protocol error in sink', err)\n          reason = GoAwayCode.ProtocolError\n        } else {\n          this.log?.error('internal error in sink', err)\n          reason = GoAwayCode.InternalError\n        }\n\n        error = err as Error\n      }\n\n      this.log?.trace('muxer sink ended')\n\n      if (error != null) {\n        this.abort(error, reason)\n      } else {\n        await this.close({ reason })\n      }\n    }\n\n    this.numInboundStreams = 0\n    this.numOutboundStreams = 0\n\n    // client uses odd streamIDs, server uses even streamIDs\n    this.nextStreamID = this.client ? 1 : 2\n\n    this.nextPingID = 0\n    this.rtt = -1\n\n    this.log?.trace('muxer created')\n\n    if (this.config.enableKeepAlive) {\n      this.keepAliveLoop().catch(e => this.log?.error('keepalive error: %s', e))\n    }\n\n    // send an initial ping to establish RTT\n    this.ping().catch(e => this.log?.error('ping error: %s', e))\n  }\n\n  get streams (): YamuxStream[] {\n    return Array.from(this._streams.values())\n  }\n\n  newStream (name?: string | undefined): YamuxStream {\n    if (this.remoteGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed remotely')\n    }\n    if (this.localGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed locally')\n    }\n\n    const id = this.nextStreamID\n    this.nextStreamID += 2\n\n    // check against our configured maximum number of outbound streams\n    if (this.numOutboundStreams >= this.config.maxOutboundStreams) {\n      throw new TooManyOutboundProtocolStreamsError('max outbound streams exceeded')\n    }\n\n    this.log?.trace('new outgoing stream id=%s', id)\n\n    const stream = this._newStream(id, name, StreamState.Init, 'outbound')\n    this._streams.set(id, stream)\n\n    this.numOutboundStreams++\n\n    // send a window update to open the stream on the receiver end\n    stream.sendWindowUpdate()\n\n    return stream\n  }\n\n  /**\n   * Initiate a ping and wait for a response\n   *\n   * Note: only a single ping will be initiated at a time.\n   * If a ping is already in progress, a new ping will not be initiated.\n   *\n   * @returns the round-trip-time in milliseconds\n   */\n  async ping (): Promise<number> {\n    if (this.remoteGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed remotely')\n    }\n    if (this.localGoAway !== undefined) {\n      throw new MuxerClosedError('Muxer closed locally')\n    }\n\n    // An active ping does not yet exist, handle the process here\n    if (this.activePing === undefined) {\n      // create active ping\n      let _resolve = (): void => {}\n      this.activePing = {\n        id: this.nextPingID++,\n        // this promise awaits resolution or the close controller aborting\n        promise: new Promise<void>((resolve, reject) => {\n          const closed = (): void => {\n            reject(new MuxerClosedError('Muxer closed locally'))\n          }\n          this.closeController.signal.addEventListener('abort', closed, { once: true })\n          _resolve = (): void => {\n            this.closeController.signal.removeEventListener('abort', closed)\n            resolve()\n          }\n        }),\n        resolve: _resolve\n      }\n      // send ping\n      const start = Date.now()\n      this.sendPing(this.activePing.id)\n      // await pong\n      try {\n        await this.activePing.promise\n      } finally {\n        // clean-up active ping\n        delete this.activePing\n      }\n      // update rtt\n      const end = Date.now()\n      this.rtt = end - start\n    } else {\n      // an active ping is already in progress, piggyback off that\n      await this.activePing.promise\n    }\n    return this.rtt\n  }\n\n  /**\n   * Get the ping round trip time\n   *\n   * Note: Will return 0 if no successful ping has yet been completed\n   *\n   * @returns the round-trip-time in milliseconds\n   */\n  getRTT (): number {\n    return this.rtt\n  }\n\n  /**\n   * Close the muxer\n   */\n  async close (options: CloseOptions = {}): Promise<void> {\n    if (this.closeController.signal.aborted) {\n      // already closed\n      return\n    }\n\n    const reason = options?.reason ?? GoAwayCode.NormalTermination\n\n    this.log?.trace('muxer close reason=%s', reason)\n\n    if (options.signal == null) {\n      const signal = AbortSignal.timeout(CLOSE_TIMEOUT)\n      setMaxListeners(Infinity, signal)\n\n      options = {\n        ...options,\n        signal\n      }\n    }\n\n    try {\n      await Promise.all(\n        [...this._streams.values()].map(async s => s.close(options))\n      )\n\n      // send reason to the other side, allow the other side to close gracefully\n      this.sendGoAway(reason)\n\n      this._closeMuxer()\n    } catch (err: any) {\n      this.abort(err)\n    }\n  }\n\n  abort (err: Error, reason?: GoAwayCode): void {\n    if (this.closeController.signal.aborted) {\n      // already closed\n      return\n    }\n\n    reason = reason ?? GoAwayCode.InternalError\n\n    // If reason was provided, use that, otherwise use the presence of `err` to determine the reason\n    this.log?.error('muxer abort reason=%s error=%s', reason, err)\n\n    // Abort all underlying streams\n    for (const stream of this._streams.values()) {\n      stream.abort(err)\n    }\n\n    // send reason to the other side, allow the other side to close gracefully\n    this.sendGoAway(reason)\n\n    this._closeMuxer()\n  }\n\n  isClosed (): boolean {\n    return this.closeController.signal.aborted\n  }\n\n  /**\n   * Called when either the local or remote shuts down the muxer\n   */\n  private _closeMuxer (): void {\n    // stop the sink and any other processes\n    this.closeController.abort()\n\n    // stop the source\n    this.source.end()\n  }\n\n  /** Create a new stream */\n  private _newStream (id: number, name: string | undefined, state: StreamState, direction: 'inbound' | 'outbound'): YamuxStream {\n    if (this._streams.get(id) != null) {\n      throw new InvalidParametersError('Stream already exists with that id')\n    }\n\n    const stream = new YamuxStream({\n      id: id.toString(),\n      name,\n      state,\n      direction,\n      sendFrame: this.sendFrame.bind(this),\n      onEnd: () => {\n        this.closeStream(id)\n        this.onStreamEnd?.(stream)\n      },\n      log: this.logger.forComponent(`libp2p:yamux:${direction}:${id}`),\n      config: this.config,\n      getRTT: this.getRTT.bind(this)\n    })\n\n    return stream\n  }\n\n  /**\n   * closeStream is used to close a stream once both sides have\n   * issued a close.\n   */\n  private closeStream (id: number): void {\n    if (this.client === (id % 2 === 0)) {\n      this.numInboundStreams--\n    } else {\n      this.numOutboundStreams--\n    }\n    this._streams.delete(id)\n  }\n\n  private async keepAliveLoop (): Promise<void> {\n    const abortPromise = new Promise((_resolve, reject) => { this.closeController.signal.addEventListener('abort', reject, { once: true }) })\n    this.log?.trace('muxer keepalive enabled interval=%s', this.config.keepAliveInterval)\n    while (true) {\n      let timeoutId\n      try {\n        await Promise.race([\n          abortPromise,\n          new Promise((resolve) => {\n            timeoutId = setTimeout(resolve, this.config.keepAliveInterval)\n          })\n        ])\n        this.ping().catch(e => this.log?.error('ping error: %s', e))\n      } catch (e) {\n        // closed\n        clearInterval(timeoutId)\n        return\n      }\n    }\n  }\n\n  private async handleFrame (header: FrameHeader, readData?: () => Promise<Uint8ArrayList>): Promise<void> {\n    const {\n      streamID,\n      type,\n      length\n    } = header\n    this.log?.trace('received frame %o', header)\n\n    if (streamID === 0) {\n      switch (type) {\n        case FrameType.Ping:\n        { this.handlePing(header); return }\n        case FrameType.GoAway:\n        { this.handleGoAway(length); return }\n        default:\n          // Invalid state\n          throw new InvalidFrameError('Invalid frame type')\n      }\n    } else {\n      switch (header.type) {\n        case FrameType.Data:\n        case FrameType.WindowUpdate:\n        { await this.handleStreamMessage(header, readData); return }\n        default:\n          // Invalid state\n          throw new InvalidFrameError('Invalid frame type')\n      }\n    }\n  }\n\n  private handlePing (header: FrameHeader): void {\n    // If the ping  is initiated by the sender, send a response\n    if (header.flag === Flag.SYN) {\n      this.log?.trace('received ping request pingId=%s', header.length)\n      this.sendPing(header.length, Flag.ACK)\n    } else if (header.flag === Flag.ACK) {\n      this.log?.trace('received ping response pingId=%s', header.length)\n      this.handlePingResponse(header.length)\n    } else {\n      // Invalid state\n      throw new InvalidFrameError('Invalid frame flag')\n    }\n  }\n\n  private handlePingResponse (pingId: number): void {\n    if (this.activePing === undefined) {\n      // this ping was not requested\n      throw new UnrequestedPingError('ping not requested')\n    }\n    if (this.activePing.id !== pingId) {\n      // this ping doesn't match our active ping request\n      throw new NotMatchingPingError('ping doesn\\'t match our id')\n    }\n\n    // valid ping response\n    this.activePing.resolve()\n  }\n\n  private handleGoAway (reason: GoAwayCode): void {\n    this.log?.trace('received GoAway reason=%s', GoAwayCode[reason] ?? 'unknown')\n    this.remoteGoAway = reason\n\n    // If the other side is friendly, they would have already closed all streams before sending a GoAway\n    // In case they weren't, reset all streams\n    for (const stream of this._streams.values()) {\n      stream.reset()\n    }\n\n    this._closeMuxer()\n  }\n\n  private async handleStreamMessage (header: FrameHeader, readData?: () => Promise<Uint8ArrayList>): Promise<void> {\n    const { streamID, flag, type } = header\n\n    if ((flag & Flag.SYN) === Flag.SYN) {\n      this.incomingStream(streamID)\n    }\n\n    const stream = this._streams.get(streamID)\n    if (stream === undefined) {\n      if (type === FrameType.Data) {\n        this.log?.('discarding data for stream id=%s', streamID)\n        if (readData === undefined) {\n          throw new Error('unreachable')\n        }\n        await readData()\n      } else {\n        this.log?.trace('frame for missing stream id=%s', streamID)\n      }\n      return\n    }\n\n    switch (type) {\n      case FrameType.WindowUpdate: {\n        stream.handleWindowUpdate(header); return\n      }\n      case FrameType.Data: {\n        if (readData === undefined) {\n          throw new Error('unreachable')\n        }\n\n        await stream.handleData(header, readData); return\n      }\n      default:\n        throw new Error('unreachable')\n    }\n  }\n\n  private incomingStream (id: number): void {\n    if (this.client !== (id % 2 === 0)) {\n      throw new InvalidParametersError('Both endpoints are clients')\n    }\n    if (this._streams.has(id)) {\n      return\n    }\n\n    this.log?.trace('new incoming stream id=%s', id)\n\n    if (this.localGoAway !== undefined) {\n      // reject (reset) immediately if we are doing a go away\n      this.sendFrame({\n        type: FrameType.WindowUpdate,\n        flag: Flag.RST,\n        streamID: id,\n        length: 0\n      }); return\n    }\n\n    // check against our configured maximum number of inbound streams\n    if (this.numInboundStreams >= this.config.maxInboundStreams) {\n      this.log?.('maxIncomingStreams exceeded, forcing stream reset')\n      this.sendFrame({\n        type: FrameType.WindowUpdate,\n        flag: Flag.RST,\n        streamID: id,\n        length: 0\n      }); return\n    }\n\n    // allocate a new stream\n    const stream = this._newStream(id, undefined, StreamState.SYNReceived, 'inbound')\n\n    this.numInboundStreams++\n    // the stream should now be tracked\n    this._streams.set(id, stream)\n\n    this.onIncomingStream?.(stream)\n  }\n\n  private sendFrame (header: FrameHeader, data?: Uint8ArrayList): void {\n    this.log?.trace('sending frame %o', header)\n    if (header.type === FrameType.Data) {\n      if (data === undefined) {\n        throw new InvalidFrameError('Invalid frame')\n      }\n      this.source.push(\n        new Uint8ArrayList(encodeHeader(header), data)\n      )\n    } else {\n      this.source.push(encodeHeader(header))\n    }\n  }\n\n  private sendPing (pingId: number, flag: Flag = Flag.SYN): void {\n    if (flag === Flag.SYN) {\n      this.log?.trace('sending ping request pingId=%s', pingId)\n    } else {\n      this.log?.trace('sending ping response pingId=%s', pingId)\n    }\n    this.sendFrame({\n      type: FrameType.Ping,\n      flag,\n      streamID: 0,\n      length: pingId\n    })\n  }\n\n  private sendGoAway (reason: GoAwayCode = GoAwayCode.NormalTermination): void {\n    this.log?.('sending GoAway reason=%s', GoAwayCode[reason])\n    this.localGoAway = reason\n    this.sendFrame({\n      type: FrameType.GoAway,\n      flag: 0,\n      streamID: 0,\n      length: reason\n    })\n  }\n}\n\nfunction isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  return thing != null && typeof thing.then === 'function'\n}\n","\n// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nexport function getIterator <T> (obj: AsyncIterable<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: AsyncIterator<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: Iterable<T>): Iterator<T>\nexport function getIterator <T> (obj: Iterator<T>): Iterator<T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T> {\n  if (obj != null) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n","import { InvalidParametersError } from '@libp2p/interface'\nimport { INITIAL_STREAM_WINDOW, MAX_STREAM_WINDOW } from './constants.js'\n\n// TOOD use config items or delete them\nexport interface Config {\n  /**\n   * Used to do periodic keep alive messages using a ping.\n   */\n  enableKeepAlive: boolean\n\n  /**\n   * How often to perform the keep alive\n   *\n   * measured in milliseconds\n   */\n  keepAliveInterval: number\n\n  /**\n   * Maximum number of concurrent inbound streams that we accept.\n   * If the peer tries to open more streams, those will be reset immediately.\n   */\n  maxInboundStreams: number\n\n  /**\n   * Maximum number of concurrent outbound streams that we accept.\n   * If the application tries to open more streams, the call to `newStream` will throw\n   */\n  maxOutboundStreams: number\n\n  /**\n   * Used to control the initial window size that we allow for a stream.\n   *\n   * measured in bytes\n   */\n  initialStreamWindowSize: number\n\n  /**\n   * Used to control the maximum window size that we allow for a stream.\n   */\n  maxStreamWindowSize: number\n\n  /**\n   * Maximum size of a message that we'll send on a stream.\n   * This ensures that a single stream doesn't hog a connection.\n   */\n  maxMessageSize: number\n}\n\nexport const defaultConfig: Config = {\n  enableKeepAlive: true,\n  keepAliveInterval: 30_000,\n  maxInboundStreams: 1_000,\n  maxOutboundStreams: 1_000,\n  initialStreamWindowSize: INITIAL_STREAM_WINDOW,\n  maxStreamWindowSize: MAX_STREAM_WINDOW,\n  maxMessageSize: 64 * 1024\n}\n\nexport function verifyConfig (config: Config): void {\n  if (config.keepAliveInterval <= 0) {\n    throw new InvalidParametersError('keep-alive interval must be positive')\n  }\n  if (config.maxInboundStreams < 0) {\n    throw new InvalidParametersError('max inbound streams must be larger or equal 0')\n  }\n  if (config.maxOutboundStreams < 0) {\n    throw new InvalidParametersError('max outbound streams must be larger or equal 0')\n  }\n  if (config.initialStreamWindowSize < INITIAL_STREAM_WINDOW) {\n    throw new InvalidParametersError('InitialStreamWindowSize must be larger or equal 256 kB')\n  }\n  if (config.maxStreamWindowSize < config.initialStreamWindowSize) {\n    throw new InvalidParametersError('MaxStreamWindowSize must be larger than the InitialStreamWindowSize')\n  }\n  if (config.maxStreamWindowSize > 2 ** 32 - 1) {\n    throw new InvalidParametersError('MaxStreamWindowSize must be less than equal MAX_UINT32')\n  }\n  if (config.maxMessageSize < 1024) {\n    throw new InvalidParametersError('MaxMessageSize must be greater than a kilobyte')\n  }\n}\n","export class InvalidFrameError extends Error {\n  static name = 'InvalidFrameError'\n\n  constructor (message = 'The frame was invalid') {\n    super(message)\n    this.name = 'InvalidFrameError'\n  }\n}\n\nexport class UnrequestedPingError extends Error {\n  static name = 'UnrequestedPingError'\n\n  constructor (message = 'Unrequested ping error') {\n    super(message)\n    this.name = 'UnrequestedPingError'\n  }\n}\n\nexport class NotMatchingPingError extends Error {\n  static name = 'NotMatchingPingError'\n\n  constructor (message = 'Unrequested ping error') {\n    super(message)\n    this.name = 'NotMatchingPingError'\n  }\n}\n\nexport class InvalidStateError extends Error {\n  static name = 'InvalidStateError'\n\n  constructor (message = 'Invalid state') {\n    super(message)\n    this.name = 'InvalidStateError'\n  }\n}\n\nexport class StreamAlreadyExistsError extends Error {\n  static name = 'StreamAlreadyExistsError'\n\n  constructor (message = 'Strean already exists') {\n    super(message)\n    this.name = 'StreamAlreadyExistsError'\n  }\n}\n\nexport class DecodeInvalidVersionError extends Error {\n  static name = 'DecodeInvalidVersionError'\n\n  constructor (message = 'Decode invalid version') {\n    super(message)\n    this.name = 'DecodeInvalidVersionError'\n  }\n}\n\nexport class BothClientsError extends Error {\n  static name = 'BothClientsError'\n\n  constructor (message = 'Both clients') {\n    super(message)\n    this.name = 'BothClientsError'\n  }\n}\n\nexport class ReceiveWindowExceededError extends Error {\n  static name = 'ReceiveWindowExceededError'\n\n  constructor (message = 'Receive window exceeded') {\n    super(message)\n    this.name = 'ReceiveWindowExceededError'\n  }\n}\n","// Protocol violation errors\n\nimport { BothClientsError, DecodeInvalidVersionError, InvalidFrameError, NotMatchingPingError, ReceiveWindowExceededError, StreamAlreadyExistsError, UnrequestedPingError } from './errors.js'\n\nexport const PROTOCOL_ERRORS = new Set([\n  InvalidFrameError.name,\n  UnrequestedPingError.name,\n  NotMatchingPingError.name,\n  StreamAlreadyExistsError.name,\n  DecodeInvalidVersionError.name,\n  BothClientsError.name,\n  ReceiveWindowExceededError.name\n])\n\n/**\n * INITIAL_STREAM_WINDOW is the initial stream window size.\n *\n * Not an implementation choice, this is defined in the specification\n */\nexport const INITIAL_STREAM_WINDOW = 256 * 1024\n\n/**\n * Default max stream window\n */\nexport const MAX_STREAM_WINDOW = 16 * 1024 * 1024\n","export enum FrameType {\n  /** Used to transmit data. May transmit zero length payloads depending on the flags. */\n  Data = 0x0,\n  /** Used to updated the senders receive window size. This is used to implement per-session flow control. */\n  WindowUpdate = 0x1,\n  /** Used to measure RTT. It can also be used to heart-beat and do keep-alives over TCP. */\n  Ping = 0x2,\n  /** Used to close a session. */\n  GoAway = 0x3,\n}\n\nexport enum Flag {\n  /** Signals the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate outbound. */\n  SYN = 0x1,\n  /** Acknowledges the start of a new stream. May be sent with a data or window update message. Also sent with a ping to indicate response. */\n  ACK = 0x2,\n  /** Performs a half-close of a stream. May be sent with a data message or window update. */\n  FIN = 0x4,\n  /** Reset a stream immediately. May be sent with a data or window update message. */\n  RST = 0x8,\n}\n\nconst flagCodes = Object.values(Flag).filter((x) => typeof x !== 'string') as Flag[]\n\nexport const YAMUX_VERSION = 0\n\nexport enum GoAwayCode {\n  NormalTermination = 0x0,\n  ProtocolError = 0x1,\n  InternalError = 0x2,\n}\n\nexport const HEADER_LENGTH = 12\n\nexport interface FrameHeader {\n  /**\n   * The version field is used for future backward compatibility.\n   * At the current time, the field is always set to 0, to indicate the initial version.\n   */\n  version?: number\n  /** The type field is used to switch the frame message type. */\n  type: FrameType\n  /** The flags field is used to provide additional information related to the message type. */\n  flag: number\n  /**\n   * The StreamID field is used to identify the logical stream the frame is addressing.\n   * The client side should use odd ID's, and the server even.\n   * This prevents any collisions. Additionally, the 0 ID is reserved to represent the session.\n   */\n  streamID: number\n  /**\n   * The meaning of the length field depends on the message type:\n   * * Data - provides the length of bytes following the header\n   * * Window update - provides a delta update to the window size\n   * * Ping - Contains an opaque value, echoed back\n   * * Go Away - Contains an error code\n   */\n  length: number\n}\n\nexport function stringifyHeader (header: FrameHeader): string {\n  const flags = flagCodes.filter(f => (header.flag & f) === f).map(f => Flag[f]).join('|')\n  return `streamID=${header.streamID} type=${FrameType[header.type]} flag=${flags} length=${header.length}`\n}\n","import { Uint8ArrayList } from 'uint8arraylist'\nimport { InvalidFrameError, InvalidStateError } from './errors.js'\nimport { type FrameHeader, FrameType, HEADER_LENGTH, YAMUX_VERSION } from './frame.js'\nimport type { Source } from 'it-stream-types'\n\n// used to bitshift in decoding\n// native bitshift can overflow into a negative number, so we bitshift by multiplying by a power of 2\nconst twoPow24 = 2 ** 24\n\n/**\n * Decode a header from the front of a buffer\n *\n * @param data - Assumed to have enough bytes for a header\n */\nexport function decodeHeader (data: Uint8Array): FrameHeader {\n  if (data[0] !== YAMUX_VERSION) {\n    throw new InvalidFrameError('Invalid frame version')\n  }\n  return {\n    type: data[1],\n    flag: (data[2] << 8) + data[3],\n    streamID: (data[4] * twoPow24) + (data[5] << 16) + (data[6] << 8) + data[7],\n    length: (data[8] * twoPow24) + (data[9] << 16) + (data[10] << 8) + data[11]\n  }\n}\n\n/**\n * Decodes yamux frames from a source\n */\nexport class Decoder {\n  private readonly source: Source<Uint8Array | Uint8ArrayList>\n  /** Buffer for in-progress frames */\n  private readonly buffer: Uint8ArrayList\n  /** Used to sanity check against decoding while in an inconsistent state */\n  private frameInProgress: boolean\n\n  constructor (source: Source<Uint8Array | Uint8ArrayList>) {\n    // Normally, when entering a for-await loop with an iterable/async iterable, the only ways to exit the loop are:\n    // 1. exhaust the iterable\n    // 2. throw an error - slow, undesirable if there's not actually an error\n    // 3. break or return - calls the iterable's `return` method, finalizing the iterable, no more iteration possible\n    //\n    // In this case, we want to enter (and exit) a for-await loop per chunked data frame and continue processing the iterable.\n    // To do this, we strip the `return` method from the iterator and can now `break` early and continue iterating.\n    // Exiting the main for-await is still possible via 1. and 2.\n    this.source = returnlessSource(source)\n    this.buffer = new Uint8ArrayList()\n    this.frameInProgress = false\n  }\n\n  /**\n   * Emits frames from the decoder source.\n   *\n   * Note: If `readData` is emitted, it _must_ be called before the next iteration\n   * Otherwise an error is thrown\n   */\n  async * emitFrames (): AsyncGenerator<{ header: FrameHeader, readData?(): Promise<Uint8ArrayList> }> {\n    for await (const chunk of this.source) {\n      this.buffer.append(chunk)\n\n      // Loop to consume as many bytes from the buffer as possible\n      // Eg: when a single chunk contains several frames\n      while (true) {\n        const header = this.readHeader()\n        if (header === undefined) {\n          break\n        }\n\n        const { type, length } = header\n        if (type === FrameType.Data) {\n          // This is a data frame, the frame body must still be read\n          // `readData` must be called before the next iteration here\n          this.frameInProgress = true\n          yield {\n            header,\n            readData: this.readBytes.bind(this, length)\n          }\n        } else {\n          yield { header }\n        }\n      }\n    }\n  }\n\n  private readHeader (): FrameHeader | undefined {\n    // Sanity check to ensure a header isn't read when another frame is partially decoded\n    // In practice this shouldn't happen\n    if (this.frameInProgress) {\n      throw new InvalidStateError('decoding frame already in progress')\n    }\n\n    if (this.buffer.length < HEADER_LENGTH) {\n      // not enough data yet\n      return\n    }\n\n    const header = decodeHeader(this.buffer.subarray(0, HEADER_LENGTH))\n    this.buffer.consume(HEADER_LENGTH)\n    return header\n  }\n\n  private async readBytes (length: number): Promise<Uint8ArrayList> {\n    if (this.buffer.length < length) {\n      for await (const chunk of this.source) {\n        this.buffer.append(chunk)\n\n        if (this.buffer.length >= length) {\n          // see note above, the iterator is not `return`ed here\n          break\n        }\n      }\n    }\n\n    const out = this.buffer.sublist(0, length)\n    this.buffer.consume(length)\n\n    // The next frame can now be decoded\n    this.frameInProgress = false\n\n    return out\n  }\n}\n\n/**\n * Strip the `return` method from a `Source`\n */\nexport function returnlessSource<T> (source: Source<T>): Source<T> {\n  if ((source as Iterable<T>)[Symbol.iterator] !== undefined) {\n    const iterator = (source as Iterable<T>)[Symbol.iterator]()\n    iterator.return = undefined\n    return {\n      [Symbol.iterator] () { return iterator }\n    }\n  } else if ((source as AsyncIterable<T>)[Symbol.asyncIterator] !== undefined) {\n    const iterator = (source as AsyncIterable<T>)[Symbol.asyncIterator]()\n    iterator.return = undefined\n    return {\n      [Symbol.asyncIterator] () { return iterator }\n    }\n  } else {\n    throw new Error('a source must be either an iterable or an async iterable')\n  }\n}\n","import { HEADER_LENGTH } from './frame.js'\nimport type { FrameHeader } from './frame.js'\n\nexport function encodeHeader (header: FrameHeader): Uint8Array {\n  const frame = new Uint8Array(HEADER_LENGTH)\n\n  // always assume version 0\n  // frameView.setUint8(0, header.version)\n\n  frame[1] = header.type\n\n  frame[2] = header.flag >>> 8\n  frame[3] = header.flag\n\n  frame[4] = header.streamID >>> 24\n  frame[5] = header.streamID >>> 16\n  frame[6] = header.streamID >>> 8\n  frame[7] = header.streamID\n\n  frame[8] = header.length >>> 24\n  frame[9] = header.length >>> 16\n  frame[10] = header.length >>> 8\n  frame[11] = header.length\n\n  return frame\n}\n","import { AbortError } from '@libp2p/interface'\nimport { AbstractStream, type AbstractStreamInit } from '@libp2p/utils/abstract-stream'\nimport each from 'it-foreach'\nimport { INITIAL_STREAM_WINDOW } from './constants.js'\nimport { ReceiveWindowExceededError } from './errors.js'\nimport { Flag, type FrameHeader, FrameType, HEADER_LENGTH } from './frame.js'\nimport type { Config } from './config.js'\nimport type { AbortOptions } from '@libp2p/interface'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport enum StreamState {\n  Init,\n  SYNSent,\n  SYNReceived,\n  Established,\n  Finished,\n}\n\nexport interface YamuxStreamInit extends AbstractStreamInit {\n  name?: string\n  sendFrame(header: FrameHeader, body?: Uint8ArrayList): void\n  getRTT(): number\n  config: Config\n  state: StreamState\n}\n\n/** YamuxStream is used to represent a logical stream within a session */\nexport class YamuxStream extends AbstractStream {\n  name?: string\n  state: StreamState\n\n  private readonly config: Config\n  private readonly _id: number\n\n  /** The number of available bytes to send */\n  private sendWindowCapacity: number\n  /** Callback to notify that the sendWindowCapacity has been updated */\n  private sendWindowCapacityUpdate?: () => void\n\n  /** The number of bytes available to receive in a full window */\n  private recvWindow: number\n  /** The number of available bytes to receive */\n  private recvWindowCapacity: number\n\n  /**\n   * An 'epoch' is the time it takes to process and read data\n   *\n   * Used in conjunction with RTT to determine whether to increase the recvWindow\n   */\n  private epochStart: number\n  private readonly getRTT: () => number\n\n  private readonly sendFrame: (header: FrameHeader, body?: Uint8ArrayList) => void\n\n  constructor (init: YamuxStreamInit) {\n    super({\n      ...init,\n      onEnd: (err?: Error) => {\n        this.state = StreamState.Finished\n        init.onEnd?.(err)\n      }\n    })\n\n    this.config = init.config\n    this._id = parseInt(init.id, 10)\n    this.name = init.name\n    this.state = init.state\n    this.sendWindowCapacity = INITIAL_STREAM_WINDOW\n    this.recvWindow = this.config.initialStreamWindowSize\n    this.recvWindowCapacity = this.recvWindow\n    this.epochStart = Date.now()\n    this.getRTT = init.getRTT\n\n    this.sendFrame = init.sendFrame\n\n    this.source = each(this.source, () => {\n      this.sendWindowUpdate()\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer informing them a new stream is being\n   * opened.\n   *\n   * This is a noop for Yamux because the first window update is sent when\n   * .newStream is called on the muxer which opens the stream on the remote.\n   */\n  async sendNewStream (): Promise<void> {\n\n  }\n\n  /**\n   * Send a data message to the remote muxer\n   */\n  async sendData (buf: Uint8ArrayList, options: AbortOptions = {}): Promise<void> {\n    buf = buf.sublist()\n\n    // send in chunks, waiting for window updates\n    while (buf.byteLength !== 0) {\n      // wait for the send window to refill\n      if (this.sendWindowCapacity === 0) {\n        this.log?.trace('wait for send window capacity, status %s', this.status)\n        await this.waitForSendWindowCapacity(options)\n\n        // check we didn't close while waiting for send window capacity\n        if (this.status === 'closed' || this.status === 'aborted' || this.status === 'reset') {\n          this.log?.trace('%s while waiting for send window capacity', this.status)\n          return\n        }\n      }\n\n      // send as much as we can\n      const toSend = Math.min(this.sendWindowCapacity, this.config.maxMessageSize - HEADER_LENGTH, buf.length)\n      const flags = this.getSendFlags()\n\n      this.sendFrame({\n        type: FrameType.Data,\n        flag: flags,\n        streamID: this._id,\n        length: toSend\n      }, buf.sublist(0, toSend))\n\n      this.sendWindowCapacity -= toSend\n\n      buf.consume(toSend)\n    }\n  }\n\n  /**\n   * Send a reset message to the remote muxer\n   */\n  async sendReset (): Promise<void> {\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: Flag.RST,\n      streamID: this._id,\n      length: 0\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be sent by this end of the stream\n   */\n  async sendCloseWrite (): Promise<void> {\n    const flags = this.getSendFlags() | Flag.FIN\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: flags,\n      streamID: this._id,\n      length: 0\n    })\n  }\n\n  /**\n   * Send a message to the remote muxer, informing them no more data messages\n   * will be read by this end of the stream\n   */\n  async sendCloseRead (): Promise<void> {\n\n  }\n\n  /**\n   * Wait for the send window to be non-zero\n   *\n   * Will throw with ERR_STREAM_ABORT if the stream gets aborted\n   */\n  async waitForSendWindowCapacity (options: AbortOptions = {}): Promise<void> {\n    if (this.sendWindowCapacity > 0) {\n      return\n    }\n\n    let resolve: () => void\n    let reject: (err: Error) => void\n    const abort = (): void => {\n      if (this.status === 'open' || this.status === 'closing') {\n        reject(new AbortError('Stream aborted'))\n      } else {\n        // the stream was closed already, ignore the failure to send\n        resolve()\n      }\n    }\n    options.signal?.addEventListener('abort', abort)\n\n    try {\n      await new Promise<void>((_resolve, _reject) => {\n        this.sendWindowCapacityUpdate = () => {\n          _resolve()\n        }\n        reject = _reject\n        resolve = _resolve\n      })\n    } finally {\n      options.signal?.removeEventListener('abort', abort)\n    }\n  }\n\n  /**\n   * handleWindowUpdate is called when the stream receives a window update frame\n   */\n  handleWindowUpdate (header: FrameHeader): void {\n    this.log?.trace('stream received window update id=%s', this._id)\n    this.processFlags(header.flag)\n\n    // increase send window\n    const available = this.sendWindowCapacity\n    this.sendWindowCapacity += header.length\n    // if the update increments a 0 availability, notify the stream that sending can resume\n    if (available === 0 && header.length > 0) {\n      this.sendWindowCapacityUpdate?.()\n    }\n  }\n\n  /**\n   * handleData is called when the stream receives a data frame\n   */\n  async handleData (header: FrameHeader, readData: () => Promise<Uint8ArrayList>): Promise<void> {\n    this.log?.trace('stream received data id=%s', this._id)\n    this.processFlags(header.flag)\n\n    // check that our recv window is not exceeded\n    if (this.recvWindowCapacity < header.length) {\n      throw new ReceiveWindowExceededError('Receive window exceeded')\n    }\n\n    const data = await readData()\n    this.recvWindowCapacity -= header.length\n\n    this.sourcePush(data)\n  }\n\n  /**\n   * processFlags is used to update the state of the stream based on set flags, if any.\n   */\n  private processFlags (flags: number): void {\n    if ((flags & Flag.ACK) === Flag.ACK) {\n      if (this.state === StreamState.SYNSent) {\n        this.state = StreamState.Established\n      }\n    }\n    if ((flags & Flag.FIN) === Flag.FIN) {\n      this.remoteCloseWrite()\n    }\n    if ((flags & Flag.RST) === Flag.RST) {\n      this.reset()\n    }\n  }\n\n  /**\n   * getSendFlags determines any flags that are appropriate\n   * based on the current stream state.\n   *\n   * The state is updated as a side-effect.\n   */\n  private getSendFlags (): number {\n    switch (this.state) {\n      case StreamState.Init:\n        this.state = StreamState.SYNSent\n        return Flag.SYN\n      case StreamState.SYNReceived:\n        this.state = StreamState.Established\n        return Flag.ACK\n      default:\n        return 0\n    }\n  }\n\n  /**\n   * potentially sends a window update enabling further writes to take place.\n   */\n  sendWindowUpdate (): void {\n    // determine the flags if any\n    const flags = this.getSendFlags()\n\n    // If the stream has already been established\n    // and we've processed data within the time it takes for 4 round trips\n    // then we (up to) double the recvWindow\n    const now = Date.now()\n    const rtt = this.getRTT()\n    if (flags === 0 && rtt > -1 && now - this.epochStart < rtt * 4) {\n      // we've already validated that maxStreamWindowSize can't be more than MAX_UINT32\n      this.recvWindow = Math.min(this.recvWindow * 2, this.config.maxStreamWindowSize)\n    }\n\n    if (this.recvWindowCapacity >= this.recvWindow && flags === 0) {\n      // a window update isn't needed\n      return\n    }\n\n    // update the receive window\n    const delta = this.recvWindow - this.recvWindowCapacity\n    this.recvWindowCapacity = this.recvWindow\n\n    // update the epoch start\n    this.epochStart = now\n\n    // send window update\n    this.sendFrame({\n      type: FrameType.WindowUpdate,\n      flag: flags,\n      streamID: this._id,\n      length: delta\n    })\n  }\n}\n","/**\n * @packageDocumentation\n *\n * Calls a function for each value in an (async)iterable.\n *\n * The function can be sync or async.\n *\n * Async functions can be awaited on so may slow down processing of the (async)iterable.\n *\n * @example\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * // This can also be an iterator, generator, etc\n * const values = [0, 1, 2, 3, 4]\n *\n * // prints [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]\n * const arr = drain(\n *   each(values, console.info)\n * )\n * ```\n *\n * Async sources and callbacks must be awaited:\n *\n * ```javascript\n * import each from 'it-foreach'\n * import drain from 'it-drain'\n *\n * const values = async function * () {\n *   yield * [0, 1, 2, 3, 4]\n * }\n *\n * // prints [0, 0], [1, 1], [2, 2], [3, 3], [4, 4]\n * const arr = await drain(\n *   each(values(), console.info)\n * )\n * ```\n */\n\nimport peek from 'it-peekable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\nfunction isPromise <T = unknown> (thing: any): thing is Promise<T> {\n  return thing?.then != null\n}\n\n/**\n * Invokes the passed function for each item in an iterable\n */\nfunction forEach <T> (source: Iterable<T>, fn: (thing: T, index: number) => Promise<void>): AsyncGenerator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T>, fn: (thing: T, index: number) => void): Generator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T> | AsyncIterable<T>, fn: (thing: T, index: number) => void | Promise<void>): AsyncGenerator<T, void, undefined>\nfunction forEach <T> (source: Iterable<T> | AsyncIterable<T>, fn: (thing: T, index: number) => void | Promise<void>): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  let index = 0\n\n  if (isAsyncIterable(source)) {\n    return (async function * () {\n      for await (const val of source) {\n        const res = fn(val, index++)\n\n        if (isPromise(res)) {\n          await res\n        }\n\n        yield val\n      }\n    })()\n  }\n\n  // if fn function returns a promise we have to return an async generator\n  const peekable = peek(source)\n  const { value, done } = peekable.next()\n\n  if (done === true) {\n    return (function * () {}())\n  }\n\n  const res = fn(value, index++)\n\n  if (typeof res?.then === 'function') {\n    return (async function * () {\n      yield value\n\n      for await (const val of peekable) {\n        const res = fn(val, index++)\n\n        if (isPromise(res)) {\n          await res\n        }\n\n        yield val\n      }\n    })()\n  }\n\n  const func = fn as (val: T, index: number) => void\n\n  return (function * () {\n    yield value\n\n    for (const val of peekable) {\n      func(val, index++)\n      yield val\n    }\n  })()\n}\n\nexport default forEach\n","/**\n * @packageDocumentation\n *\n * This module is a JavaScript implementation of [Yamux from Hashicorp](https://github.com/hashicorp/yamux/blob/master/spec.md) designed to be used with [js-libp2p](https://github.com/libp2p/js-libp2p).\n *\n * @example Configure libp2p with Yamux\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n * import { yamux } from '@chainsafe/libp2p-yamux'\n *\n * const node = await createLibp2p({\n *   // ... other options\n *   streamMuxers: [\n *     yamux()\n *   ]\n * })\n * ```\n *\n * @example Using the low-level API\n *\n * ```js\n * import { yamux } from '@chainsafe/libp2p-yamux'\n * import { pipe } from 'it-pipe'\n * import { duplexPair } from 'it-pair/duplex'\n * import all from 'it-all'\n *\n * // Connect two yamux muxers to demo basic stream multiplexing functionality\n *\n * const clientMuxer = yamux({\n *   client: true,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * const serverMuxer = yamux({\n *   client: false,\n *   onIncomingStream: stream => {\n *     // echo data on incoming streams\n *     pipe(stream, stream)\n *   },\n *   onStreamEnd: stream => {\n *     // do nothing\n *   }\n * })()\n *\n * // `p` is our \"connections\", what we use to connect the two sides\n * // In a real application, a connection is usually to a remote computer\n * const p = duplexPair()\n *\n * // connect the muxers together\n * pipe(p[0], clientMuxer, p[0])\n * pipe(p[1], serverMuxer, p[1])\n *\n * // now either side can open streams\n * const stream0 = clientMuxer.newStream()\n * const stream1 = serverMuxer.newStream()\n *\n * // Send some data to the other side\n * const encoder = new TextEncoder()\n * const data = [encoder.encode('hello'), encoder.encode('world')]\n * pipe(data, stream0)\n *\n * // Receive data back\n * const result = await pipe(stream0, all)\n *\n * // close a stream\n * stream1.close()\n *\n * // close the muxer\n * clientMuxer.close()\n * ```\n */\n\nimport { Yamux } from './muxer.js'\nimport type { YamuxMuxerInit } from './muxer.js'\nimport type { ComponentLogger, StreamMuxerFactory } from '@libp2p/interface'\n\nexport { GoAwayCode, type FrameHeader, type FrameType } from './frame.js'\nexport type { YamuxMuxerInit }\n\nexport interface YamuxMuxerComponents {\n  logger: ComponentLogger\n}\n\nexport function yamux (init: YamuxMuxerInit = {}): (components: YamuxMuxerComponents) => StreamMuxerFactory {\n  return (components) => new Yamux(components, init)\n}\n","{\n    \"addresses\": [\n        \"/ip4/146.0.79.23/tcp/2368/p2p/12D3KooWRZjd3sRLEuGDW2JR8xsnXedosU3eoe5XhnUAsqFauoTn\",\n        \"/ip4/146.0.79.23/tcp/2369/ws/p2p/12D3KooWRZjd3sRLEuGDW2JR8xsnXedosU3eoe5XhnUAsqFauoTn\"\n    ],\n    \"databases\": {\n        \"updates\": \"/orbitdb/zdpuB29HS4Pd9vjr4qs9NdfEH5TCmVPqoHm9frf9c77Crq7Z5\",\n        \"serviceAds\": \"/orbitdb/zdpuAyvkTHk4w8wMTVCjvDRrFQpeGyYdrgoK48ufj8B5WgZst\",\n        \"buyOffers\": \"/orbitdb/zdpuAyM5AWffHSqTtxf2KubRARvwYFTycfuQX4ZG4MhhdyUML\",\n        \"agreements\": \"/orbitdb/zdpuAu9t5Avi2BVBEu3wjDTBcMYTyUKnuqPx3saFUKEw6GXhc\"\n    }\n}\n","/*\n * Provide a data directory for the PayAI Plugin.\n * This will be the working directory + '/data/payai'\n*/\n\nconst cwd = process.cwd();\nexport const dataDir = `${cwd}/data/payai`;","import { createHash } from 'crypto';\nimport bs58 from 'bs58';\nimport {\n    signBytes,\n    createKeyPairFromPrivateKeyBytes,\n    verifySignature,\n    SignatureBytes\n} from '@solana/web3.js';\nimport { IAgentRuntime } from '@elizaos/core';\n\n/**\n * Derives the Solana Keypair from a private key.\n * @param base58PrivateKey - The Base58 encoded private key.\n * @returns The Solana Keypair.\n */\nexport async function getSolanaKeypair(base58PrivateKey: string): Promise<CryptoKeyPair> {\n    // decode the base58 private key\n    let secretKeyBytes = bs58.decode(base58PrivateKey);\n\n    // if the length of the secret key bytes is 64, then take the first 32 bytes\n    if (secretKeyBytes.length === 64) {\n        secretKeyBytes = secretKeyBytes.slice(0, 32);\n    }\n\n    // create a Keypair from the secret key\n    const { privateKey, publicKey } = await createKeyPairFromPrivateKeyBytes(secretKeyBytes);\n\n    return { privateKey, publicKey };\n}\n\n/*\n * Converts a Base58 encoded public key to a CryptoKey.\n * @param base58EncodedPublicKey - The Base58 encoded public key.\n * @returns The CryptoKey.\n */\nexport async function getCryptoKeyFromBase58PublicKey(base58EncodedPublicKey: string): Promise<CryptoKey> {\n    const publicKeyBytes = bs58.decode(base58EncodedPublicKey);\n\n    const publicKey = await crypto.subtle.importKey(\n        'raw',\n        publicKeyBytes,\n        { name: 'Ed25519', namedCurve: 'Ed25519' },\n        true,\n        ['verify']\n    );\n\n    return publicKey;\n}\n\n/*\n * Converts a CryptoKey to a Base58 encoded public key.\n * @param publicKey - The CryptoKey to convert.\n * @returns The Base58 encoded public key.\n */\nexport async function getBase58PublicKeyFromCryptoKey(publicKey: CryptoKey): Promise<string> {\n    const publicKeyBytes = await crypto.subtle.exportKey('raw', publicKey);\n    return bs58.encode(new Uint8Array(publicKeyBytes));\n}\n\nfunction prepareMessageForHashing(message: object): string {\n    // serialize the message\n    const serializedMessage = JSON.stringify(message);\n\n    // strip the message of any whitespace before hashing\n    return serializedMessage.replace(/\\s/g, '');\n}\n\n/**\n * Hashes and signs a message using a Solana Keypair.\n * The message is serialized to a string before hashing.\n * The message is stripped of any whitespace before hashing.\n * The hashing algorithm used is SHA-256.\n * @param message - The message to hash and sign.\n * @param keypair - The Solana Keypair to use for signing.\n * @returns The Base58 encoded signature.\n */\nexport async function hashAndSign(message: any, privateKey: CryptoKey): Promise<string> {\n    // serialize the message\n    const serializedMessage = prepareMessageForHashing(message);\n\n    // hash the message\n    const hash = createHash('sha256').update(serializedMessage).digest();\n\n    // sign the hash\n    const signedBytes = await signBytes(privateKey, hash);\n\n    // encode the signature to base58\n    const encodedSignature = bs58.encode(signedBytes);\n\n    return encodedSignature;\n}\n\nexport async function verifyMessage(identity: string, signature: string, message: object): Promise<boolean> {\n    // convert the identity from a base58 string to a CryptoKey\n    const publicKey = await getCryptoKeyFromBase58PublicKey(identity);\n\n    // serialize the message\n    const serializedMessage = prepareMessageForHashing(message);\n\n    // hash the message\n    const hash = createHash('sha256').update(serializedMessage).digest();\n\n    // decode the signature\n    const decodedSignature = bs58.decode(signature) as SignatureBytes;\n\n    // verify the signature\n    return verifySignature(publicKey, decodedSignature, hash);\n}\n\n\n/**\n * Get the CID of an OrbitDB hash.\n * @param hash - The OrbitDB entry's hash.\n * @returns The IPFS CID of the OrbitDB entry.\n */\nexport function getCIDFromOrbitDbHash(hash: string): string {\n    // TODO return the CID once the PayAI entries are available from publicly accessible IPFS nodes\n    // return CID.parse(hash, base58btc).toString();\n    return hash;\n}\n\n/**\n * Prepares a buy offer to be published to the PayAI network.\n * @param offerDetails - The details of the offer.\n * @param runtime - The runtime context for the client.\n * @returns The buy offer that will be published to IPFS.\n */\nexport async function prepareBuyOffer(offerDetails: any, runtime: IAgentRuntime): Promise<any> {\n    try {\n        // get the user's solana private key from the runtime settings\n        const userDefinedPrivateKey = runtime.getSetting('SOLANA_PRIVATE_KEY')\n        const solanaKeypair = await getSolanaKeypair(userDefinedPrivateKey);\n\n        // Sign the offer message\n        const signature = await hashAndSign(offerDetails, solanaKeypair.privateKey);\n\n        const buyOffer = {\n            message: offerDetails,\n            identity: await getBase58PublicKeyFromCryptoKey(solanaKeypair.publicKey),\n            signature: signature,\n            _id: signature  // TODO make this more resilient in the future\n        }\n\n        return buyOffer;\n\n    } catch (error) {\n        console.error('Error preparing buy offer', error);\n        throw error;\n    }\n}\n\n/**\n * Prepares the sellerServices.json file to be published as a service ad on the PayAI network.\n * @param services - The sellerServices.json file contents.\n * @param runtime - The runtime context for the client.\n * @returns The service ad that will be published to IPFS.\n */\nexport async function prepareServiceAd(services: any, runtime: IAgentRuntime): Promise<any> {\n    try {\n        // get the user's solana private key from the runtime settings\n        const userDefinedPrivateKey = runtime.getSetting('SOLANA_PRIVATE_KEY')\n        const solanaKeypair = await getSolanaKeypair(userDefinedPrivateKey);\n        const base58PublicKey = await getBase58PublicKeyFromCryptoKey(solanaKeypair.publicKey);\n\n        // prepare message using the sellerServices.json file\n        const message = {\n            services: services.map((service: any, index: number) => {\n                return {\n                    id: index,\n                    ...service\n                };\n            }),\n            wallet: base58PublicKey\n        };\n\n        const signature = await hashAndSign(message, solanaKeypair.privateKey);\n        const formattedServices = {\n            message,\n            identity: base58PublicKey,\n            signature,\n            _id: signature  // TODO make this more resilient in the future\n        };\n\n        return formattedServices;\n\n    } catch (error) {\n        console.error('Error formatting sellerServices.json', error);\n        throw error;\n    }\n}\n\n/**\n * Prepares an agreement to be published to the PayAI network.\n * @param agreementDetails - The details of the agreement.\n * @param runtime - The runtime context for the client.\n * @returns The agreement that will be published to IPFS.\n */\nexport async function prepareAgreement(agreementDetails: any, runtime: IAgentRuntime): Promise<any> {\n    try {\n        // get the user's solana private key from the runtime settings\n        const userDefinedPrivateKey = runtime.getSetting('SOLANA_PRIVATE_KEY')\n        const solanaKeypair = await getSolanaKeypair(userDefinedPrivateKey);\n        const base58PublicKey = await getBase58PublicKeyFromCryptoKey(solanaKeypair.publicKey);\n\n        // prepare message using the agreement details\n        const message = {\n            ...agreementDetails,\n            identity: base58PublicKey\n        };\n\n        const signature = await hashAndSign(message, solanaKeypair.privateKey);\n        const formattedAgreement = {\n            message,\n            signature,\n            _id: signature  // TODO make this more resilient in the future\n        };\n\n        return formattedAgreement;\n\n    } catch (error) {\n        console.error('Error formatting agreement', error);\n        throw error;\n    }\n}\n\n/**\n * Function to call the given orbitdb database's iterator and query using the find function.\n * Returns the results of the query.\n * This is different from the orbitdb query function in that it returns the entire entry, not just the entry's value.\n * @param db - The orbitdb database to query.\n * @param findFunction - The function to use to query the database.\n * @returns The results of the query.\n */\nexport async function queryOrbitDbReturningCompleteEntries(db: any, findFunction: any): Promise<any> {\n    const results = []\n\n    for await (const doc of db.iterator()) {\n        if (findFunction(doc.value)) {\n            results.push(doc)\n        }\n    }\n    return results\n}\n","import {\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    HandlerCallback,\n    State,\n    composeContext,\n    elizaLogger,\n    generateText,\n    getEmbeddingZeroVector,\n    parseJSONObjectFromText,\n    type Action,\n    type Content\n } from '@elizaos/core';\nimport { payAIClient } from '../client';\n\n\n// query for LLM to find PayAI services that match the user's query\nconst findMatchingServicesTemplate = `\nAnalyze the following conversation to extract a list of services that the user is looking for.\nThere could be multiple services, so make sure you extract all of them.\n\nThe Seller is identified by their solana wallet address.\nThe Service Ad CID is identified by the hash of the entry.\n\nConversation:\n\n{{recentMessages}}\n\n\nAll possible services:\n\n{{services}}\n\n\nReturn a JSON object containing all of the services that match what the user is looking for.\nFor example:\n{\n    \"success\": true,\n    \"result\": \"Here are the services that match your query:\\n\\nFirst Service Name\\nFirst Service Description\\nFirst Service Price\\nSeller: B2imQsisfrTLoXxzgQfxtVJ3vQR9bGbpmyocVu3nWGJ6\\nService Ad CID: zdpuAuhwXA4NGv5Qqc6nFHPjHtFxcqnYRSGyW1FBCkrfm2tgF\\n\\nSecond Service Name\\nSecond Service Description\\nSecond Service Price\\nSeller: updtkJ8HAhh3rSkBCd3p9Z1Q74yJW4rMhSbScRskDPM\\nService Ad CID: zdpuAn5qVvoT1h2KfwNxZehFnNotCdBeEgVFGYTBuSEyKPtDB\"\n}\n\nIf no matching services were found, then set the \"success\" field to false and set the result to a string informing the user that no matching services were found, and ask them to try rewording their search. Be natural and polite.\nFor example, if there were no matching services, then return:\n{\n    \"success\": false,\n    \"result\": \"A natural message informing the user that no matching services were found, and to try rewording their search.\"\n}\n\nOnly return a JSON mardown block.\n`;\n\n\n/*\n * Action to browse PayAI agents\n * This action allows users to search through the PayAI marketplace to find a seller providing a service that matches what they are looking for.\n * The user provides a query to search for, and the action returns a list of services that match the query.\n */\nconst browseAgents: Action = {\n    name: \"BROWSE_PAYAI_AGENTS\",\n    similes: [\"SEARCH_SERVICES\", \"FIND_SELLER\", \"HIRE_AGENT\", \"FIND_SERVICE\"],\n    description: \"Search through the PayAI marketplace to find a seller providing a service that the buyer is looking for.\",\n    suppressInitialMessage: true,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        try {\n            const searchQuery = message.content.text;\n\n            if (!state) {\n                // Initialize or update state\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            const services = await payAIClient.serviceAdsDB.all();\n            const servicesString = JSON.stringify(services, null, 2);\n\n            state.services = servicesString;\n            state.searchQuery = searchQuery;\n\n            const findMatchingServicesContext = composeContext({\n                state,\n                template: findMatchingServicesTemplate,\n            });\n\n            const findMatchingServicesContent = await generateText({\n                runtime,\n                context: findMatchingServicesContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            elizaLogger.debug(\"found these matching services from the conversation:\", findMatchingServicesContent);\n            const matchingServices = parseJSONObjectFromText(findMatchingServicesContent);\n\n            // communicate failure to the user\n            if (matchingServices.success === false) {\n                elizaLogger.info(\"Couldn't find any services matching the user's request.\");\n                if (callback) {\n                    callback({\n                        text: matchingServices.result,\n                        action: \"BROWSE_PAYAI_AGENTS\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // communicate success to the user\n            const responseToUser = matchingServices.result;\n            if (callback) {\n                // create new memory of the message to the user\n                const newMemory: Memory = {\n                    userId: message.agentId,\n                    agentId: message.agentId,\n                    roomId: message.roomId,\n                    content: {\n                        text: responseToUser,\n                        action: \"BROWSE_PAYAI_AGENTS\",\n                        source: message.content.source,\n                        services: matchingServices.result,\n                    },\n                    embedding: getEmbeddingZeroVector()\n                };\n                await runtime.messageManager.createMemory(newMemory);\n\n                // send message to the user\n                callback(newMemory.content);\n            }\n\n            return true;\n        } catch (error) {\n            console.error('Error in BROWSE_PAYAI_AGENTS handler:', error);\n            if (callback) {\n                callback({\n                    text: \"Error processing BROWSE_PAYAI_AGENTS request.\",\n                    content: { error: \"Error processing BROWSE_PAYAI_AGENTS request.\" },\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Find an agent that offers web development.\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"Found the following matching services. Check them out below!\", action: \"BROWSE_PAYAI_AGENTS\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Show me all services available.\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"Here are all the available services:\", action: \"BROWSE_PAYAI_AGENTS\" },\n            },\n        ]\n    ],\n};\n\nexport default browseAgents;","/*\n * When a Buyer Agent sees a service that they would like to purchase, they can make an offer to the Seller Agent.\n * The Buyer Agent publishes the offer to IPFS and then notifies the Seller Agent using lib2p2, or other communication channels in the future.\n*/\nimport {\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    HandlerCallback,\n    State,\n    composeContext,\n    elizaLogger,\n    generateText,\n    type Action,\n    parseJSONObjectFromText,\n    getEmbeddingZeroVector,\n} from '@elizaos/core';\nimport { payAIClient } from '../client';\nimport { getCIDFromOrbitDbHash, prepareBuyOffer, queryOrbitDbReturningCompleteEntries } from '../utils';\n\ninterface OfferDetails {\n    serviceAdCID: string;\n    desiredServiceID: string;\n    desiredUnitAmount: string;\n}\n\nconst extractOfferDetailsTemplate = `\nAnalyze the following conversation to extract Offer Details from a buyer to a seller.\n\n{{recentMessages}}\n\nReturn a JSON object containing only the fields where information was clearly found.\nFor example:\n{\n    \"success\": true,\n    \"result\": {\n        \"serviceAdCID\": \"hash of the seller's services\",\n        \"wallet\": \"Solana public key of the seller\",\n        \"desiredServiceID\": \"ID of the service the buyer wants to purchase\",\n        \"desiredUnitAmount\": \"Amount of units the buyer wants to purchase\"\n    }\n}\n\nIf the buyer provided the seller's identity or wallet in the conversation, then set the wallet field to equal the seller's identity or wallet.\nIf the buyer provided the service ID or amount of units in the conversation, then set the desiredServiceID or desiredUnitAmount fields to equal the service ID or amount of units.\nIf the buyer provided the seller's service ad CID in the conversation, then set the serviceAdCID field to equal the seller's service ad CID.\n\nIf not all information was provided, or the information was unclear, then set the \"success\" field to false and set the result to a string asking the user to provide the missing information.\nFor example, if you could only find the seller's wallet or identity, then return:\n{\n    \"success\": false,\n    \"result\": \"Please provide the service ID, and the amount of units you want to purchase.\"\n}\n\nMake sure you recognize when a user is asking to purchase a new service.\nIf you see in the message history that you recently created a purchase order for a user, and now they are asking for a new service, then you should forget the previous order that they created and help them create a new purchase order for a new service.\n\nOnly return a JSON markdown block.\n`;\n\nconst makeOfferAction: Action = {\n    name: \"MAKE_OFFER\",\n    similes: [\"PURCHASE_SERVICE\", \"BUY_SERVICE\", \"HIRE_AGENT\", \"MAKE_PROPOSAL\"],\n    description: \"Make an offer to purchase a service from a seller on the PayAI marketplace.\",\n    suppressInitialMessage: true,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        try {\n            if (!state) {\n                // Initialize or update state\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            const makeOfferContext = composeContext({\n                state,\n                template: extractOfferDetailsTemplate,\n            });\n\n            const extractedDetailsText = await generateText({\n                runtime,\n                context: makeOfferContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            elizaLogger.debug(\"extracted the following Buy Offer details from the conversation:\", extractedDetailsText);\n            const extractedDetails = parseJSONObjectFromText(extractedDetailsText);\n\n            // Validate offer details\n            if (extractedDetails.success === false) {\n                elizaLogger.info(\"Need more information from the user to make an offer.\");\n                if (callback) {\n                    callback({\n                        text: extractedDetails.result,\n                        action: \"MAKE_OFFER\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // create an offer\n            const offerDetails: OfferDetails = {\n                serviceAdCID: extractedDetails.result.serviceAdCID,\n                desiredServiceID: extractedDetails.result.desiredServiceID,\n                desiredUnitAmount: extractedDetails.result.desiredUnitAmount\n            };\n\n            // prepare the offer message\n            const buyOffer = await prepareBuyOffer(offerDetails, runtime);\n\n            // Publish the offer to IPFS\n            elizaLogger.debug(\"Publishing buy offer to IPFS:\", buyOffer);\n            const result = await payAIClient.buyOffersDB.put(buyOffer);\n            const CID = getCIDFromOrbitDbHash(result);\n            elizaLogger.info(\"Published Buy Offer to IPFS: \", CID);\n\n            // TODO Notify the seller agent of the offer using lib2p2 or other communication channels in the future\n\n            let responseToUser = `Successfully made an offer for ${offerDetails.desiredUnitAmount} units of service ID ${offerDetails.desiredServiceID} from seller ${extractedDetails.result.wallet}.`;\n            responseToUser += `\\nYour Buy Offer's IPFS CID is ${CID}`;\n\n            if (callback) {\n                // create new memory of the message to the user\n                const newMemory: Memory = {\n                    userId: message.agentId,\n                    agentId: message.agentId,\n                    roomId: message.roomId,\n                    content: {\n                        text: responseToUser,\n                        action: \"MAKE_OFFER\",\n                        source: message.content.source,\n                        buyOffer: offerDetails,\n                    },\n                    embedding: getEmbeddingZeroVector()\n                };\n                await runtime.messageManager.createMemory(newMemory);\n\n                // send message to the user\n                callback(newMemory.content);\n            }\n\n            return true;\n\n        } catch (error) {\n            elizaLogger.error('Error in MAKE_OFFER handler:', error);\n            console.error(error);\n            if (callback) {\n                callback({\n                    text: \"Error processing MAKE_OFFER request.\",\n                    action: \"MAKE_OFFER\",\n                    source: message.content.source,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to purchase 5 units of service ID 1 from seller 9ovkK7WoiSXyEJDM5cZG3or3W95bdzZLDDHhuMgSJT9U\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully made an offer for ${offerDetails.desiredUnitAmount} units of service ID ${offerDetails.desiredServiceID} from seller ${extractedDetails.result.wallet}. Your Buy Offer's IPFS CID is bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                    action: \"MAKE_OFFER\"\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to purchase 3 units of service ID 2.\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Please provide the seller's identity, the service ID, and the amount of units you want to purchase.\",\n                    action: \"MAKE_OFFER\"\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to purchase service ID 1.\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Please provide the seller's identity, the service ID, and the amount of units you want to purchase.\",\n                    action: \"MAKE_OFFER\"\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to purchase seller 9ovkK7WoiSXyEJDM5cZG3or3W95bdzZLDDHhuMgSJT9U\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Please provide the seller's identity, the service ID, and the amount of units you want to purchase.\",\n                    action: \"MAKE_OFFER\"\n                },\n            }\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to purchase 5 units of service ID 1 from seller 9ovkK7WoiSXyEJDM5cZG3or3W95bdzZLDDHhuMgSJT9U\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Please provide the serviceAdCID of the seller's services.\",\n                    action: \"MAKE_OFFER\"\n                },\n            },\n        ]\n    ],\n};\n\nexport default makeOfferAction;","import {\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    HandlerCallback,\n    State,\n    composeContext,\n    elizaLogger,\n    generateText,\n    type Action,\n    parseJSONObjectFromText,\n    getEmbeddingZeroVector,\n} from '@elizaos/core';\nimport { verifySignature } from '@solana/web3.js';\nimport { payAIClient } from '../client';\nimport { getCIDFromOrbitDbHash, prepareAgreement, queryOrbitDbReturningCompleteEntries, verifyMessage } from '../utils';\n\ninterface AgreementDetails {\n    buyOfferCID: string;\n    accept: boolean;\n}\n\n\nconst extractOfferCIDTemplate = `\nAnalyze the following conversation to extract the CID of the Buy Offer from the buyer.\n\n{{recentMessages}}\n\nReturn a JSON object containing only the fields where information was clearly found.\nFor example:\n{\n    \"success\": true,\n    \"result\": {\n        \"buyOfferCID\": \"CID of the Buy Offer\"\n    }\n}\n\nIf the buyer did not provide the CID of the Buy Offer, then set the \"success\" field to false and set the result to a string asking the user to provide the missing information.\nFor example, if you could not find the CID of the Buy Offer, then return:\n{\n    \"success\": false,\n    \"result\": \"Please provide the CID of the Buy Offer.\"\n}\n\nOnly return a JSON markdown block.\n`;\n\nconst acceptOfferAction: Action = {\n    name: \"ACCEPT_OFFER\",\n    similes: [\"AGREE_TO_OFFER\", \"ACCEPT_PROPOSAL\", \"ACCEPT_TERMS\", \"ACCEPT_BUY_OFFER\"],\n    description: \"This action allows a seller to accept an offer from a buyer on the PayAI marketplace.\",\n    suppressInitialMessage: true,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        try {\n            if (!state) {\n                // Initialize or update state\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            const acceptOfferContext = composeContext({\n                state,\n                template: extractOfferCIDTemplate,\n            });\n\n            const extractedDetailsText = await generateText({\n                runtime,\n                context: acceptOfferContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            elizaLogger.debug(\"extracted the following Buy Offer CID from the conversation:\", extractedDetailsText);\n            const extractedDetails = parseJSONObjectFromText(extractedDetailsText);\n\n            // Validate offer details\n            if (extractedDetails.success === false) {\n                elizaLogger.info(\"Need more information from the user to accept the offer.\");\n                if (callback) {\n                    callback({\n                        text: extractedDetails.result,\n                        action: \"ACCEPT_OFFER\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // analyze the buy offer to determine if it is valid\n            const { isValid, reason } = await isValidBuyOffer(extractedDetails.result.buyOfferCID, runtime);\n            if (!isValid) {\n                elizaLogger.info(reason);\n                if (callback) {\n                    callback({\n                        text: reason,\n                        action: \"ACCEPT_OFFER\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // create an agreement\n            const agreementDetails: AgreementDetails = {\n                buyOfferCID: extractedDetails.result.buyOfferCID,\n                accept: true,\n            };\n\n            // prepare the agreement message\n            const agreement = await prepareAgreement(agreementDetails, runtime);\n\n            // Publish the agreement to IPFS\n            elizaLogger.debug(\"Publishing agreement to IPFS:\", agreement);\n            const result = await payAIClient.agreementsDB.put(agreement);\n            const CID = getCIDFromOrbitDbHash(result);\n            elizaLogger.info(\"Published Agreement to IPFS: \", CID);\n\n            // TODO Notify the buyer agent of the agreement using lib2p2 or other communication channels in the future\n            let responseToUser = `I accepted the offer and signed an agreement. The Agreement's IPFS CID is ${CID}`;\n\n            if (callback) {\n                // create new memory of the message to the user\n                const newMemory: Memory = {\n                    userId: message.agentId,\n                    agentId: message.agentId,\n                    roomId: message.roomId,\n                    content: {\n                        text: responseToUser,\n                        action: \"ACCEPT_OFFER\",\n                        source: message.content.source,\n                        agreement: agreementDetails,\n                    },\n                    embedding: getEmbeddingZeroVector()\n                };\n                await runtime.messageManager.createMemory(newMemory);\n\n                // send message to the user\n                callback(newMemory.content);\n            }\n\n            return true;\n\n        } catch (error) {\n            elizaLogger.error('Error in ACCEPT_OFFER handler:', error);\n            console.error(error);\n            if (callback) {\n                callback({\n                    text: \"Error processing ACCEPT_OFFER request.\",\n                    action: \"ACCEPT_OFFER\",\n                    source: message.content.source,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I sent you a buy offer with CID bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I accept the offer. The Agreement's IPFS CID is bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku\",\n                    action: \"ACCEPT_OFFER\",\n                },\n            },\n        ],\n        // Example where the user provides a Buy Offer with an invalid signature\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I sent you a buy offer with CID bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Buy Offer signature is invalid.\",\n                    action: \"ACCEPT_OFFER\",\n                },\n            },\n        ],\n        // Example where the user provides a Buy Offer that references a non-existent Service Ad\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I sent you a buy offer with CID bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"ServiceAd referenced by Buy Offer does not exist\",\n                    action: \"ACCEPT_OFFER\",\n                },\n            },\n        ],\n        // Example where the user provides a Buy Offer that references a Service Ad that does not match the seller's most recent Service Ad\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I sent you a buy offer with CID bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"ServiceAd does not match the seller's most recent service Ad. Seller's most recent service ad can be found at bafybeibml5uieyxa5tufngvg7fgwbkwvlsuntwbxgtskoqynbt7wlchmfm\",\n                    action: \"ACCEPT_OFFER\",\n                },\n            },\n        ],\n    ],\n};\n\n/*\n * Check if the Buy Offer is valid\n * This function verifies the Buy Offer and the Service Ad to ensure that the Buy Offer is valid in the eyes of the Seller Agent.\n * The function checks the signature of the Buy Offer, the existence of the Service Ad, and that the Service Ad matches the Seller's local Service Ad.\n */\nasync function isValidBuyOffer(buyOfferCID: string, runtime: IAgentRuntime) {\n    try {\n        // get the buy offer from the buyOffersDB\n        const buyOffer = await payAIClient.getEntryFromCID(buyOfferCID, payAIClient.buyOffersDB);\n\n        // verify the signature of the message using the identity\n        const identity = buyOffer.identity;\n        const signature = buyOffer.signature;\n        const message = buyOffer.message;\n        const isValidSignature = await verifyMessage(identity, signature, message);\n        if (!isValidSignature) {\n            return { isValid: false, reason: \"Buy Offer signature is invalid.\" };\n        }\n\n        // look up the serviceAd that the buy offer references\n        const serviceAd = await payAIClient.getEntryFromHash(message.serviceAdCID, payAIClient.serviceAdsDB);\n\n        // verify that the serviceAd exists\n        if (!serviceAd) {\n            return { isValid: false, reason: \"ServiceAd referenced by Buy Offer does not exist\" };\n        }\n\n        // verify that the serviceAd is current by checking that it matches the seller's local service Ad\n        const isCurrent = message.serviceAdCID === payAIClient.sellerServiceAdCID;\n        if (!isCurrent) {\n            return {\n                isValid: false,\n                reason: `ServiceAd does not match the seller's most recent service Ad. Seller's most recent service ad can be found at ${payAIClient.sellerServiceAdCID}`\n            };\n        }\n\n        return { isValid: true, reason: \"\" };\n    }\n    catch (error) {\n        console.error('Error validating Buy Offer:', error);\n        throw error;\n    }\n}\n\n\nexport default acceptOfferAction;","import {\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    HandlerCallback,\n    State,\n    composeContext,\n    elizaLogger,\n    generateText,\n    type Action,\n    getEmbeddingZeroVector,\n    parseJSONObjectFromText\n} from '@elizaos/core';\nimport fs from 'fs';\nimport { payAIClient } from '../client';\nimport { prepareServiceAd, getCIDFromOrbitDbHash } from '../utils';\n\n\n\nconst extractServicesTemplate = `\nAnalyze the following conversation to extract the services that the user wants to sell.\nThere could be multiple services, so make sure you extract all of them.\n\n{{recentMessages}}\n\nReturn a JSON object containing only the fields where information was clearly found.\nFor example:\n{\n    \"success\": true,\n    \"result\": [\n        {\n            \"name\": \"First Service Name\",\n            \"description\": \"First Service Description\",\n            \"price\": \"First Service Price\"\n        },\n        {\n            \"name\": \"Second Service Name\",\n            \"description\": \"Second Service Description\",\n            \"price\": \"Second Service Price\"\n        }\n    ]\n}\n\nIf the user did not provide enough information, then set the \"success\" field to false and set the result to a string asking the user to provide the missing information. If asking for missing information, be natural and polite.\nFor example, if you could not find the services, then return:\n{\n    \"success\": false,\n    \"result\": \"A natural message asking the user to provide information on the services they want to sell.\"\n}\n\nOnly return a JSON mardown block.\n`;\n\nconst confirmServicesTemplate = `\nLook for confirmation from the user that the following services are the only ones they are selling at the moment.\n\n{{services}}\n\nUser's recent messages are below.\n\n{{recentMessages}}\n\n\nReturn a JSON object containing only the fields where information was clearly found.\nIf the user confirmed, then set the \"success\" field to true and set the result to \"yes\".\nFor example:\n{\n    \"success\": true,\n    \"result\": \"yes\"\n}\n\nIf the user did not confirm, then set the \"success\" field to false and set the result to a string asking the user to confirm.\nFor example, if you could not find the confirmation, then return:\n{\n    \"success\": false,\n    \"result\": \"Please confirm that these are the only services you are selling at the moment:\\n\\n{{services}}\"\n}\n\nOnly return a JSON mardown block.\n`;\n\nconst advertiseServicesAction: Action = {\n    name: \"ADVERTISE_SERVICES\",\n    similes: [\"SELL_SERVICES\", \"OFFER_SERVICES\", \"LIST_SERVICES\"],\n    description: \"Ask the user for the services they want to sell, create the services file locally, and publish it to the serviceAdsDB.\",\n    suppressInitialMessage: true,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        console.log(\"message.content.source: \", message.content.source)\n        if (message.content.source !== \"direct\") {\n            elizaLogger.debug(\"ADVERTISE_SERVICES action is only allowed when interacting with the direct client. This message was from:\", message.content.source);\n            return false;\n        }\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ) => {\n        try {\n            if (!state) {\n                // Initialize or update state\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            // Extract the services from the message history\n            const extractServicesContext = composeContext({\n                state,\n                template: extractServicesTemplate,\n            });\n\n            const extractedServicesText = await generateText({\n                runtime,\n                context: extractServicesContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            elizaLogger.debug(\"extracted the following services from the conversation:\", extractedServicesText);\n            console.log(\"extracted the following services from the conversation:\", extractedServicesText);\n            const extractedServices = parseJSONObjectFromText(extractedServicesText);\n\n            console.log(\"message: \", message)\n\n            // Validate services details\n            if (extractedServices.success === false) {\n                elizaLogger.info(\"Need more information from the user to advertise services.\");\n                if (callback) {\n                    callback({\n                        text: extractedServices.result,\n                        action: \"ADVERTISE_SERVICES\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // Confirm with the user that these are the only services they are selling\n            state.services = extractedServices.result.map((service: any) =>\n                `Name: ${service.name}\\nDescription: ${service.description}\\nPrice: ${service.price}`\n            ).join('\\n\\n');\n            const confirmServicesContext = composeContext({\n                state,\n                template: confirmServicesTemplate,\n            });\n\n            const confirmServicesText = await generateText({\n                runtime,\n                context: confirmServicesContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            elizaLogger.debug(\"confirmation from the user:\", confirmServicesText);\n            console.log(\"confirmation from the user:\", confirmServicesText);\n            const confirmServices = parseJSONObjectFromText(confirmServicesText);\n\n            // Validate confirmation\n            if (confirmServices.success === false) {\n                elizaLogger.info(\"Need confirmation from the user.\");\n                if (callback) {\n                    callback({\n                        text: confirmServices.result,\n                        action: \"ADVERTISE_SERVICES\",\n                        source: message.content.source,\n                    });\n                }\n                return false;\n            }\n\n            // create the services file locally\n            const servicesFilePath = payAIClient.servicesConfigPath;\n            console.log(\"writing the following services to the services file:\", extractedServices.result);\n            fs.writeFileSync(servicesFilePath, JSON.stringify(extractedServices.result, null, 2));\n            elizaLogger.info(\"Created services file locally at:\", servicesFilePath);\n\n            // prepare the service ad\n            const serviceAd = await prepareServiceAd(extractedServices.result, runtime);\n\n            // publish the service ad to IPFS\n            elizaLogger.debug(\"Publishing service ad to IPFS:\", serviceAd);\n            const result = await payAIClient.serviceAdsDB.put(serviceAd);\n            const CID = getCIDFromOrbitDbHash(result);\n            elizaLogger.info(\"Published Service Ad to IPFS: \", CID);\n\n            let responseToUser = `Successfully advertised your services. Your Service Ad's IPFS CID is ${CID}`;\n\n            if (callback) {\n                // create new memory of the message to the user\n                const newMemory: Memory = {\n                    userId: message.agentId,\n                    agentId: message.agentId,\n                    roomId: message.roomId,\n                    content: {\n                        text: responseToUser,\n                        action: \"ADVERTISE_SERVICES\",\n                        source: message.content.source,\n                        services: extractedServices.result,\n                    },\n                    embedding: getEmbeddingZeroVector()\n                };\n                await runtime.messageManager.createMemory(newMemory);\n\n                // send message to the user\n                callback(newMemory.content);\n            }\n\n            return true;\n\n        } catch (error) {\n            elizaLogger.error('Error in ADVERTISE_SERVICES handler:', error);\n            console.error(error);\n            if (callback) {\n                callback({\n                    text: \"Error processing ADVERTISE_SERVICES request.\",\n                    action: \"ADVERTISE_SERVICES\",\n                    source: message.content.source,\n                });\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to sell web development services for $50 per hour.\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully advertised your services. Your Service Ad's IPFS CID is bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\",\n                    action: \"ADVERTISE_SERVICES\"\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"I want to sell graphic design services.\"\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Please provide the services you want to sell, including the name, description, and price.\",\n                    action: \"ADVERTISE_SERVICES\"\n                },\n            }\n        ]\n    ],\n};\n\nexport default advertiseServicesAction;\n","import type { Plugin } from \"@elizaos/core\";\nimport { payAIClient } from \"./client.ts\";\nimport browseServices from \"./actions/browseAgents.ts\";\nimport makeOfferAction from \"./actions/makeOfferAction.ts\";\nimport acceptOfferAction from \"./actions/acceptOfferAction.ts\";\nimport advertiseServicesAction from \"./actions/advertiseServicesAction.ts\";\n\nexport const payaiPlugin: Plugin = {\n    name: \"payai\",\n    description: \"Agents can hire other agents for their services. Agents can make money by selling their services.\",\n    actions: [browseServices, makeOfferAction, acceptOfferAction, advertiseServicesAction],\n    evaluators: [],\n    providers: [],\n    services: [],\n    clients: [payAIClient]\n};\n\nexport default payaiPlugin;\n"],"mappings":"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","names":["cache","update","name","globalThis","symbol","merge","self","message","original","require_retry","ChaCha20Poly1305","ctx","length","Poly1305","ctx","importObj","newInstance","ctx","wasmInputValue","wasmOutputValue","src","output","start","length","isElectron","Buffer","name","encode","length","i","j","decode","string","name","bytes","decoders","encode","decode","alphabet","string","codes","encode","decode","identity_exports","identity","encode","decode","decode","code","code","digest","bytes","decode","equals","encode","identity","crypto","from","name","code","encode","digest","from","crypto","base","bytes","version","baseCache","version","code","bytes","digest","self","equals","base","decode","length","cache","cid","identity_exports","Buffer","Buffer","name","encode","decode","string","toString","base","Buffer","toString","name","data","hashlru","cache","cache","resolvers","RecordType","equals","N1","N2","N3","N4","N5","N6","N7","MSB","REST","encodingLength","encode","decode","Buffer","length","Buffer","from","Buffer","fromString","string","base","Buffer","bytes","toString","length","code","name","toString","fromString","multiaddr","code","encode","decode","encodingLength","bytes","code","decode","encodingLength","toString","encode","message","tcp","code","name","toString","equals","message","dnsaddrResolver","peerId","output","ma","import_index","mergeOptions","TypedEventEmitter","setMaxListeners","InvalidParametersError","defaultLogger","PeerSet","peerIdFromString","clean","fromString","toString","bytes","message","symbol","src_default","isAsyncIterable","peekable","src_default","func","isAsyncIterable","arr","src_default","isAsyncIterable","src_default","isAsyncIterable","src_default","src_default","it","tuple","isPrivate","defaultValues","multiaddr","defaultValues","peerId","multiaddr","messages","message","serviceCapabilities","InvalidMultiaddrError","InvalidParametersError","PeerMap","InvalidParametersError","peerIdFromString","peerId","peerIdFromString","InvalidParametersError","output","ma","isIPv6","PeerMap","string","or","string","DNS","or","signal","isPrivate","isPrivate","defaultOptions","PeerMap","peerId","multiaddr","options","fromString","err","AbortError","message","retry","peerId","defaultOptions","InvalidParametersError","PeerMap","peerId","InvalidMultiaddrError","multiaddr","serviceCapabilities","setMaxListeners","AbortError","message","code","name","symbol","length","bytes","start","equals","message","code","AbortError","write","source","bytes","serviceCapabilities","setMaxListeners","start","NotStartedError","AbortError","message","code","pushable","drain","options","AbortError","_pushable","isAsyncIterable","output","src_default","toString","self","src_default","NotStartedError","NotFoundError","createScalableCuckooFilter","CustomEvent","toString","self","src_default","NotFoundError","createScalableCuckooFilter","peer","randomBytes","setMaxListeners","AbortError","message","code","setMaxListeners","start","randomBytes","InvalidParametersError","InvalidParametersError","peerId","FaultTolerance","InvalidParametersError","NotStartedError","FaultTolerance","InvalidParametersError","NotStartedError","message","InvalidMultiaddrError","LimitedConnectionError","setMaxListeners","InvalidPeerIdError","peerIdFromString","setMaxListeners","ConnectionClosedError","options","peerIdFromString","setMaxListeners","maConn","InvalidMultiaddrError","InvalidPeerIdError","LimitedConnectionError","name","TypedEventEmitter","setMaxListeners","defaultLogger","name","peerId","PeerSet","InvalidParametersError","peerIdFromString","fromString","bytes","multiaddr","publicKeyFromProtobuf","serviceCapabilities","isAsyncIterable","length","encodingLength","encode","isAsyncIterable","UnexpectedEOFError","ReadMode","length","decode","encodingLength","isAsyncIterable","UnexpectedEOFError","InvalidMessageLengthError","InvalidDataLengthError","InvalidDataLengthLengthError","bytes","encodingLength","decode","encode","InvalidMessageLengthError","InvalidDataLengthLengthError","InvalidDataLengthError","isAsyncIterable","source","src_default","crypto","allocUnsafe","digest","allocUnsafe","detectElectron","isNode","number","toBytes","isLE","bytes","sigma","output","take","number","nc","toBytes","take","output","isBytes","crypto","createView","utf8ToBytes","toBytes","toBytes","randomBytes","crypto","setBigUint64","isLE","createView","toBytes","take","length","isBytes","abytes","bytes","abytes","bytes","abytes","isBytes","isBytes","_0n","_0n","_0n","_1n","adjustScalarBytes","bytes","_0n","_1n","bytes","randomBytes","toBytes","message","toBytes","length","HMAC","SHA256","sha256","SHA256","sha256","ctx","crypto","final","output","digest","crypto","toString","message","crypto","fromString","message","publicKeyFromProtobuf","length","string","read","start","length","start","bytes","read","encodingLength","size","alloc","encodingLength","length","fromString","message","CODEC_TYPES","createCodec","name","encode","decode","encode","decode","createCodec","NoiseExtensions","length","NoiseHandshakePayload","publicKeyFromProtobuf","fromString","crypto","plaintext","crypto","serviceCapabilities","publicKeyFromProtobuf","decode","InvalidParametersError","TooManyOutboundProtocolStreamsError","serviceCapabilities","setMaxListeners","InvalidParametersError","message","InvalidParametersError","FrameType","Flag","GoAwayCode","Decoder","length","AbortError","isAsyncIterable","res","peekable","src_default","func","StreamState","src_default","AbortError","CLOSE_TIMEOUT","serviceCapabilities","setMaxListeners","isPromise","Decoder","name","TooManyOutboundProtocolStreamsError","start","InvalidParametersError","length","message","identity","createHash","elizaLogger","message","elizaLogger","ModelClass","composeContext","elizaLogger","generateText","parseJSONObjectFromText","getEmbeddingZeroVector","message","composeContext","generateText","ModelClass","elizaLogger","parseJSONObjectFromText","CID","getEmbeddingZeroVector","ModelClass","composeContext","elizaLogger","generateText","parseJSONObjectFromText","getEmbeddingZeroVector","message","composeContext","generateText","ModelClass","elizaLogger","parseJSONObjectFromText","CID","getEmbeddingZeroVector","identity","ModelClass","composeContext","elizaLogger","generateText","getEmbeddingZeroVector","parseJSONObjectFromText","fs","message","elizaLogger","composeContext","generateText","ModelClass","parseJSONObjectFromText","fs","CID","getEmbeddingZeroVector"]}