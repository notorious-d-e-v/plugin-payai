/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import {
  type ParsedCollectPlatformFeesInstruction,
  type ParsedInitializeBuyerContractCounterInstruction,
  type ParsedInitializeGlobalStateInstruction,
  type ParsedReadContractInstruction,
  type ParsedRefundBuyerInstruction,
  type ParsedReleasePaymentInstruction,
  type ParsedStartContractInstruction,
  type ParsedUpdateAdminInstruction,
  type ParsedUpdateBuyerFeeInstruction,
  type ParsedUpdateSellerFeeInstruction,
} from '../instructions';

export const PAYAI_MARKETPLACE_PROGRAM_ADDRESS =
  'DKgspHjnwuPZfYWKHdZwVCTZKtNX4TdpASTGoqxpcmtt' as Address<'DKgspHjnwuPZfYWKHdZwVCTZKtNX4TdpASTGoqxpcmtt'>;

export enum PayaiMarketplaceAccount {
  BuyerContractCounter,
  Contract,
  GlobalState,
}

export function identifyPayaiMarketplaceAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PayaiMarketplaceAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([181, 162, 88, 45, 74, 176, 199, 99])
      ),
      0
    )
  ) {
    return PayaiMarketplaceAccount.BuyerContractCounter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 138, 115, 242, 121, 67, 183, 26])
      ),
      0
    )
  ) {
    return PayaiMarketplaceAccount.Contract;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 46, 74, 168, 216, 123, 133, 98])
      ),
      0
    )
  ) {
    return PayaiMarketplaceAccount.GlobalState;
  }
  throw new Error(
    'The provided account could not be identified as a payaiMarketplace account.'
  );
}

export enum PayaiMarketplaceInstruction {
  CollectPlatformFees,
  InitializeBuyerContractCounter,
  InitializeGlobalState,
  ReadContract,
  RefundBuyer,
  ReleasePayment,
  StartContract,
  UpdateAdmin,
  UpdateBuyerFee,
  UpdateSellerFee,
}

export function identifyPayaiMarketplaceInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PayaiMarketplaceInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([191, 153, 219, 164, 5, 65, 153, 48])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.CollectPlatformFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([21, 138, 242, 28, 218, 19, 71, 106])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.InitializeBuyerContractCounter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([232, 254, 209, 244, 123, 89, 154, 207])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.InitializeGlobalState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([25, 214, 238, 0, 237, 193, 42, 3])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.ReadContract;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([199, 139, 203, 146, 192, 150, 53, 218])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.RefundBuyer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 34, 191, 86, 145, 160, 183, 233])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.ReleasePayment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 123, 201, 95, 241, 67, 90, 245])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.StartContract;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([161, 176, 40, 213, 60, 184, 179, 228])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.UpdateAdmin;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 177, 87, 223, 151, 1, 247, 192])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.UpdateBuyerFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 255, 173, 137, 17, 241, 9, 193])
      ),
      0
    )
  ) {
    return PayaiMarketplaceInstruction.UpdateSellerFee;
  }
  throw new Error(
    'The provided instruction could not be identified as a payaiMarketplace instruction.'
  );
}

export type ParsedPayaiMarketplaceInstruction<
  TProgram extends string = 'DKgspHjnwuPZfYWKHdZwVCTZKtNX4TdpASTGoqxpcmtt',
> =
  | ({
      instructionType: PayaiMarketplaceInstruction.CollectPlatformFees;
    } & ParsedCollectPlatformFeesInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.InitializeBuyerContractCounter;
    } & ParsedInitializeBuyerContractCounterInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.InitializeGlobalState;
    } & ParsedInitializeGlobalStateInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.ReadContract;
    } & ParsedReadContractInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.RefundBuyer;
    } & ParsedRefundBuyerInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.ReleasePayment;
    } & ParsedReleasePaymentInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.StartContract;
    } & ParsedStartContractInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.UpdateAdmin;
    } & ParsedUpdateAdminInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.UpdateBuyerFee;
    } & ParsedUpdateBuyerFeeInstruction<TProgram>)
  | ({
      instructionType: PayaiMarketplaceInstruction.UpdateSellerFee;
    } & ParsedUpdateSellerFeeInstruction<TProgram>);
