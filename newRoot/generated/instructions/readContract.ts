/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { PAYAI_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const READ_CONTRACT_DISCRIMINATOR = new Uint8Array([
  25, 214, 238, 0, 237, 193, 42, 3,
]);

export function getReadContractDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    READ_CONTRACT_DISCRIMINATOR
  );
}

export type ReadContractInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountContract extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountContract extends string
        ? ReadonlyAccount<TAccountContract>
        : TAccountContract,
      ...TRemainingAccounts,
    ]
  >;

export type ReadContractInstructionData = { discriminator: ReadonlyUint8Array };

export type ReadContractInstructionDataArgs = {};

export function getReadContractInstructionDataEncoder(): Encoder<ReadContractInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: READ_CONTRACT_DISCRIMINATOR })
  );
}

export function getReadContractInstructionDataDecoder(): Decoder<ReadContractInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReadContractInstructionDataCodec(): Codec<
  ReadContractInstructionDataArgs,
  ReadContractInstructionData
> {
  return combineCodec(
    getReadContractInstructionDataEncoder(),
    getReadContractInstructionDataDecoder()
  );
}

export type ReadContractInput<TAccountContract extends string = string> = {
  contract: Address<TAccountContract>;
};

export function getReadContractInstruction<
  TAccountContract extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReadContractInput<TAccountContract>,
  config?: { programAddress?: TProgramAddress }
): ReadContractInstruction<TProgramAddress, TAccountContract> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    contract: { value: input.contract ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.contract)],
    programAddress,
    data: getReadContractInstructionDataEncoder().encode({}),
  } as ReadContractInstruction<TProgramAddress, TAccountContract>;

  return instruction;
}

export type ParsedReadContractInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    contract: TAccountMetas[0];
  };
  data: ReadContractInstructionData;
};

export function parseReadContractInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReadContractInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      contract: getNextAccount(),
    },
    data: getReadContractInstructionDataDecoder().decode(instruction.data),
  };
}
