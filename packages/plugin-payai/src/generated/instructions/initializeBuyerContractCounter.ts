/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PAYAI_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_BUYER_CONTRACT_COUNTER_DISCRIMINATOR = new Uint8Array([
  21, 138, 242, 28, 218, 19, 71, 106,
]);

export function getInitializeBuyerContractCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_BUYER_CONTRACT_COUNTER_DISCRIMINATOR
  );
}

export type InitializeBuyerContractCounterInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBuyerContractCounter extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBuyerContractCounter extends string
        ? WritableAccount<TAccountBuyerContractCounter>
        : TAccountBuyerContractCounter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeBuyerContractCounterInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeBuyerContractCounterInstructionDataArgs = {};

export function getInitializeBuyerContractCounterInstructionDataEncoder(): Encoder<InitializeBuyerContractCounterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_BUYER_CONTRACT_COUNTER_DISCRIMINATOR,
    })
  );
}

export function getInitializeBuyerContractCounterInstructionDataDecoder(): Decoder<InitializeBuyerContractCounterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeBuyerContractCounterInstructionDataCodec(): Codec<
  InitializeBuyerContractCounterInstructionDataArgs,
  InitializeBuyerContractCounterInstructionData
> {
  return combineCodec(
    getInitializeBuyerContractCounterInstructionDataEncoder(),
    getInitializeBuyerContractCounterInstructionDataDecoder()
  );
}

export type InitializeBuyerContractCounterAsyncInput<
  TAccountSigner extends string = string,
  TAccountBuyerContractCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  buyerContractCounter?: Address<TAccountBuyerContractCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeBuyerContractCounterInstructionAsync<
  TAccountSigner extends string,
  TAccountBuyerContractCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeBuyerContractCounterAsyncInput<
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeBuyerContractCounterInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    buyerContractCounter: {
      value: input.buyerContractCounter ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.buyerContractCounter.value) {
    accounts.buyerContractCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            98, 117, 121, 101, 114, 95, 99, 111, 110, 116, 114, 97, 99, 116, 95,
            99, 111, 117, 110, 116, 101, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.buyerContractCounter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeBuyerContractCounterInstructionDataEncoder().encode({}),
  } as InitializeBuyerContractCounterInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeBuyerContractCounterInput<
  TAccountSigner extends string = string,
  TAccountBuyerContractCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  buyerContractCounter: Address<TAccountBuyerContractCounter>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeBuyerContractCounterInstruction<
  TAccountSigner extends string,
  TAccountBuyerContractCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: InitializeBuyerContractCounterInput<
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeBuyerContractCounterInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBuyerContractCounter,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    buyerContractCounter: {
      value: input.buyerContractCounter ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.buyerContractCounter),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeBuyerContractCounterInstructionDataEncoder().encode({}),
  } as InitializeBuyerContractCounterInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeBuyerContractCounterInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    buyerContractCounter: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeBuyerContractCounterInstructionData;
};

export function parseInitializeBuyerContractCounterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeBuyerContractCounterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      buyerContractCounter: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeBuyerContractCounterInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
