/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PAYAI_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const RELEASE_PAYMENT_DISCRIMINATOR = new Uint8Array([
  24, 34, 191, 86, 145, 160, 183, 233,
]);

export function getReleasePaymentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RELEASE_PAYMENT_DISCRIMINATOR
  );
}

export type ReleasePaymentInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountContract extends string | IAccountMeta<string> = string,
  TAccountEscrowVault extends string | IAccountMeta<string> = string,
  TAccountSeller extends string | IAccountMeta<string> = string,
  TAccountGlobalState extends string | IAccountMeta<string> = string,
  TAccountPlatformFeeVault extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountContract extends string
        ? WritableAccount<TAccountContract>
        : TAccountContract,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountSeller extends string
        ? WritableAccount<TAccountSeller>
        : TAccountSeller,
      TAccountGlobalState extends string
        ? WritableAccount<TAccountGlobalState>
        : TAccountGlobalState,
      TAccountPlatformFeeVault extends string
        ? WritableAccount<TAccountPlatformFeeVault>
        : TAccountPlatformFeeVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReleasePaymentInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReleasePaymentInstructionDataArgs = {};

export function getReleasePaymentInstructionDataEncoder(): Encoder<ReleasePaymentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RELEASE_PAYMENT_DISCRIMINATOR })
  );
}

export function getReleasePaymentInstructionDataDecoder(): Decoder<ReleasePaymentInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReleasePaymentInstructionDataCodec(): Codec<
  ReleasePaymentInstructionDataArgs,
  ReleasePaymentInstructionData
> {
  return combineCodec(
    getReleasePaymentInstructionDataEncoder(),
    getReleasePaymentInstructionDataDecoder()
  );
}

export type ReleasePaymentAsyncInput<
  TAccountSigner extends string = string,
  TAccountContract extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountSeller extends string = string,
  TAccountGlobalState extends string = string,
  TAccountPlatformFeeVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** the signer must be the Buyer or the Admin. */
  signer: TransactionSigner<TAccountSigner>;
  contract: Address<TAccountContract>;
  escrowVault?: Address<TAccountEscrowVault>;
  seller: Address<TAccountSeller>;
  globalState?: Address<TAccountGlobalState>;
  platformFeeVault?: Address<TAccountPlatformFeeVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getReleasePaymentInstructionAsync<
  TAccountSigner extends string,
  TAccountContract extends string,
  TAccountEscrowVault extends string,
  TAccountSeller extends string,
  TAccountGlobalState extends string,
  TAccountPlatformFeeVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReleasePaymentAsyncInput<
    TAccountSigner,
    TAccountContract,
    TAccountEscrowVault,
    TAccountSeller,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReleasePaymentInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountContract,
    TAccountEscrowVault,
    TAccountSeller,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    contract: { value: input.contract ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    platformFeeVault: {
      value: input.platformFeeVault ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.escrowVault.value) {
    accounts.escrowVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 115, 99, 114, 111, 119, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.contract.value)),
      ],
    });
  }
  if (!accounts.globalState.value) {
    accounts.globalState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            183, 21, 201, 39, 132, 92, 173, 133, 20, 49, 110, 146, 116, 34, 193,
            22, 230, 35, 4, 182, 110, 1, 127, 84, 6, 28, 105, 208, 196, 28, 74,
            185,
          ])
        ),
      ],
    });
  }
  if (!accounts.platformFeeVault.value) {
    accounts.platformFeeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 95, 102, 101, 101, 95, 118,
            97, 117, 108, 116,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.contract),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.platformFeeVault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReleasePaymentInstructionDataEncoder().encode({}),
  } as ReleasePaymentInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountContract,
    TAccountEscrowVault,
    TAccountSeller,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ReleasePaymentInput<
  TAccountSigner extends string = string,
  TAccountContract extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountSeller extends string = string,
  TAccountGlobalState extends string = string,
  TAccountPlatformFeeVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** the signer must be the Buyer or the Admin. */
  signer: TransactionSigner<TAccountSigner>;
  contract: Address<TAccountContract>;
  escrowVault: Address<TAccountEscrowVault>;
  seller: Address<TAccountSeller>;
  globalState: Address<TAccountGlobalState>;
  platformFeeVault: Address<TAccountPlatformFeeVault>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getReleasePaymentInstruction<
  TAccountSigner extends string,
  TAccountContract extends string,
  TAccountEscrowVault extends string,
  TAccountSeller extends string,
  TAccountGlobalState extends string,
  TAccountPlatformFeeVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: ReleasePaymentInput<
    TAccountSigner,
    TAccountContract,
    TAccountEscrowVault,
    TAccountSeller,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ReleasePaymentInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountContract,
  TAccountEscrowVault,
  TAccountSeller,
  TAccountGlobalState,
  TAccountPlatformFeeVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    contract: { value: input.contract ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    seller: { value: input.seller ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    platformFeeVault: {
      value: input.platformFeeVault ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.contract),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.platformFeeVault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReleasePaymentInstructionDataEncoder().encode({}),
  } as ReleasePaymentInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountContract,
    TAccountEscrowVault,
    TAccountSeller,
    TAccountGlobalState,
    TAccountPlatformFeeVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedReleasePaymentInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** the signer must be the Buyer or the Admin. */
    signer: TAccountMetas[0];
    contract: TAccountMetas[1];
    escrowVault: TAccountMetas[2];
    seller: TAccountMetas[3];
    globalState: TAccountMetas[4];
    platformFeeVault: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: ReleasePaymentInstructionData;
};

export function parseReleasePaymentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReleasePaymentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      contract: getNextAccount(),
      escrowVault: getNextAccount(),
      seller: getNextAccount(),
      globalState: getNextAccount(),
      platformFeeVault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReleasePaymentInstructionDataDecoder().decode(instruction.data),
  };
}
