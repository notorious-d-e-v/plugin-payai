/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { PAYAI_MARKETPLACE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const START_CONTRACT_DISCRIMINATOR = new Uint8Array([
  137, 123, 201, 95, 241, 67, 90, 245,
]);

export function getStartContractDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    START_CONTRACT_DISCRIMINATOR
  );
}

export type StartContractInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountBuyerContractCounter extends string | IAccountMeta<string> = string,
  TAccountContract extends string | IAccountMeta<string> = string,
  TAccountEscrowVault extends string | IAccountMeta<string> = string,
  TAccountGlobalState extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountBuyerContractCounter extends string
        ? WritableAccount<TAccountBuyerContractCounter>
        : TAccountBuyerContractCounter,
      TAccountContract extends string
        ? WritableAccount<TAccountContract>
        : TAccountContract,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountGlobalState extends string
        ? WritableAccount<TAccountGlobalState>
        : TAccountGlobalState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type StartContractInstructionData = {
  discriminator: ReadonlyUint8Array;
  cid: string;
  payoutAddress: Address;
  escrowAmount: bigint;
};

export type StartContractInstructionDataArgs = {
  cid: string;
  payoutAddress: Address;
  escrowAmount: number | bigint;
};

export function getStartContractInstructionDataEncoder(): Encoder<StartContractInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['cid', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['payoutAddress', getAddressEncoder()],
      ['escrowAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: START_CONTRACT_DISCRIMINATOR })
  );
}

export function getStartContractInstructionDataDecoder(): Decoder<StartContractInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['cid', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['payoutAddress', getAddressDecoder()],
    ['escrowAmount', getU64Decoder()],
  ]);
}

export function getStartContractInstructionDataCodec(): Codec<
  StartContractInstructionDataArgs,
  StartContractInstructionData
> {
  return combineCodec(
    getStartContractInstructionDataEncoder(),
    getStartContractInstructionDataDecoder()
  );
}

export type StartContractAsyncInput<
  TAccountSigner extends string = string,
  TAccountBuyerContractCounter extends string = string,
  TAccountContract extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountGlobalState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  buyerContractCounter?: Address<TAccountBuyerContractCounter>;
  /** the contract account holds the contract details */
  contract: Address<TAccountContract>;
  /** the escrow vault holds the funds and is derived using the contract's address */
  escrowVault?: Address<TAccountEscrowVault>;
  globalState?: Address<TAccountGlobalState>;
  systemProgram?: Address<TAccountSystemProgram>;
  cid: StartContractInstructionDataArgs['cid'];
  payoutAddress: StartContractInstructionDataArgs['payoutAddress'];
  escrowAmount: StartContractInstructionDataArgs['escrowAmount'];
};

export async function getStartContractInstructionAsync<
  TAccountSigner extends string,
  TAccountBuyerContractCounter extends string,
  TAccountContract extends string,
  TAccountEscrowVault extends string,
  TAccountGlobalState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: StartContractAsyncInput<
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountContract,
    TAccountEscrowVault,
    TAccountGlobalState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  StartContractInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountContract,
    TAccountEscrowVault,
    TAccountGlobalState,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    buyerContractCounter: {
      value: input.buyerContractCounter ?? null,
      isWritable: true,
    },
    contract: { value: input.contract ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.buyerContractCounter.value) {
    accounts.buyerContractCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            98, 117, 121, 101, 114, 95, 99, 111, 110, 116, 114, 97, 99, 116, 95,
            99, 111, 117, 110, 116, 101, 114,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.escrowVault.value) {
    accounts.escrowVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            101, 115, 99, 114, 111, 119, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.contract.value)),
      ],
    });
  }
  if (!accounts.globalState.value) {
    accounts.globalState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 115, 116, 97, 116, 101,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            183, 21, 201, 39, 132, 92, 173, 133, 20, 49, 110, 146, 116, 34, 193,
            22, 230, 35, 4, 182, 110, 1, 127, 84, 6, 28, 105, 208, 196, 28, 74,
            185,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.buyerContractCounter),
      getAccountMeta(accounts.contract),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartContractInstructionDataEncoder().encode(
      args as StartContractInstructionDataArgs
    ),
  } as StartContractInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountContract,
    TAccountEscrowVault,
    TAccountGlobalState,
    TAccountSystemProgram
  >;

  return instruction;
}

export type StartContractInput<
  TAccountSigner extends string = string,
  TAccountBuyerContractCounter extends string = string,
  TAccountContract extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountGlobalState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  buyerContractCounter: Address<TAccountBuyerContractCounter>;
  /** the contract account holds the contract details */
  contract: Address<TAccountContract>;
  /** the escrow vault holds the funds and is derived using the contract's address */
  escrowVault: Address<TAccountEscrowVault>;
  globalState: Address<TAccountGlobalState>;
  systemProgram?: Address<TAccountSystemProgram>;
  cid: StartContractInstructionDataArgs['cid'];
  payoutAddress: StartContractInstructionDataArgs['payoutAddress'];
  escrowAmount: StartContractInstructionDataArgs['escrowAmount'];
};

export function getStartContractInstruction<
  TAccountSigner extends string,
  TAccountBuyerContractCounter extends string,
  TAccountContract extends string,
  TAccountEscrowVault extends string,
  TAccountGlobalState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
>(
  input: StartContractInput<
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountContract,
    TAccountEscrowVault,
    TAccountGlobalState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): StartContractInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountBuyerContractCounter,
  TAccountContract,
  TAccountEscrowVault,
  TAccountGlobalState,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PAYAI_MARKETPLACE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    buyerContractCounter: {
      value: input.buyerContractCounter ?? null,
      isWritable: true,
    },
    contract: { value: input.contract ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    globalState: { value: input.globalState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.buyerContractCounter),
      getAccountMeta(accounts.contract),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.globalState),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getStartContractInstructionDataEncoder().encode(
      args as StartContractInstructionDataArgs
    ),
  } as StartContractInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountBuyerContractCounter,
    TAccountContract,
    TAccountEscrowVault,
    TAccountGlobalState,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedStartContractInstruction<
  TProgram extends string = typeof PAYAI_MARKETPLACE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    buyerContractCounter: TAccountMetas[1];
    /** the contract account holds the contract details */
    contract: TAccountMetas[2];
    /** the escrow vault holds the funds and is derived using the contract's address */
    escrowVault: TAccountMetas[3];
    globalState: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: StartContractInstructionData;
};

export function parseStartContractInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedStartContractInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      buyerContractCounter: getNextAccount(),
      contract: getNextAccount(),
      escrowVault: getNextAccount(),
      globalState: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getStartContractInstructionDataDecoder().decode(instruction.data),
  };
}
